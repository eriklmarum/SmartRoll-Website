%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: watch tv.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For: Seriy
%%CreationDate: 6/6/2016
%%BoundingBox: 0 0 1800 1200
%%HiResBoundingBox: 0 0 1800 1200
%%CropBox: 0 0 1800 1200
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.1.0 x430 R agm 4.7721 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151805, 2013/04/09-12:08:21        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:MetadataDate="2016-06-06T04:04:21+03:00"
   xmp:ModifyDate="2016-06-06T03:51:03+03:00"
   xmp:CreateDate="2016-06-06T03:51:03+03:00"
   xmp:CreatorTool="Adobe Illustrator CC 2014 (Windows)"
   xmpMM:InstanceID="xmp.iid:f4c03f1a-e3c5-2740-ac9a-145d7bd28b75"
   xmpMM:DocumentID="xmp.did:9bce70a2-44cb-f14c-9a39-ba68791be1b7"
   xmpMM:OriginalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Print"
   xmpTPg:HasVisibleOverprint="False"
   xmpTPg:HasVisibleTransparency="True"
   xmpTPg:NPages="1"
   pdf:Producer="Adobe PDF library 10.01">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Watch TV vector</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Watch TV. Man sitting in armchair watching television. Vector illustration flat design. Template banner for web design.</rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:subject>
    <rdf:Bag>
     <rdf:li>tv</rdf:li>
     <rdf:li>watch</rdf:li>
     <rdf:li>vector</rdf:li>
     <rdf:li>television</rdf:li>
     <rdf:li>technology</rdf:li>
     <rdf:li>man</rdf:li>
     <rdf:li>screen</rdf:li>
     <rdf:li>illustration</rdf:li>
     <rdf:li>person</rdf:li>
     <rdf:li>movie</rdf:li>
     <rdf:li>sofa</rdf:li>
     <rdf:li>flat</rdf:li>
     <rdf:li>male</rdf:li>
     <rdf:li>design</rdf:li>
     <rdf:li>interior</rdf:li>
     <rdf:li>home</rdf:li>
     <rdf:li>background</rdf:li>
     <rdf:li>room</rdf:li>
     <rdf:li>video</rdf:li>
     <rdf:li>cartoon</rdf:li>
     <rdf:li>chair</rdf:li>
     <rdf:li>graphic</rdf:li>
     <rdf:li>leisure</rdf:li>
     <rdf:li>white</rdf:li>
     <rdf:li>lifestyle</rdf:li>
     <rdf:li>entertainment</rdf:li>
     <rdf:li>sitting</rdf:li>
     <rdf:li>concept</rdf:li>
     <rdf:li>channel</rdf:li>
     <rdf:li>news</rdf:li>
     <rdf:li>display</rdf:li>
     <rdf:li>electronic</rdf:li>
     <rdf:li>remote</rdf:li>
     <rdf:li>program</rdf:li>
     <rdf:li>control</rdf:li>
     <rdf:li>digital</rdf:li>
     <rdf:li>film</rdf:li>
     <rdf:li>icon</rdf:li>
     <rdf:li>people</rdf:li>
     <rdf:li>broadcast</rdf:li>
     <rdf:li>broadcasting</rdf:li>
     <rdf:li>cinema</rdf:li>
     <rdf:li>monitor</rdf:li>
     <rdf:li>top</rdf:li>
     <rdf:li>online</rdf:li>
     <rdf:li>smart</rdf:li>
     <rdf:li>multimedia</rdf:li>
     <rdf:li>social</rdf:li>
     <rdf:li>streaming</rdf:li>
     <rdf:li>watching</rdf:li>
    </rdf:Bag>
   </dc:subject>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="172"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgArAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUm1/zl5W8voW1&#xA;jVILNgK+k7cpSPaJeUh+hclGBPIMZTA5sGufzufUS0Pk/wAv3mrvUqLuYC3tgfHkeVfk3HLhgr6j&#xA;TRLUjow/zb53/N/SpLHU9RvraxjmkYR6bZoGQcE5kSlg5bpSnM/RlgxwI2avHkS9/gl9WCOWnH1F&#xA;DU60qK5hucvxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KvH9L8q+X9Q1fWdZv7KO71F9Vv4zNPWQBILp4owEYlBxRAOmZRkQAPJ1mU+osrRFRQiAKqiiq&#xA;BQADwGQa3mv53GlhpP8Axnl/5NHLcfVlHm9L07U79jaM07mgjHGtFpQbUG2YZdoGaYpdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVYoPPsUcPmt7u09B/K7NzT1OXrR+j60Tj4F4GTpTf5nLPD&#xA;5ebX4nPyUIfzGjn8t+XdYhsS0vmC9hsFtDLT0ZJHdZSX4HkIvSavwitO2Hw9yO5fE2B72SDXtDOo&#xA;/owajanUd/8AQhNH6+3X93y5/hlfCatnxC6QGn+dNBvtfv8ARIrmIXli0aUMsZ9VpELssQDcmMfG&#xA;j7bHJGBAtiJgmkwi13RJdQbTYtQtpNRSvOyWaNplp1rGDzFPlkeE1bLiF0x/yT57s9Z0LTp9Vu7K&#xA;11fUHuFisVkWNnEVzJCvpxSOztURivXfJzx0duTCE7G/NluVtjsVdirsVdirzXy79nVv+2xqn/Ub&#xA;LmSenuDq8n1H3ptkWDzT87v94NJ/4zy/8mjluPqyjzeg6b9m1+Uf8Mwy7QMz1e5ktdLu7iP+8iid&#xA;kr/MBtlWeZjAkdA2Y43IB53o0txdTzTXE0krLQjmxIq1d9z7ZymXLI8yXcwgO5Oub/zH78o4j3tt&#xA;BsTTAUDsB8zhGSXeUcA7m/Xn/wB+N95x8WfeV4B3O9ef/fjfecfFn3leAdzvXn/3433nHxZ95XgH&#xA;c715/wDfjfecfFn3leAdzvXn/wB+N95x8WfeV4B3O9ef/fjfecfFn3leAdypBfXMMqyLIxI6gkkE&#xA;eByzFqskJWCWE8MZCiGX52TonYq7FXYq7FXYq8f8+Wsq/mIdCjVjb+c0036yQO1hcMZ/+SCjMnGf&#xA;Tf8ANtx5j1V3u0K2mH5pr5ZYE22iX+o62i/s+lewxegB/qS3MmMj6L76CxHrru3Y5ret6ZqNhZ6l&#xA;aHSNImbWI5rLSbaHlqhdLvg8lxMGX0z1anClNq5OMSDW52+DCUgd9ufxZfbRaRaeefPsMMdrb648&#xA;dtLoSlY0maV7E1a2qASzS/a4d+uVm+GPc2CuKXeiPy1m/LVNC8uIpsf8RstCJRGb4XxQ/WeVf3oP&#xA;Ll9rtT2wZeKz3Lj4aHexGLy5oUX5IvrkdjEusPerIdQ41nDJq3orxc7r+72ouWcR8Sun7GvhHBfX&#xA;9r3rMRy3Yq7FXYq7FXmvl37Orf8AbY1T/qNlzJPT3B1eT6j702yLB5p+d3+8Gk/8Z5f+TRy3H1ZR&#xA;5vQdN+za/KP+GYZdoGW+Yv8AjhX/APxgf9WY+q/upe5tw/WGAeXP+Pj/AGH/ABtnJ5XdwTnKmaV+&#xA;YCRbR0NPj/gcsx82EmJ3mvWFoSs1x+8HVFqzfTTp9ObXTdl58wuMdu87B1mp7V0+E1KW/cNyhR5u&#xA;0oneWQe5U/wzLPYGp7h83DHtDpe8/JFQ+YNLmICXagns5Kf8SpmLl7K1MOcD8N/ucvF2tpp8pj47&#xA;ffSOErMAQ5IPQg5ryK2LsAb3Dub/AMx+/FLub/zH78VXxLNLIsaElmNAN8lCBkaHNjKQAss4TXNT&#xA;Vg3rcgP2SBQ/hnWulZVbTevbxzUp6ihqeFRiqpirsVdirsVU3trd5o53iRpoq+lKVBZeQoeLHcVx&#xA;taYNr35n6VoN9fTXnljWgloxhn1aOxT0GRW4gidpEqhNONcujiJ6hqllA6FBJ+YvlpLe91WTyXq9&#xA;rCIfrVzezabDEsqKysCZWkAY78hU9sPhnlY+aPEHOizex/Qer29jr8dtFI00CT2l3JGhlSORea0c&#xA;1K7N2OVGxs2Cjulvk3VvLPmW3l8xaVpogZppIBeSwxJNLwoGdXQuxQk03NdumGYMdiiBEtwn/wBR&#xA;svq31b6vH9WrX0OC8K8uX2aU+1v88jbKlbAl2KuxV2KuxV5r5d+zq3/bY1T/AKjZcyT09wdXk+o+&#xA;9Nsiweafnd/vBpP/ABnl/wCTRy3H1ZR5vQdN+za/KP8AhmGXaBlvmL/jhX//ABgf9WY+q/upe5tw&#xA;/WGAeXP+Pj/Yf8bZyeV3cE5ypm87/MrzNIl5DotoxSRF9e6lU0IDbKg+fU/RnVez3Zkcn72YsdB+&#xA;l5X2h7Tlj/dQNHqf0MBztXiHYVcCCKjpgVHaXqF3bXEaxyMI3YBo67Gpp9+a7tLQ482Mkj1AbF2f&#xA;ZmvyYMgAPpJ3HT+1m31HU/5X/wCCH9c8+4g+jUXfUdU/kf8A4If1x4gtFOPLdtdxXEzTqQCgAJNe&#xA;+bPswjiNdziavkGQZuXAZrpqsthbhhQiNag/LFURirsVdirsVdirC/zm/wDJZa7/AMYo/wDk/Hlu&#xA;H6w1ZvpKe2Nhb6h5St7C5Xlb3dgkEy+KSQhWH3HIE0bZgWHluj+abnQ/yY17Tp3P6W0Ga40VP5y8&#xA;snCJlH+SJTx/1cyJQuYPQ7tAlUCO7Z6f5K0EeX/Kel6PQB7S3RZqdDK3xyn6ZGY5jzlZJb4RoAJ1&#xA;kWTsVdirsVdiriQASTQDqcVeZ+WZEki1SSNg8b6vqbI6moIN7KQQRmSenuDq8n1FOMiweafnd/vB&#xA;pP8Axnl/5NHLcfVlHm9B037Nr8o/4Zhl2gZb5i/44V//AMYH/VmPqv7qXubcP1h5LdebNN8s6VdX&#xA;95V3YoltbKaPLJRjxHgPE9s5mOA5JAB3HEIh5D5h/M7zdrUrVvHsrU/ZtbUmJQPBmHxt9Jza4tJj&#xA;h0s+bTLISxd5pnk9R3ZpOvMkk/ecyWt6X+XWi+WdWsT62oTy6oAfWs2cKEFaBo1IJYe9fmMRrs2E&#xA;+k+n7GnL2Zp88SJD1d/Irdd0abSb82ztzRhzhk/mStPvHfOq0OsjqIcQ2PUPCdpdny0uThO46HvC&#xA;W2UOmJqtsb9ZDYyFxPHExUk8CVIoV/aGT1Uchh+7NTY6KeIT/fC4fb+LWazcWdpPfnTXcW0SCW0M&#xA;lS61Xp8Xg4yGLj8Ksv1Vu25RiOoBw/RYpry/+buuWIEN/bpfwfzD91IPkQClPbjnPajsPHPeBMT8&#xA;x+Pi9Zi7TnH6hbNovzb8qva+swuI5a0+rGMF/mCG4U/2Was9h5+Ktq77/Bc3+U8VXugZvztsoHf6&#xA;lpckykUVppFiIPuqiX9ebTQdkyxEmUhv3OFqe0Iz2ASe6/O3ze7VtY7W0INVZYvUb6fVLof+Bzaj&#xA;TRcE6iShc/nj+aMtpLD+meJcf3q29urgeCssYp8+uSOCPcgZ5MJuPPfnea4L3HmLUnYsQx+tTkgH&#xA;cU+OgHtkOEdzLiPe+k/+cd/8dy+Wru98zXNzPZXLxHR1vGZ5vTVW9RwXq/pvyXhU9jTbrRmq9nIx&#xA;XW71jKW12KuxVjf5jaFf695K1TSNPCteXaIsIduK1WVWNT22XJ45ASBLDJG4kBOtKt5LbS7O2loJ&#xA;YII43puOSIFP4jIk7shyeb65+WWs3v5lR6lCYx5Yu7m01HU4iwDG5skkVBw7hqjl419svjlAjXVp&#xA;ljJlfR6lmO3uxV2KuxV2KuxVgv51azLpnkC99Fykt88dmrDrSQ1kH0xowyzELk15TUWJ/lH/AMoR&#xA;a/8AGW4/5PNl2Tm6082ZZBDzT87v94NJ/wCM8v8AyaOW4+rKPN6Dpv2bX5R/wzDLtAy3zF/xwr//&#xA;AIwP+rMfVf3Uvc24frD5R/Na4mfXbeBj+6itwyL7u7cj/wAKPuzV6Ieknzdlk5sKzMa3Yqq2t1cW&#xA;txHc20jQzxMGjkQ0ZSO4IxItIL2LW5P0r5DsNbv6QahEiOppTmXIVlp4SAchl3ZOWUM/DHeJ5uu7&#xA;ewQyabjltKPL49GFzsrG3cbgyCh+akZ156PAxHNCa8rC1Mi9/gf5FgR+rK83JytB/eBjmYjvXYq7&#xA;FXYqyvyT+X2qeZLiKZkaDRuX7+82BYA0ZYq15NtStKDv4ZVkyiPvbceIy9z2by/+XH5e6HNHPb6H&#xA;Hd3MZB+sXztcMWG4bgaRA/JMwpZZFzBjiHpen67bXTrCyGKU7KOqn2BytsSXXvP0GjDURKkM09tf&#xA;Q2dvbmZIPgmt4ZfUmdywVeUjDlTwHXLI47a5ZKSz/lbAY2Dx6PIYdQmjhhLzIjjlBFcSFlIpyRbh&#xA;aLy3o3Sm8vC82Pi+SZ+XfPsmr3sEEmmNaxXPART+ssg5SwNcRgqApFUiep7EDx2jLHXVlHJaUQfm&#xA;0o9OKWwEsrW/rVWeNHLi3S4p6bD4UPqcA3I/FtQkjJeCx8VM4vzGhnb0Le0WW8YRtFAJ+PITNZpG&#xA;/wASBgjNf7MV/ZP0Dw/x82XiNj8w1XRLzUbjTzBNai0YW7zJwK30ohiZpqcUCvy51GwFcfD3pfE2&#xA;tjg/N66Ng1t9XT9Im1kmW7WSNlDrFJOrCH7TQhIuPqdOW2T8Hdh4qdaV+Z66nqy6ZbaaTM94LRSb&#xA;hDxWl0zNKFVjG6rYsfTO9CN8gcVC2Qy2aW63+ZE9rcXsNlbQySWMssbiSWqkRKCZHZFYIo+I7Ful&#xA;G4kEAxxrLIj9Y/MG10zVv0W1uJ7o2huYxHJsXClwhLIBxZUajivuBXIxx2LSclGks1P81m02D/Sd&#xA;HcXhmEKQCdOBIe4iespUBaSWbqtR8VV6VNJDFfVictdGSeVtfm1a2uGu0ht7yG6uoBaxyc3EVvO0&#xA;Ss6kKVLAA9wQQe9BCcabIytgf/ORkjDynp0f7LX6sR7rDIB/xLJ4ebVn5ID8o/8AlCLX/jLcf8nm&#xA;yzJzcA82ZZBDzT87v94NJ/4zy/8AJo5bj6so83oOm/ZtflH/AAzDLtAy3zF/xwr/AP4wP+rMfVf3&#xA;Uvc24frDwHzv5Hu/MOmte6anqalYUpBUAyxNUsoJ/aUiq/Tmh02oEDR5F20oWNnjMjelI0UoMUqH&#xA;i8bgqykdiDm2Dj2tM0Q/aH68NLb0j8t/IOl6paprWozpcQAnhZIwIHEkVnp06V4/f4ZjZspBoN2O&#xA;AIsoj8wPMMGp30NhYsHs7OoDJ9l5Dt8NOyjYfTnQ9kaM44mUvql9zyHbuvjmmIQPoh9pS210ia5s&#xA;7qWIn0tMjE8r+L1qF/4Hk2Z+p1UcUoQ6yLqtJopZoZMnSEfx9iH1GMSWE6/5BI+a7j9WZmQXEuHp&#xA;pVkifNiSqzEKoJY7ADc5gk09GmkXlXzFLCZksZOI7NxRvoVyrfhmFPtHBE0ZByY6PKRfCll5Z6pa&#xA;gm4s5YF/mkRlH3kUy+GeE/pILXLDKPMEIFnZuprljFG6F5t13QNQFxpd40ISjPAeRhlIIBV0+y2x&#xA;+fgcqnEHm2RkRyfW3kOWw82+U9P8wIktp9cVvUtyQwV43aN+LECq8kND4ZhTjRpzIysWyqz0WxtZ&#xA;BIil5F6M5rT6BQZFkkmq+c/KtpNeR3NvNO0MotZmjtJJlkmEfrtErBSHMcac2HYD2ywQJazML288&#xA;+U2ieWrvFG0ckUn1aTjIzOsStExUBuLSICw+zyFceAp4wo235i+UJ9Ql0+zaWe9guRaejDbyMzSU&#xA;kDFKL9lBDJyPYD3FU45VaBkF0lCfmL5HtDPc/U5YtU1C3kuJLUxMXkWFGQJUgqoZLU7Dbbf3l4ci&#xA;x8SLI5fNvl9E9bhK8pcwiJIHaYyRziHhxArUSkD8emQ4Cz4ws1Lzl5Wsr260u5bnexCJWskiMkkv&#xA;rMqIsaAfH8Ui17CuIgTupmBsllj+YegPY297qNr9XkuIx8MUUkxjiKW7yGU+mvBFa9jruRv41Akc&#xA;Z6MRkHVHL518vw7yRN9bcQymO2hklLyXLGKIIeCMzNQ78fHfY4OAp4wqp5w0BZvRul9F3eariKRo&#xA;wEkmiHquY1CO/wBVccT3FATtUcBTxhC3P5h+TrfQrfXbhnjsJ5WtoHeBg5MQYtRaV4qFb+G+EY5X&#xA;SDkjVrNP87adfX1tp81kGmu53hAjBkC+nJc0d6oFA/0Xlsx6npTdMCN1EwWVLZWi3bXixKLp1CNN&#xA;T4io7V+gfcPAZC2dPO/+cgLF7jyGs6ios7yGZz4KyvF/xKUZZhO7VmHpSP8AKP8A5Qi1/wCMtx/y&#xA;ebLcnN155syyCHmn53f7waT/AMZ5f+TRy3H1ZR5vQdN+za/KP+GYZdoGW+Yv+OFf/wDGB/1Zj6r+&#xA;6l7m3D9YYB5c/wCPj/Yf8bZyeV3cEo81+RNG1WQz3NilyD1YArIvyZSGp9OW4dRKOwLGeMF5F5s8&#xA;kabpN4pggb6nMP3bF3PFh9pa1+nOq7Kjj1EDxH1h5vtXV5tPMcIHAUtstKSOr20YUmoL13oeoqTX&#xA;N7i0cI7gbvO6jtLLkFSlt3ckzt7IR/ExrJ2I6D78zBGnWyyW9H8uWlpH5JaGbhBHdJMJpZCBUyM0&#xA;fNye52zj9cZHV+m5EEV9733ZggNAOKoCQN/Ha2A2yer6MUq7y8UZCetdiM6zPPhxmR2oF4XBDiyx&#xA;A3uQ+9mel6Ha249PT7RIyBRmRRyI/wApzufpOedZtTOe85EvpmPDGP0ik5h0KZt5XCDwHxHMY5G7&#xA;hTzRbCC1eQx1LMACxPvmz7Klcpe5xNYKAR1j5Q8t6hqamfTLUzNVjOYIjJUAn7RUnN7xHvdbwjuT&#xA;Fvym8mNJ6h0uxLVryNnAW29+OPGe9eEdzK9Psbews4rS3XjDCKIoAAArWgAoAMiyRGKsT1vR/wAt&#xA;pZr46u9lHLJLG9+stz6VJmThGzL6ihHeMUrsWXxGWRMujXIR6r3g8hXkt1pv+jPHpsUjXqxzBYoE&#xA;lcerHLwcBK+iOSttT2x9Q3X08kLp0X5a6o6LavbCW5vJp7OJbng0k8LSJJNaqkn2W5OSY9mB3wni&#xA;CjhKs9l+XcV7OQ1r6372zv1W5HCMOs0zxzx+oFUf3pCldt6U3wXJaiifqnkSwu2uXntYLqnqSSS3&#xA;PxH6s4Rnbm/7MkdHY/tfa3rguRTUQhdQtfyzvfV1e8ubB0mZYnvPrapH6rGKZOLLIqrI3oRtVaMQ&#xA;B2wgzGyCIndAXWnflpHqbRSPEIfL9pLPeW6yl4YwGt1HrhWZ+aCyjARuvgTkgZ170ERv3I65tPyw&#xA;kWV7i50/9ysHORrtQYV+GSFlb1KxcuCsCpHKg60yIM0kRVrm18gS2sdu15aRrqDNFauLpeUkqSSE&#xA;+kWc83SW6fbf4moe2IMlIihdH0vyWNKtdKl1qLVltbsixd7tfUhnVeAghaNw44q1OHKu/hthkZXd&#xA;UgCNVadTeUdBdZfTtzbyysXFxC7JIjkyNzQ1+E1uJNuh5UII2yHGWfAE3jjWONY1JKoAoLEsaAU3&#xA;J3ORZITWtIstZ0m60u+Uta3cZilCmjAHoVO+6ncYQaKCLFPNvIumxaXpFzpsLM8VjqF/bRu9OTLD&#xA;dSIC1KCpC5kSNusmKJDIsiweafnd/vBpP/GeX/k0ctx9WUeb0HTfs2vyj/hmGXaBlvmL/jhX/wDx&#xA;gf8AVmPqv7qXubcP1hgHlz/j4/2H/G2cnld3BOcqZoDVtC0vVbZre+gWSN+p6NXxDDeuXYNRPFIS&#xA;gaIac+nhliYzFgvMPMH5X3dhcl9LueVu28azbMP8nkoofuGdZpPaSJH7yNHvH6nldX7OEH93Kx3H&#xA;9aVx+UPM7bFoU36s3/NKnM6XtDgH84/BwI+zuc/zR8Uxh8pa7Jbi2u9WK2wNfRjDMO3jw8Mwcnb2&#xA;IS4oY/V3mh+t2MOwsphwTyejuFn76TXTvKml2LeonOWelPWkILfRtQZqdX2rmz7SNR7g7bR9lYcG&#xA;8Rcu8sg0W0peBEBKt/eeyjNZOWzsojdkf6PtvA/flHEWyl8dpFHUpUE+JzL0esOKd9Dzac+Djj5p&#xA;j5f/AOOpH8m/4ic6x0rLMVdirsVYhrH5e6Frt1dyz3k7SNdRzSRJ9XaKOSOFoypiaJkYvFNRjIGa&#xA;nHegGWDIQ1nGCui8g6FHBqulfXbhotVhlU2paIGGKaV5XMVIw397Kft8uwx8Q7FfDG4QVl5H8rm8&#xA;s9bXV57owTRPJKXg4TzyStPb8/TjXj+8vKqqca8gDUYTM8qQIDnaLj/K/wAuob+rzst/PNcOP3QZ&#xA;PXSdHRZFjEhUG6dl5MaGnvUeKU+EFa18kaYzrcfpK5u9pUletuBI7XbXLmQxRJy4ylgFPwrvQA1O&#xA;Jme5RAIHV/y+8p38cUZvpbZndrONoXh+In6z60IDRsvJkuZVO3JaClCDUjIQg4wUVYeRfL1tPqtg&#xA;LueZNRtp45rB3j/dW99K7ycCqLJ8UhejMx8O2A5DsUiA3dY/lro1tfXN89xPc3N1J600kog5GRk4&#xA;yHksStxc/EVrxB6AYnKVGMKV1+WthLeQendTR2APqXcA9OsrItkkaVMfwxkacrPxIbketDQEZT+P&#xA;j+tTj/HyVPK/5d6Bo1xb6hZXU90YwPqru0TIIfS9KJV4ItQsZ2atT3JwSyE7LHGAy7K2x2KuxV5r&#xA;5d+zq3/bY1T/AKjZcyT09wdXk+o+9Nsiweafnd/vBpP/ABnl/wCTRy3H1ZR5vQdN+za/KP8AhmGX&#xA;aBl3mEE6HfgCp9B/+I5Rqv7qXubcP1j3vPvLhFbgd/g/42zksru4J1lTNA6tey2kKNFTkzU+Lfam&#xA;ShG2MjSUy6zdSoUkSNkPUFT/AFy0QDDiQBNTWlPbJodirhselfbFUbBq08C8YY40Heimp+ZrkDC0&#xA;iSp+nr7wT7j/AFweGE8RbGvX5NAEqfY/1w+GF42S6bdraXiTspZVqCB13FM7J0LMY5EkjWRDVHAZ&#xA;T7HFV2KuxViN15K1C41x9SOoMii4+sWyK0gMdXtuQFDx3iglTw+P55YJiqazA3aTx/lrraafZ231&#xA;+BvqpiM8Z+sGO7McnN3nrJy5Sfaahpy7Uyfii2Phldb/AJa6xFd6XK+oRTwWElu/oSCWifVzaEtC&#xA;AwUM31Rl+IdG+eDxRuvhlFp5C1r6ilvJqgeS0jEdhOplVlaGKOKCWT4jyesXNu1T0weIO5PhnvVp&#xA;/I2ox6EdO0y9itZkuL2WOXi/Fo71JU+NVZTzj9b4SDT4R9D4guyngNUFaXyROLWeG1uIoHbUp9Sh&#xA;m4Ft7iORCHXkKlDOaUO4A6Vwca8CRj8sNeaSydtXSOS2XgLtBJ60aiWeULDRo0p+/CUIoFFABtk/&#xA;FHcx8I96nB+U+rjSJrSTVlScwzJaGL1zFC8ogWqrJIxIdYZOdT1kamPii+SPCNc0zvPy6v7mPy7A&#xA;dUk+q6OrLdQl2Jl5OjAq9B9lVMdKfYNOlQYjJz25sjj5eTKfLmltpOhWOmMUY2cKw84wQrcBTlQ1&#xA;oW6keOQkbNs4ihSY5Fk7FXYq818u/Z1b/tsap/1Gy5knp7g6vJ9R96bZFg80/O7/AHg0n/jPL/ya&#xA;OW4+rKPN6Dpv2bX5R/wzDLtAz1lVlKsAVIoQdwQcSEpIPJujJOZoBLAx6iN9vlRg22YE+zcUu9yY&#xA;6uYY/wAn/mP4f0yr+ScPmy/Oz8kNc2UVywaYs3H7IrQD7snHszEO9B1cyo/oay8G+/Jfybi80fmp&#xA;u/Q1l4N9+P8AJuLzX81N36GsvBvvx/k3F5r+am79DWXg334/ybi81/NTd+hrLwb78f5Nxea/mpu/&#xA;Q1l4N9+P8m4vNfzU18OmWcTh1QlhuCTWhyzHoccDYG7GWonIUi8y2hmmmf8AHOt/+Ma/qxVE4q7F&#xA;XnOu6V+Y03mC9vrMSFYBImmuklqqfVpWtS6QiQFlnKRzAtL8PLjTbL4mNNMhK0PLpn5sR2tu9sxX&#xA;UZjG97Mr2tC4jVE9bkKMqcD6ojA5VHGvZuCKmnNtYfmAnmaxea+lbRj6st0vG1dQxkkAicVikCel&#xA;6XBk5ENXl1yJMa82QEr8ljWP5kQ3k00F49xEysYraVrVUDyC7FAwiLgJxteJPLq1Q2+NxWpMfvNT&#xA;/MtLq00q4luYL2SxujayQwwFZbtxcC2W4cNIq8AsTMyEqp+39sHJgQ5sCZcmVW8Pn2HXbJJJWn0m&#xA;KadbiZ/q9ZIDyMbSBBEyuKrx4Ag0NQv7VZ4a82z1Wkuq6P8AmHf3t36say28M876Yztb1RZre5i4&#xA;ihHKMfuac0DVY1BA5ZMSiGJEivtX/MsXF8knrSXMEiyiBntRFJFML+JDbuoWiK31eQrIefwnx+IH&#xA;g/HwUcX4+LINBbzjFrF6urRtNp0rILRg0B9Ogcs1VZGKkBAQUqG6ch8RjLhrZnHivdkuVs3Yq7FX&#xA;Yq818u/Z1b/tsap/1Gy5knp7g6vJ9R96bZFg80/O7/eDSf8AjPL/AMmjluPqyjzeg6b9m1+Uf8Mw&#xA;y7QM+xS7FUnuPLVvJKzxymNWNeFAQK+G4xVT/wALR/8ALQf+B/txV3+Fo/8AloP/AAP9uKu/wtH/&#xA;AMtB/wCB/txV3+Fo/wDloP8AwP8Abirv8LR/8tB/4H+3FXf4Wj/5aD/wP9uKu/wtH/y0H/gf7cVd&#xA;/haP/loP/A/24q2nleEMC87MvdQAK/TU4qnSIqIqIKKoAUeAGKt4q7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq818u/Z1b/tsap/1Gy5knp7g6vJ9R96bZFg80/O7/AHg0n/jPL/yaOW4+rKPN6Dpv&#xA;2bX5R/wzDLtAz7FLsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVeb+Yfyn1R9Wu9Y8r+YZ9JuryVrieylHq2jyuaseP7PJtzVWy+ObaiHHyacE2GK/4p/MTR&#xA;KrrehpqlumzXmmsS1B1JjIJP/AqMmOA8jTjSwSDE/wAxvO2h+ZbHTY9PaVLqCaQz2s0ZSRKxkb9V&#xA;O/gcsjAi2ERu9h05SotlIoRwBHvtmCXaBnuKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpVd+XbSZmeNmidjUjqtT7f24qx/UPJUbXK3Utjb3c8ZBjn&#xA;MaNItNxQsOQ6dsPEUcIaghlF5FGUKyF1+Egg9cCWbYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq6grWm46HFXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX/9k="/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:4e448498-9c4f-e846-b021-4ea8cb40c1ff"
    stRef:documentID="xmp.did:4e448498-9c4f-e846-b021-4ea8cb40c1ff"
    stRef:originalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:4e448498-9c4f-e846-b021-4ea8cb40c1ff"
      stEvt:when="2016-06-06T02:02:41+03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2014 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:9bce70a2-44cb-f14c-9a39-ba68791be1b7"
      stEvt:when="2016-06-06T03:51:03+03:00"
      stEvt:softwareAgent="Adobe Illustrator CC 2014 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:f4c03f1a-e3c5-2740-ac9a-145d7bd28b75"
      stEvt:when="2016-06-06T04:04:21+03:00"
      stEvt:softwareAgent="Adobe Bridge CC (Windows)"
      stEvt:changed="/metadata"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="1800.000000"
    stDim:h="1200.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Группа образцов по умолчанию"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="R=27 G=188 B=155"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="27"
         xmpG:green="188"
         xmpG:blue="155"/>
        <rdf:li
         xmpG:swatchName="R=46 G=203 B=112"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="46"
         xmpG:green="203"
         xmpG:blue="112"/>
        <rdf:li
         xmpG:swatchName="R=53 G=152 B=219"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="53"
         xmpG:green="152"
         xmpG:blue="219"/>
        <rdf:li
         xmpG:swatchName="R=155 G=88 B=181"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="155"
         xmpG:green="88"
         xmpG:blue="181"/>
        <rdf:li
         xmpG:swatchName="R=52 G=73 B=94"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="52"
         xmpG:green="73"
         xmpG:blue="94"/>
        <rdf:li
         xmpG:swatchName="R=241 G=196 B=15"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="241"
         xmpG:green="196"
         xmpG:blue="15"/>
        <rdf:li
         xmpG:swatchName="R=231 G=75 B=60"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="231"
         xmpG:green="75"
         xmpG:blue="60"/>
        <rdf:li
         xmpG:swatchName="R=229 G=126 B=34"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="229"
         xmpG:green="126"
         xmpG:blue="34"/>
        <rdf:li
         xmpG:swatchName="R=22 G=160 B=134"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="22"
         xmpG:green="160"
         xmpG:blue="134"/>
        <rdf:li
         xmpG:swatchName="R=39 G=174 B=97"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="39"
         xmpG:green="174"
         xmpG:blue="97"/>
        <rdf:li
         xmpG:swatchName="R=41 G=127 B=184"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="41"
         xmpG:green="127"
         xmpG:blue="184"/>
        <rdf:li
         xmpG:swatchName="R=143 G=68 B=173"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="143"
         xmpG:green="68"
         xmpG:blue="173"/>
        <rdf:li
         xmpG:swatchName="R=45 G=62 B=80"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="45"
         xmpG:green="62"
         xmpG:blue="80"/>
        <rdf:li
         xmpG:swatchName="R=243 G=156 B=17"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="243"
         xmpG:green="156"
         xmpG:blue="17"/>
        <rdf:li
         xmpG:swatchName="R=193 G=57 B=43"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="193"
         xmpG:green="57"
         xmpG:blue="43"/>
        <rdf:li
         xmpG:swatchName="R=210 G=84 B=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="210"
         xmpG:green="84"
         xmpG:blue="0"/>
        <rdf:li
         xmpG:swatchName="R=244 G=92 B=117"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="244"
         xmpG:green="92"
         xmpG:blue="117"/>
        <rdf:li
         xmpG:swatchName="R=30 G=62 B=87"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="30"
         xmpG:green="62"
         xmpG:blue="87"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Оттенки серого"
       xmpG:groupType="1">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="R=255 G=255 B=255"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="255"
         xmpG:green="255"
         xmpG:blue="255"/>
        <rdf:li
         xmpG:swatchName="R=0 G=0 B=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="0"
         xmpG:green="0"
         xmpG:blue="0"/>
        <rdf:li
         xmpG:swatchName="R=26 G=26 B=26"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="26"
         xmpG:green="26"
         xmpG:blue="26"/>
        <rdf:li
         xmpG:swatchName="R=51 G=51 B=51"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="51"
         xmpG:green="51"
         xmpG:blue="51"/>
        <rdf:li
         xmpG:swatchName="R=77 G=77 B=77"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="77"
         xmpG:green="77"
         xmpG:blue="77"/>
        <rdf:li
         xmpG:swatchName="R=102 G=102 B=102"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="102"
         xmpG:green="102"
         xmpG:blue="102"/>
        <rdf:li
         xmpG:swatchName="R=128 G=128 B=128"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="128"
         xmpG:green="128"
         xmpG:blue="128"/>
        <rdf:li
         xmpG:swatchName="R=153 G=153 B=153"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="153"
         xmpG:green="153"
         xmpG:blue="153"/>
        <rdf:li
         xmpG:swatchName="R=179 G=179 B=179"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="179"
         xmpG:green="179"
         xmpG:blue="179"/>
        <rdf:li
         xmpG:swatchName="R=204 G=204 B=204"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="204"
         xmpG:green="204"
         xmpG:blue="204"/>
        <rdf:li
         xmpG:swatchName="R=230 G=230 B=230"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="230"
         xmpG:green="230"
         xmpG:blue="230"/>
        <rdf:li
         xmpG:swatchName="R=242 G=242 B=242"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="242"
         xmpG:green="242"
         xmpG:blue="242"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Цветовая группа 2"
       xmpG:groupType="1">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="R=119 G=180 B=199"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="119"
         xmpG:green="180"
         xmpG:blue="199"/>
        <rdf:li
         xmpG:swatchName="R=110 G=172 B=183"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="110"
         xmpG:green="172"
         xmpG:blue="183"/>
        <rdf:li
         xmpG:swatchName="R=223 G=243 B=252"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="223"
         xmpG:green="243"
         xmpG:blue="252"/>
        <rdf:li
         xmpG:swatchName="R=146 G=211 B=217"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="146"
         xmpG:green="211"
         xmpG:blue="217"/>
        <rdf:li
         xmpG:swatchName="R=170 G=210 B=220"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="170"
         xmpG:green="210"
         xmpG:blue="220"/>
        <rdf:li
         xmpG:swatchName="R=177 G=196 B=200"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="177"
         xmpG:green="196"
         xmpG:blue="200"/>
        <rdf:li
         xmpG:swatchName="R=163 G=198 B=194"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="163"
         xmpG:green="198"
         xmpG:blue="194"/>
        <rdf:li
         xmpG:swatchName="R=188 G=228 B=227"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="188"
         xmpG:green="228"
         xmpG:blue="227"/>
        <rdf:li
         xmpG:swatchName="R=38 G=143 B=175"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="38"
         xmpG:green="143"
         xmpG:blue="175"/>
        <rdf:li
         xmpG:swatchName="R=113 G=184 B=180"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="113"
         xmpG:green="184"
         xmpG:blue="180"/>
        <rdf:li
         xmpG:swatchName="R=232 G=243 B=248"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="232"
         xmpG:green="243"
         xmpG:blue="248"/>
        <rdf:li
         xmpG:swatchName="R=219 G=230 B=236"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="219"
         xmpG:green="230"
         xmpG:blue="236"/>
        <rdf:li
         xmpG:swatchName="R=194 G=203 B=206"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="194"
         xmpG:green="203"
         xmpG:blue="206"/>
        <rdf:li
         xmpG:swatchName="R=164 G=188 B=194"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="164"
         xmpG:green="188"
         xmpG:blue="194"/>
        <rdf:li
         xmpG:swatchName="R=129 G=168 B=184"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="129"
         xmpG:green="168"
         xmpG:blue="184"/>
        <rdf:li
         xmpG:swatchName="R=141 G=216 B=255"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="141"
         xmpG:green="216"
         xmpG:blue="255"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Цветовая группа 4"
       xmpG:groupType="1">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="R=15 G=118 B=137"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="15"
         xmpG:green="118"
         xmpG:blue="137"/>
        <rdf:li
         xmpG:swatchName="R=11 G=89 B=102"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="11"
         xmpG:green="89"
         xmpG:blue="102"/>
        <rdf:li
         xmpG:swatchName="R=50 G=82 B=110"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="50"
         xmpG:green="82"
         xmpG:blue="110"/>
        <rdf:li
         xmpG:swatchName="R=38 G=62 B=83"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="38"
         xmpG:green="62"
         xmpG:blue="83"/>
        <rdf:li
         xmpG:swatchName="R=255 G=255 B=255 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="255"
         xmpG:green="255"
         xmpG:blue="255"/>
        <rdf:li
         xmpG:swatchName="R=242 G=242 B=242 1"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="242"
         xmpG:green="242"
         xmpG:blue="242"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Цветовая группа 3"
       xmpG:groupType="1">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="R=207 G=68 B=68"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="207"
         xmpG:green="68"
         xmpG:blue="68"/>
        <rdf:li
         xmpG:swatchName="R=235 G=187 B=84"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="235"
         xmpG:green="187"
         xmpG:blue="84"/>
        <rdf:li
         xmpG:swatchName="R=148 G=186 B=101"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="148"
         xmpG:green="186"
         xmpG:blue="101"/>
        <rdf:li
         xmpG:swatchName="R=39 G=144 B=176"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="39"
         xmpG:green="144"
         xmpG:blue="176"/>
        <rdf:li
         xmpG:swatchName="R=43 G=78 B=114"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="43"
         xmpG:green="78"
         xmpG:blue="114"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                            
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1200 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1200 li
1800 1200 li
1800 0 li
cp
clp
1800 1200 mo
0 1200 li
0 0 li
1800 0 li
1800 1200 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
1777.3 1069.78 mo
1775.14 1069.78 1772.73 1069.39 1770.03 1068.51 cv
1769.8 1068.44 1769.58 1068.36 1769.37 1068.29 cv
1768.72 1068.07 li
1643.77 1027.29 li
1638.25 1025.48 1634.24 1017.19 1634.24 1007.52 cv
1634.24 746.502 li
1632.82 747.398 1631.36 747.872 1629.87 747.872 cv
1615.5 747.872 1603.84 704.421 1603.84 650.822 cv
1603.84 597.223 1615.5 553.773 1629.87 553.773 cv
1631.36 553.773 1632.82 554.246 1634.24 555.142 cv
1634.24 294.119 li
1634.24 284.462 1638.25 276.161 1643.77 274.354 cv
1770.03 233.136 li
1770.34 233.036 1770.64 232.966 1770.94 232.906 cv
1773.44 232.092 li
1774.97 231.593 1776.52 231.353 1778.06 231.353 cv
1784.42 231.353 1790.45 235.479 1793 242.362 cv
1795.01 247.792 1795.29 252.902 1795.29 252.902 cv
1795.29 1046.43 li
1795.29 1046.43 1793.99 1069.78 1777.3 1069.78 cv
.819608 .819608 .819608 rgb
f
1579.31 697.304 mo
1564.93 697.304 1553.27 653.853 1553.27 600.254 cv
1553.27 546.655 1564.93 503.205 1579.31 503.205 cv
1593.68 503.205 1605.34 546.655 1605.34 600.254 cv
1605.34 653.853 1593.68 697.304 1579.31 697.304 cv
cp
.27451 .376471 .443137 rgb
f
1719.47 1017.94 mo
1718.8 1017.73 li
1718.15 1017.5 li
1593.21 976.719 li
1587.68 974.912 1583.68 966.62 1583.68 956.953 cv
1583.68 243.551 li
1583.68 233.894 1587.68 225.593 1593.21 223.786 cv
1719.47 182.569 li
1719.77 182.468 1720.07 182.398 1720.37 182.338 cv
1727.25 181.013 1733.39 190.248 1733.39 202.334 cv
1733.39 998.171 li
1733.39 1010.79 1726.7 1020.29 1719.47 1017.94 cv
cp
.196078 .321569 .431373 rgb
f
1718.41 999.074 mo
1592.15 957.845 li
1591.9 957.762 1591.71 957.389 1591.71 956.954 cv
1591.71 243.558 li
1591.71 243.123 1591.9 242.729 1592.15 242.646 cv
1718.41 201.439 li
1718.5 201.418 1718.65 201.356 1718.85 201.625 cv
1719.03 201.915 1719.03 202.184 1719.03 202.329 cv
1719.03 998.162 li
1719.03 998.328 1719.03 998.597 1718.85 998.887 cv
1718.65 999.156 1718.5 999.094 1718.41 999.074 cv
cp
.737255 .894118 .890196 rgb
f
1719.47 1017.95 mo
1719.24 1017.88 1719.01 1017.8 1718.8 1017.73 cv
1719.47 1017.94 li
1726.7 1020.29 1733.39 1010.79 1733.39 998.171 cv
1733.39 202.334 li
1733.39 190.248 1727.25 181.013 1720.37 182.338 cv
1722.87 181.525 li
1730.74 178.955 1739.27 183.251 1742.43 191.794 cv
1744.44 197.224 1744.73 202.334 1744.73 202.334 cv
1744.73 995.862 li
1744.73 995.862 1743.06 1025.64 1719.47 1017.95 cv
cp
.27451 .376471 .443137 rgb
f
965.867 311.062 mo
977.124 311.062 li
986.155 357.79 li
987.727 367.083 989.559 376.245 991.13 385.539 cv
991.653 385.539 li
993.616 376.245 995.711 366.952 997.674 357.79 cv
1009.58 311.062 li
1019.53 311.062 li
1031.44 357.79 li
1033.54 366.821 1035.63 376.245 1037.73 385.539 cv
1038.25 385.539 li
1039.82 376.245 1041.39 366.952 1043.09 357.79 cv
1052.12 311.062 li
1062.6 311.062 li
1044.79 396.926 li
1031.71 396.926 li
1018.75 345.224 li
1017.18 338.549 1015.87 332.397 1014.56 325.722 cv
1014.04 325.722 li
1012.73 332.397 1011.16 338.549 1009.72 345.224 cv
997.02 396.926 li
984.062 396.926 li
965.867 311.062 li
cp
.196078 .321569 .431373 rgb
f
1109.45 381.35 mo
1109.45 363.68 li
1088.25 366.297 1080.92 371.533 1080.92 379.649 cv
1080.92 386.847 1085.89 389.858 1092.17 389.858 cv
1098.33 389.858 1103.3 386.847 1109.45 381.35 cv
cp
1070.45 380.434 mo
1070.45 366.56 1082.36 359.622 1109.45 356.612 cv
1109.45 348.497 1106.83 340.643 1096.36 340.643 cv
1089.03 340.643 1082.36 344.047 1077.38 347.449 cv
1073.19 339.989 li
1079.08 336.193 1087.99 331.743 1098.19 331.743 cv
1113.77 331.743 1120.32 342.083 1120.32 357.921 cv
1120.32 396.926 li
1111.41 396.926 li
1110.5 389.334 li
1110.11 389.334 li
1104.08 394.308 1097.02 398.497 1089.03 398.497 cv
1078.43 398.497 1070.45 391.821 1070.45 380.434 cv
cp
f
1140.34 377.293 mo
1140.34 342.083 li
1130.92 342.083 li
1130.92 333.968 li
1140.86 333.314 li
1142.17 315.512 li
1151.2 315.512 li
1151.2 333.314 li
1168.35 333.314 li
1168.35 342.083 li
1151.2 342.083 li
1151.2 377.423 li
1151.2 385.276 1153.69 389.727 1161.02 389.727 cv
1163.24 389.727 1166.12 388.811 1168.22 388.026 cv
1170.31 396.141 li
1166.78 397.318 1162.46 398.497 1158.53 398.497 cv
1144.92 398.497 1140.34 389.858 1140.34 377.293 cv
cp
f
1176.2 365.251 mo
1176.2 343.916 1190.47 331.743 1206.83 331.743 cv
1215.21 331.743 1220.97 335.146 1225.42 339.203 cv
1219.92 346.272 li
1216.25 342.999 1212.33 340.643 1207.22 340.643 cv
1195.7 340.643 1187.33 350.591 1187.33 365.251 cv
1187.33 379.779 1195.31 389.596 1206.96 389.596 cv
1212.85 389.596 1217.96 386.716 1221.88 383.182 cv
1226.59 390.381 li
1220.83 395.486 1213.64 398.497 1206.04 398.497 cv
1189.16 398.497 1176.2 386.324 1176.2 365.251 cv
cp
f
1240.6 303.733 mo
1251.33 303.733 li
1251.33 329.125 li
1250.94 342.214 li
1256.96 336.455 1263.37 331.743 1272.14 331.743 cv
1285.49 331.743 1291.51 340.381 1291.51 356.612 cv
1291.51 396.926 li
1280.78 396.926 li
1280.78 358.051 li
1280.78 346.141 1277.11 341.036 1268.74 341.036 cv
1262.19 341.036 1257.74 344.439 1251.33 350.853 cv
1251.33 396.926 li
1240.6 396.926 li
1240.6 303.733 li
cp
f
1057.12 441.992 mo
1022.46 441.992 li
1022.46 429.739 li
1106.49 429.739 li
1106.49 441.992 li
1071.83 441.992 li
1071.83 544.573 li
1057.12 544.573 li
1057.12 441.992 li
cp
f
1111.39 429.739 mo
1126.97 429.739 li
1145.35 491.707 li
1149.55 505.362 1152.17 516.215 1156.55 529.693 cv
1157.25 529.693 li
1161.45 516.215 1164.25 505.362 1168.28 491.707 cv
1186.66 429.739 li
1201.54 429.739 li
1165.13 544.573 li
1148.15 544.573 li
1111.39 429.739 li
cp
f
857.949 583.874 mo
862.514 583.874 li
862.514 616.045 li
878.297 616.045 li
878.297 619.949 li
857.949 619.949 li
857.949 583.874 li
cp
f
901.672 606.641 mo
901.672 600.481 898.593 596.303 893.974 596.303 cv
889.409 596.303 886.274 600.481 886.274 606.641 cv
886.274 612.745 889.409 616.869 893.974 616.869 cv
898.593 616.869 901.672 612.745 901.672 606.641 cv
cp
881.6 606.641 mo
881.6 597.677 887.43 592.562 893.974 592.562 cv
900.518 592.562 906.347 597.677 906.347 606.641 cv
906.347 615.495 900.518 620.609 893.974 620.609 cv
887.43 620.609 881.6 615.495 881.6 606.641 cv
cp
f
913.39 593.223 mo
917.129 593.223 li
917.514 598.062 li
917.679 598.062 li
919.493 594.708 922.243 592.562 925.268 592.562 cv
926.423 592.562 927.247 592.727 928.127 593.113 cv
927.247 597.072 li
926.367 596.797 925.763 596.633 924.663 596.633 cv
922.408 596.633 919.714 598.282 917.898 602.791 cv
917.898 619.949 li
913.39 619.949 li
913.39 593.223 li
cp
f
948.642 604.441 mo
948.642 599.052 946.222 596.138 942.042 596.138 cv
938.303 596.138 934.893 599.162 934.343 604.441 cv
948.642 604.441 li
cp
929.943 606.641 mo
929.943 597.897 935.828 592.562 941.932 592.562 cv
948.751 592.562 952.601 597.457 952.601 605.101 cv
952.601 606.036 952.546 607.026 952.436 607.685 cv
934.398 607.685 li
934.729 613.349 938.192 616.979 943.307 616.979 cv
945.837 616.979 947.981 616.154 949.961 614.89 cv
951.556 617.859 li
949.246 619.345 946.387 620.609 942.757 620.609 cv
935.608 620.609 929.943 615.385 929.943 606.641 cv
cp
f
959.203 593.223 mo
962.942 593.223 li
963.327 597.072 li
963.492 597.072 li
965.802 594.543 968.606 592.562 971.796 592.562 cv
975.865 592.562 978.065 594.487 979.165 597.677 cv
981.97 594.652 984.72 592.562 987.964 592.562 cv
993.463 592.562 996.103 596.192 996.103 603.012 cv
996.103 619.949 li
991.594 619.949 li
991.594 603.616 li
991.594 598.612 989.999 596.468 986.645 596.468 cv
984.555 596.468 982.41 597.842 979.935 600.592 cv
979.935 619.949 li
975.426 619.949 li
975.426 603.616 li
975.426 598.612 973.831 596.468 970.421 596.468 cv
968.441 596.468 966.187 597.842 963.712 600.592 cv
963.712 619.949 li
959.203 619.949 li
959.203 593.223 li
cp
f
1015.8 593.223 mo
1020.31 593.223 li
1020.31 619.949 li
1015.8 619.949 li
1015.8 593.223 li
cp
1014.97 584.808 mo
1014.97 583.049 1016.35 581.894 1018.11 581.894 cv
1019.87 581.894 1021.24 583.049 1021.24 584.808 cv
1021.24 586.514 1019.87 587.724 1018.11 587.724 cv
1016.35 587.724 1014.97 586.514 1014.97 584.808 cv
cp
f
1048.02 606.201 mo
1048.02 600.316 1046.04 596.357 1040.99 596.357 cv
1038.73 596.357 1036.48 597.622 1033.84 599.987 cv
1033.84 614.01 li
1036.26 616.045 1038.62 616.814 1040.38 616.814 cv
1044.78 616.814 1048.02 612.8 1048.02 606.201 cv
cp
1029.33 593.223 mo
1033.07 593.223 li
1033.45 596.303 li
1033.62 596.303 li
1036.04 594.267 1039.01 592.562 1042.14 592.562 cv
1049.01 592.562 1052.7 597.897 1052.7 606.201 cv
1052.7 615.274 1047.25 620.609 1041.15 620.609 cv
1038.68 620.609 1036.2 619.454 1033.73 617.529 cv
1033.84 622.204 li
1033.84 631.223 li
1029.33 631.223 li
1029.33 593.223 li
cp
f
1056.88 616.925 mo
1059.14 613.9 li
1061.45 615.769 1063.81 617.09 1067 617.09 cv
1070.52 617.09 1072.28 615.22 1072.28 612.91 cv
1072.28 610.16 1069.09 608.951 1066.18 607.85 cv
1062.38 606.475 1058.2 604.661 1058.2 600.152 cv
1058.2 595.862 1061.61 592.562 1067.38 592.562 cv
1070.74 592.562 1073.65 593.937 1075.69 595.588 cv
1073.54 598.447 li
1071.73 597.072 1069.8 596.082 1067.44 596.082 cv
1064.09 596.082 1062.55 597.897 1062.55 599.932 cv
1062.55 602.462 1065.46 603.396 1068.49 604.551 cv
1072.33 605.981 1076.62 607.576 1076.62 612.635 cv
1076.62 616.979 1073.16 620.609 1066.83 620.609 cv
1063.04 620.609 1059.41 619.015 1056.88 616.925 cv
cp
f
1082.51 610.16 mo
1082.51 593.223 li
1087.07 593.223 li
1087.07 609.556 li
1087.07 614.559 1088.56 616.705 1092.08 616.705 cv
1094.83 616.705 1096.75 615.33 1099.28 612.195 cv
1099.28 593.223 li
1103.79 593.223 li
1103.79 619.949 li
1100.05 619.949 li
1099.67 615.769 li
1099.5 615.769 li
1097.03 618.684 1094.39 620.609 1090.7 620.609 cv
1085.04 620.609 1082.51 616.979 1082.51 610.16 cv
cp
f
1112.82 593.223 mo
1116.55 593.223 li
1116.94 597.072 li
1117.1 597.072 li
1119.41 594.543 1122.22 592.562 1125.41 592.562 cv
1129.48 592.562 1131.68 594.487 1132.78 597.677 cv
1135.58 594.652 1138.33 592.562 1141.58 592.562 cv
1147.08 592.562 1149.71 596.192 1149.71 603.012 cv
1149.71 619.949 li
1145.21 619.949 li
1145.21 603.616 li
1145.21 598.612 1143.61 596.468 1140.26 596.468 cv
1138.17 596.468 1136.02 597.842 1133.55 600.592 cv
1133.55 619.949 li
1129.04 619.949 li
1129.04 603.616 li
1129.04 598.612 1127.44 596.468 1124.03 596.468 cv
1122.05 596.468 1119.8 597.842 1117.32 600.592 cv
1117.32 619.949 li
1112.82 619.949 li
1112.82 593.223 li
cp
f
1186.35 613.13 mo
1186.35 599.162 li
1184.09 597.127 1182.06 596.357 1179.86 596.357 cv
1175.57 596.357 1172.16 600.481 1172.16 606.586 cv
1172.16 612.965 1174.85 616.814 1179.53 616.814 cv
1182 616.814 1184.15 615.604 1186.35 613.13 cv
cp
1167.49 606.641 mo
1167.49 597.952 1172.98 592.562 1179.09 592.562 cv
1182.17 592.562 1184.2 593.718 1186.57 595.642 cv
1186.35 591.078 li
1186.35 580.795 li
1190.91 580.795 li
1190.91 619.949 li
1187.17 619.949 li
1186.79 616.814 li
1186.62 616.814 li
1184.53 618.849 1181.67 620.609 1178.54 620.609 cv
1171.83 620.609 1167.49 615.55 1167.49 606.641 cv
cp
f
1218.03 606.641 mo
1218.03 600.481 1214.95 596.303 1210.33 596.303 cv
1205.76 596.303 1202.63 600.481 1202.63 606.641 cv
1202.63 612.745 1205.76 616.869 1210.33 616.869 cv
1214.95 616.869 1218.03 612.745 1218.03 606.641 cv
cp
1197.95 606.641 mo
1197.95 597.677 1203.78 592.562 1210.33 592.562 cv
1216.87 592.562 1222.7 597.677 1222.7 606.641 cv
1222.7 615.495 1216.87 620.609 1210.33 620.609 cv
1203.78 620.609 1197.95 615.495 1197.95 606.641 cv
cp
f
1229.74 614.559 mo
1229.74 580.795 li
1234.25 580.795 li
1234.25 614.89 li
1234.25 616.319 1234.86 616.869 1235.52 616.869 cv
1235.79 616.869 1236.01 616.869 1236.51 616.76 cv
1237.11 620.169 li
1236.51 620.444 1235.74 620.609 1234.53 620.609 cv
1231.12 620.609 1229.74 618.465 1229.74 614.559 cv
cp
f
1261.86 606.641 mo
1261.86 600.481 1258.78 596.303 1254.16 596.303 cv
1249.6 596.303 1246.46 600.481 1246.46 606.641 cv
1246.46 612.745 1249.6 616.869 1254.16 616.869 cv
1258.78 616.869 1261.86 612.745 1261.86 606.641 cv
cp
1241.79 606.641 mo
1241.79 597.677 1247.62 592.562 1254.16 592.562 cv
1260.71 592.562 1266.54 597.677 1266.54 606.641 cv
1266.54 615.495 1260.71 620.609 1254.16 620.609 cv
1247.62 620.609 1241.79 615.495 1241.79 606.641 cv
cp
f
1273.58 593.223 mo
1277.32 593.223 li
1277.7 598.062 li
1277.87 598.062 li
1279.68 594.708 1282.43 592.562 1285.46 592.562 cv
1286.61 592.562 1287.44 592.727 1288.32 593.113 cv
1287.44 597.072 li
1286.56 596.797 1285.95 596.633 1284.85 596.633 cv
1282.6 596.633 1279.9 598.282 1278.09 602.791 cv
1278.09 619.949 li
1273.58 619.949 li
1273.58 593.223 li
cp
f
1300.69 616.925 mo
1302.95 613.9 li
1305.26 615.769 1307.62 617.09 1310.81 617.09 cv
1314.33 617.09 1316.09 615.22 1316.09 612.91 cv
1316.09 610.16 1312.9 608.951 1309.99 607.85 cv
1306.19 606.475 1302.01 604.661 1302.01 600.152 cv
1302.01 595.862 1305.42 592.562 1311.2 592.562 cv
1314.55 592.562 1317.46 593.937 1319.5 595.588 cv
1317.35 598.447 li
1315.54 597.072 1313.62 596.082 1311.25 596.082 cv
1307.9 596.082 1306.36 597.897 1306.36 599.932 cv
1306.36 602.462 1309.27 603.396 1312.3 604.551 cv
1316.15 605.981 1320.43 607.576 1320.43 612.635 cv
1320.43 616.979 1316.97 620.609 1310.65 620.609 cv
1306.85 620.609 1303.22 619.015 1300.69 616.925 cv
cp
f
1326.71 593.223 mo
1331.22 593.223 li
1331.22 619.949 li
1326.71 619.949 li
1326.71 593.223 li
cp
1325.88 584.808 mo
1325.88 583.049 1327.26 581.894 1329.02 581.894 cv
1330.78 581.894 1332.15 583.049 1332.15 584.808 cv
1332.15 586.514 1330.78 587.724 1329.02 587.724 cv
1327.26 587.724 1325.88 586.514 1325.88 584.808 cv
cp
f
1341.01 611.7 mo
1341.01 596.907 li
1337.05 596.907 li
1337.05 593.498 li
1341.23 593.223 li
1341.78 585.744 li
1345.57 585.744 li
1345.57 593.223 li
1352.77 593.223 li
1352.77 596.907 li
1345.57 596.907 li
1345.57 611.755 li
1345.57 615.055 1346.62 616.925 1349.69 616.925 cv
1350.63 616.925 1351.84 616.54 1352.72 616.21 cv
1353.6 619.619 li
1352.11 620.114 1350.3 620.609 1348.65 620.609 cv
1342.93 620.609 1341.01 616.979 1341.01 611.7 cv
cp
f
1384.56 613.405 mo
1384.56 605.981 li
1375.65 607.081 1372.57 609.28 1372.57 612.69 cv
1372.57 615.715 1374.66 616.979 1377.3 616.979 cv
1379.89 616.979 1381.98 615.715 1384.56 613.405 cv
cp
1368.17 613.02 mo
1368.17 607.191 1373.18 604.276 1384.56 603.012 cv
1384.56 599.601 1383.46 596.303 1379.06 596.303 cv
1375.98 596.303 1373.18 597.732 1371.09 599.162 cv
1369.33 596.027 li
1371.8 594.432 1375.54 592.562 1379.83 592.562 cv
1386.38 592.562 1389.13 596.907 1389.13 603.561 cv
1389.13 619.949 li
1385.39 619.949 li
1385 616.76 li
1384.84 616.76 li
1382.31 618.849 1379.34 620.609 1375.98 620.609 cv
1371.53 620.609 1368.17 617.805 1368.17 613.02 cv
cp
f
1397.54 593.223 mo
1401.28 593.223 li
1401.67 597.072 li
1401.83 597.072 li
1404.14 594.543 1406.95 592.562 1410.14 592.562 cv
1414.21 592.562 1416.41 594.487 1417.51 597.677 cv
1420.31 594.652 1423.06 592.562 1426.31 592.562 cv
1431.8 592.562 1434.44 596.192 1434.44 603.012 cv
1434.44 619.949 li
1429.94 619.949 li
1429.94 603.616 li
1429.94 598.612 1428.34 596.468 1424.99 596.468 cv
1422.9 596.468 1420.75 597.842 1418.28 600.592 cv
1418.28 619.949 li
1413.77 619.949 li
1413.77 603.616 li
1413.77 598.612 1412.17 596.468 1408.76 596.468 cv
1406.78 596.468 1404.53 597.842 1402.05 600.592 cv
1402.05 619.949 li
1397.54 619.949 li
1397.54 593.223 li
cp
f
1459.86 604.441 mo
1459.86 599.052 1457.44 596.138 1453.26 596.138 cv
1449.52 596.138 1446.11 599.162 1445.56 604.441 cv
1459.86 604.441 li
cp
1441.16 606.641 mo
1441.16 597.897 1447.04 592.562 1453.15 592.562 cv
1459.97 592.562 1463.82 597.457 1463.82 605.101 cv
1463.82 606.036 1463.76 607.026 1463.65 607.685 cv
1445.62 607.685 li
1445.95 613.349 1449.41 616.979 1454.52 616.979 cv
1457.05 616.979 1459.2 616.154 1461.18 614.89 cv
1462.77 617.859 li
1460.46 619.345 1457.6 620.609 1453.97 620.609 cv
1446.83 620.609 1441.16 615.385 1441.16 606.641 cv
cp
f
1470.64 611.7 mo
1470.64 596.907 li
1466.68 596.907 li
1466.68 593.498 li
1470.86 593.223 li
1471.41 585.744 li
1475.2 585.744 li
1475.2 593.223 li
1482.41 593.223 li
1482.41 596.907 li
1475.2 596.907 li
1475.2 611.755 li
1475.2 615.055 1476.25 616.925 1479.33 616.925 cv
1480.26 616.925 1481.47 616.54 1482.35 616.21 cv
1483.23 619.619 li
1481.75 620.114 1479.93 620.609 1478.28 620.609 cv
1472.56 620.609 1470.64 616.979 1470.64 611.7 cv
cp
f
1486.92 626.658 mo
1490.05 625.283 1491.92 622.864 1491.87 619.949 cv
1491.7 620.004 1491.48 620.004 1491.32 620.004 cv
1489.56 620.004 1488.07 618.904 1488.07 616.869 cv
1488.07 614.89 1489.61 613.68 1491.43 613.68 cv
1493.79 613.68 1495.22 615.715 1495.22 619.015 cv
1495.22 623.744 1492.47 627.428 1488.02 629.298 cv
1486.92 626.658 li
cp
f
855.529 672.641 mo
855.529 663.677 861.523 658.562 868.398 658.562 cv
871.918 658.562 874.337 659.992 876.207 661.697 cv
873.897 664.667 li
872.357 663.292 870.708 662.303 868.563 662.303 cv
863.724 662.303 860.204 666.481 860.204 672.641 cv
860.204 678.745 863.559 682.869 868.453 682.869 cv
870.928 682.869 873.072 681.66 874.722 680.175 cv
876.702 683.199 li
874.282 685.345 871.258 686.609 868.068 686.609 cv
860.974 686.609 855.529 681.495 855.529 672.641 cv
cp
f
899.526 672.641 mo
899.526 666.481 896.447 662.303 891.828 662.303 cv
887.264 662.303 884.129 666.481 884.129 672.641 cv
884.129 678.745 887.264 682.869 891.828 682.869 cv
896.447 682.869 899.526 678.745 899.526 672.641 cv
cp
879.454 672.641 mo
879.454 663.677 885.283 658.562 891.828 658.562 cv
898.372 658.562 904.201 663.677 904.201 672.641 cv
904.201 681.495 898.372 686.609 891.828 686.609 cv
885.283 686.609 879.454 681.495 879.454 672.641 cv
cp
f
911.244 659.223 mo
914.983 659.223 li
915.368 663.072 li
915.533 663.072 li
918.063 660.543 920.813 658.562 924.497 658.562 cv
930.106 658.562 932.636 662.192 932.636 669.012 cv
932.636 685.949 li
928.127 685.949 li
928.127 669.616 li
928.127 664.612 926.587 662.468 923.067 662.468 cv
920.317 662.468 918.448 663.897 915.753 666.592 cv
915.753 685.949 li
911.244 685.949 li
911.244 659.223 li
cp
f
938.359 682.925 mo
940.614 679.9 li
942.924 681.769 945.288 683.09 948.478 683.09 cv
951.997 683.09 953.757 681.22 953.757 678.91 cv
953.757 676.16 950.567 674.951 947.653 673.85 cv
943.858 672.475 939.679 670.661 939.679 666.152 cv
939.679 661.862 943.089 658.562 948.862 658.562 cv
952.217 658.562 955.132 659.937 957.167 661.588 cv
955.021 664.447 li
953.207 663.072 951.282 662.082 948.918 662.082 cv
945.563 662.082 944.023 663.897 944.023 665.932 cv
944.023 668.462 946.938 669.396 949.963 670.551 cv
953.813 671.981 958.102 673.576 958.102 678.635 cv
958.102 682.979 954.637 686.609 948.313 686.609 cv
944.519 686.609 940.889 685.015 938.359 682.925 cv
cp
f
981.092 670.441 mo
981.092 665.052 978.672 662.138 974.492 662.138 cv
970.753 662.138 967.344 665.162 966.793 670.441 cv
981.092 670.441 li
cp
962.394 672.641 mo
962.394 663.897 968.278 658.562 974.383 658.562 cv
981.201 658.562 985.051 663.457 985.051 671.101 cv
985.051 672.036 984.996 673.026 984.886 673.685 cv
966.849 673.685 li
967.179 679.349 970.643 682.979 975.757 682.979 cv
978.287 682.979 980.432 682.154 982.411 680.89 cv
984.006 683.859 li
981.696 685.345 978.837 686.609 975.207 686.609 cv
968.059 686.609 962.394 681.385 962.394 672.641 cv
cp
f
989.672 672.641 mo
989.672 663.677 995.666 658.562 1002.54 658.562 cv
1006.06 658.562 1008.48 659.992 1010.35 661.697 cv
1008.04 664.667 li
1006.5 663.292 1004.85 662.303 1002.71 662.303 cv
997.866 662.303 994.347 666.481 994.347 672.641 cv
994.347 678.745 997.701 682.869 1002.6 682.869 cv
1005.07 682.869 1007.21 681.66 1008.86 680.175 cv
1010.84 683.199 li
1008.42 685.345 1005.4 686.609 1002.21 686.609 cv
995.116 686.609 989.672 681.495 989.672 672.641 cv
cp
f
1016.95 677.7 mo
1016.95 662.907 li
1012.99 662.907 li
1012.99 659.498 li
1017.17 659.223 li
1017.72 651.744 li
1021.52 651.744 li
1021.52 659.223 li
1028.72 659.223 li
1028.72 662.907 li
1021.52 662.907 li
1021.52 677.755 li
1021.52 681.055 1022.56 682.925 1025.64 682.925 cv
1026.58 682.925 1027.79 682.54 1028.67 682.21 cv
1029.55 685.619 li
1028.06 686.114 1026.25 686.609 1024.6 686.609 cv
1018.88 686.609 1016.95 682.979 1016.95 677.7 cv
cp
f
1050.72 670.441 mo
1050.72 665.052 1048.3 662.138 1044.12 662.138 cv
1040.38 662.138 1036.97 665.162 1036.42 670.441 cv
1050.72 670.441 li
cp
1032.02 672.641 mo
1032.02 663.897 1037.91 658.562 1044.01 658.562 cv
1050.83 658.562 1054.68 663.457 1054.68 671.101 cv
1054.68 672.036 1054.63 673.026 1054.51 673.685 cv
1036.48 673.685 li
1036.81 679.349 1040.27 682.979 1045.39 682.979 cv
1047.92 682.979 1050.06 682.154 1052.04 680.89 cv
1053.63 683.859 li
1051.33 685.345 1048.47 686.609 1044.84 686.609 cv
1037.69 686.609 1032.02 681.385 1032.02 672.641 cv
cp
f
1061.5 677.7 mo
1061.5 662.907 li
1057.54 662.907 li
1057.54 659.498 li
1061.72 659.223 li
1062.27 651.744 li
1066.07 651.744 li
1066.07 659.223 li
1073.27 659.223 li
1073.27 662.907 li
1066.07 662.907 li
1066.07 677.755 li
1066.07 681.055 1067.11 682.925 1070.19 682.925 cv
1071.13 682.925 1072.34 682.54 1073.22 682.21 cv
1074.1 685.619 li
1072.61 686.114 1070.8 686.609 1069.15 686.609 cv
1063.43 686.609 1061.5 682.979 1061.5 677.7 cv
cp
f
1078.94 676.16 mo
1078.94 659.223 li
1083.5 659.223 li
1083.5 675.556 li
1083.5 680.559 1084.99 682.705 1088.51 682.705 cv
1091.25 682.705 1093.18 681.33 1095.71 678.195 cv
1095.71 659.223 li
1100.22 659.223 li
1100.22 685.949 li
1096.48 685.949 li
1096.09 681.769 li
1095.93 681.769 li
1093.46 684.684 1090.82 686.609 1087.13 686.609 cv
1081.47 686.609 1078.94 682.979 1078.94 676.16 cv
cp
f
1109.24 659.223 mo
1112.98 659.223 li
1113.37 664.062 li
1113.53 664.062 li
1115.35 660.708 1118.1 658.562 1121.12 658.562 cv
1122.28 658.562 1123.1 658.727 1123.98 659.113 cv
1123.1 663.072 li
1122.22 662.797 1121.62 662.633 1120.52 662.633 cv
1118.26 662.633 1115.57 664.282 1113.75 668.791 cv
1113.75 685.949 li
1109.24 685.949 li
1109.24 659.223 li
cp
f
1154.06 679.405 mo
1154.06 671.981 li
1145.16 673.081 1142.08 675.28 1142.08 678.69 cv
1142.08 681.715 1144.17 682.979 1146.8 682.979 cv
1149.39 682.979 1151.48 681.715 1154.06 679.405 cv
cp
1137.68 679.02 mo
1137.68 673.191 1142.68 670.276 1154.06 669.012 cv
1154.06 665.601 1152.96 662.303 1148.56 662.303 cv
1145.49 662.303 1142.68 663.732 1140.59 665.162 cv
1138.83 662.027 li
1141.31 660.432 1145.04 658.562 1149.33 658.562 cv
1155.88 658.562 1158.63 662.907 1158.63 669.561 cv
1158.63 685.949 li
1154.89 685.949 li
1154.5 682.76 li
1154.34 682.76 li
1151.81 684.849 1148.84 686.609 1145.49 686.609 cv
1141.03 686.609 1137.68 683.805 1137.68 679.02 cv
cp
f
1183.98 679.13 mo
1183.98 665.162 li
1181.73 663.127 1179.69 662.357 1177.49 662.357 cv
1173.21 662.357 1169.79 666.481 1169.79 672.586 cv
1169.79 678.965 1172.49 682.814 1177.16 682.814 cv
1179.64 682.814 1181.78 681.604 1183.98 679.13 cv
cp
1165.12 672.641 mo
1165.12 663.952 1170.62 658.562 1176.72 658.562 cv
1179.8 658.562 1181.84 659.718 1184.2 661.642 cv
1183.98 657.078 li
1183.98 646.795 li
1188.55 646.795 li
1188.55 685.949 li
1184.81 685.949 li
1184.42 682.814 li
1184.26 682.814 li
1182.17 684.849 1179.31 686.609 1176.17 686.609 cv
1169.46 686.609 1165.12 681.55 1165.12 672.641 cv
cp
f
1197.57 659.223 mo
1202.08 659.223 li
1202.08 685.949 li
1197.57 685.949 li
1197.57 659.223 li
cp
1196.75 650.808 mo
1196.75 649.049 1198.12 647.894 1199.88 647.894 cv
1201.64 647.894 1203.01 649.049 1203.01 650.808 cv
1203.01 652.514 1201.64 653.724 1199.88 653.724 cv
1198.12 653.724 1196.75 652.514 1196.75 650.808 cv
cp
f
1229.8 672.201 mo
1229.8 666.316 1227.82 662.357 1222.76 662.357 cv
1220.5 662.357 1218.25 663.622 1215.61 665.987 cv
1215.61 680.01 li
1218.03 682.045 1220.39 682.814 1222.15 682.814 cv
1226.55 682.814 1229.8 678.8 1229.8 672.201 cv
cp
1211.1 659.223 mo
1214.84 659.223 li
1215.22 662.303 li
1215.39 662.303 li
1217.81 660.267 1220.78 658.562 1223.91 658.562 cv
1230.79 658.562 1234.47 663.897 1234.47 672.201 cv
1234.47 681.274 1229.03 686.609 1222.92 686.609 cv
1220.45 686.609 1217.97 685.454 1215.5 683.529 cv
1215.61 688.204 li
1215.61 697.223 li
1211.1 697.223 li
1211.1 659.223 li
cp
f
1241.62 659.223 mo
1246.13 659.223 li
1246.13 685.949 li
1241.62 685.949 li
1241.62 659.223 li
cp
1240.8 650.808 mo
1240.8 649.049 1242.17 647.894 1243.93 647.894 cv
1245.69 647.894 1247.07 649.049 1247.07 650.808 cv
1247.07 652.514 1245.69 653.724 1243.93 653.724 cv
1242.17 653.724 1240.8 652.514 1240.8 650.808 cv
cp
f
1252.18 682.925 mo
1254.44 679.9 li
1256.75 681.769 1259.11 683.09 1262.3 683.09 cv
1265.82 683.09 1267.58 681.22 1267.58 678.91 cv
1267.58 676.16 1264.39 674.951 1261.48 673.85 cv
1257.68 672.475 1253.5 670.661 1253.5 666.152 cv
1253.5 661.862 1256.91 658.562 1262.69 658.562 cv
1266.04 658.562 1268.96 659.937 1270.99 661.588 cv
1268.85 664.447 li
1267.03 663.072 1265.11 662.082 1262.74 662.082 cv
1259.39 662.082 1257.85 663.897 1257.85 665.932 cv
1257.85 668.462 1260.76 669.396 1263.79 670.551 cv
1267.64 671.981 1271.93 673.576 1271.93 678.635 cv
1271.93 682.979 1268.46 686.609 1262.14 686.609 cv
1258.34 686.609 1254.71 685.015 1252.18 682.925 cv
cp
f
1276.22 672.641 mo
1276.22 663.677 1282.21 658.562 1289.09 658.562 cv
1292.61 658.562 1295.03 659.992 1296.9 661.697 cv
1294.59 664.667 li
1293.05 663.292 1291.4 662.303 1289.25 662.303 cv
1284.41 662.303 1280.89 666.481 1280.89 672.641 cv
1280.89 678.745 1284.25 682.869 1289.14 682.869 cv
1291.62 682.869 1293.76 681.66 1295.41 680.175 cv
1297.39 683.199 li
1294.97 685.345 1291.95 686.609 1288.76 686.609 cv
1281.66 686.609 1276.22 681.495 1276.22 672.641 cv
cp
f
1303.28 659.223 mo
1307.79 659.223 li
1307.79 685.949 li
1303.28 685.949 li
1303.28 659.223 li
cp
1302.45 650.808 mo
1302.45 649.049 1303.83 647.894 1305.59 647.894 cv
1307.35 647.894 1308.72 649.049 1308.72 650.808 cv
1308.72 652.514 1307.35 653.724 1305.59 653.724 cv
1303.83 653.724 1302.45 652.514 1302.45 650.808 cv
cp
f
1316.81 659.223 mo
1320.55 659.223 li
1320.93 663.072 li
1321.1 663.072 li
1323.63 660.543 1326.38 658.562 1330.06 658.562 cv
1335.67 658.562 1338.2 662.192 1338.2 669.012 cv
1338.2 685.949 li
1333.69 685.949 li
1333.69 669.616 li
1333.69 664.612 1332.15 662.468 1328.63 662.468 cv
1325.88 662.468 1324.01 663.897 1321.32 666.592 cv
1321.32 685.949 li
1316.81 685.949 li
1316.81 659.223 li
cp
f
1361.57 668.076 mo
1361.57 664.172 1359.04 661.862 1355.91 661.862 cv
1352.78 661.862 1350.25 664.172 1350.25 668.076 cv
1350.25 671.981 1352.83 674.456 1355.91 674.456 cv
1358.99 674.456 1361.57 671.981 1361.57 668.076 cv
cp
1365.04 689.688 mo
1365.04 687.214 1363.11 686.389 1359.65 686.389 cv
1355.03 686.389 li
1353.99 686.389 1352.72 686.279 1351.57 685.949 cv
1349.64 687.324 1348.82 688.919 1348.82 690.459 cv
1348.82 693.318 1351.73 695.133 1356.57 695.133 cv
1361.68 695.133 1365.04 692.493 1365.04 689.688 cv
cp
1344.86 691.063 mo
1344.86 688.808 1346.34 686.664 1348.76 685.015 cv
1348.76 684.794 li
1347.44 683.97 1346.4 682.54 1346.4 680.45 cv
1346.4 678.195 1347.94 676.435 1349.31 675.501 cv
1349.31 675.28 li
1347.55 673.85 1345.85 671.266 1345.85 668.076 cv
1345.85 662.247 1350.47 658.562 1355.91 658.562 cv
1357.39 658.562 1358.71 658.838 1359.7 659.223 cv
1369 659.223 li
1369 662.687 li
1363.5 662.687 li
1364.76 663.897 1365.7 665.932 1365.7 668.186 cv
1365.7 673.906 1361.35 677.48 1355.91 677.48 cv
1354.59 677.48 1353.11 677.15 1351.9 676.546 cv
1350.96 677.37 1350.19 678.25 1350.19 679.735 cv
1350.19 681.439 1351.29 682.649 1354.92 682.649 cv
1360.09 682.649 li
1366.3 682.649 1369.44 684.574 1369.44 689.029 cv
1369.44 693.978 1364.21 698.267 1355.91 698.267 cv
1349.37 698.267 1344.86 695.682 1344.86 691.063 cv
cp
f
1402.33 670.441 mo
1402.33 665.052 1399.91 662.138 1395.73 662.138 cv
1391.99 662.138 1388.58 665.162 1388.03 670.441 cv
1402.33 670.441 li
cp
1383.63 672.641 mo
1383.63 663.897 1389.52 658.562 1395.62 658.562 cv
1402.44 658.562 1406.29 663.457 1406.29 671.101 cv
1406.29 672.036 1406.23 673.026 1406.12 673.685 cv
1388.09 673.685 li
1388.42 679.349 1391.88 682.979 1396.99 682.979 cv
1399.52 682.979 1401.67 682.154 1403.65 680.89 cv
1405.24 683.859 li
1402.93 685.345 1400.07 686.609 1396.44 686.609 cv
1389.3 686.609 1383.63 681.385 1383.63 672.641 cv
cp
f
1412.89 680.559 mo
1412.89 646.795 li
1417.4 646.795 li
1417.4 680.89 li
1417.4 682.319 1418 682.869 1418.66 682.869 cv
1418.94 682.869 1419.16 682.869 1419.65 682.76 cv
1420.26 686.169 li
1419.65 686.444 1418.88 686.609 1417.67 686.609 cv
1414.26 686.609 1412.89 684.465 1412.89 680.559 cv
cp
f
1426.92 659.223 mo
1431.42 659.223 li
1431.42 685.949 li
1426.92 685.949 li
1426.92 659.223 li
cp
1426.09 650.808 mo
1426.09 649.049 1427.46 647.894 1429.22 647.894 cv
1430.98 647.894 1432.36 649.049 1432.36 650.808 cv
1432.36 652.514 1430.98 653.724 1429.22 653.724 cv
1427.46 653.724 1426.09 652.514 1426.09 650.808 cv
cp
f
1441.21 677.7 mo
1441.21 662.907 li
1437.25 662.907 li
1437.25 659.498 li
1441.43 659.223 li
1441.98 651.744 li
1445.78 651.744 li
1445.78 659.223 li
1452.98 659.223 li
1452.98 662.907 li
1445.78 662.907 li
1445.78 677.755 li
1445.78 681.055 1446.82 682.925 1449.9 682.925 cv
1450.84 682.925 1452.05 682.54 1452.93 682.21 cv
1453.81 685.619 li
1452.32 686.114 1450.51 686.609 1448.86 686.609 cv
1443.14 686.609 1441.21 682.979 1441.21 677.7 cv
cp
f
1457.49 692.658 mo
1460.63 691.283 1462.5 688.864 1462.44 685.949 cv
1462.28 686.004 1462.06 686.004 1461.89 686.004 cv
1460.13 686.004 1458.65 684.904 1458.65 682.869 cv
1458.65 680.89 1460.19 679.68 1462 679.68 cv
1464.37 679.68 1465.8 681.715 1465.8 685.015 cv
1465.8 689.744 1463.05 693.428 1458.59 695.298 cv
1457.49 692.658 li
cp
f
854.54 748.925 mo
856.795 745.9 li
859.104 747.769 861.469 749.09 864.658 749.09 cv
868.178 749.09 869.938 747.22 869.938 744.91 cv
869.938 742.16 866.748 740.951 863.834 739.85 cv
860.039 738.475 855.859 736.661 855.859 732.152 cv
855.859 727.862 859.27 724.562 865.043 724.562 cv
868.398 724.562 871.313 725.937 873.348 727.588 cv
871.202 730.447 li
869.388 729.072 867.463 728.082 865.099 728.082 cv
861.744 728.082 860.204 729.897 860.204 731.932 cv
860.204 734.462 863.119 735.396 866.144 736.551 cv
869.993 737.981 874.282 739.576 874.282 744.635 cv
874.282 748.979 870.817 752.609 864.493 752.609 cv
860.699 752.609 857.069 751.015 854.54 748.925 cv
cp
f
897.272 736.441 mo
897.272 731.052 894.853 728.138 890.673 728.138 cv
886.934 728.138 883.523 731.162 882.974 736.441 cv
897.272 736.441 li
cp
878.574 738.641 mo
878.574 729.897 884.459 724.562 890.563 724.562 cv
897.382 724.562 901.231 729.457 901.231 737.101 cv
901.231 738.036 901.177 739.026 901.066 739.685 cv
883.029 739.685 li
883.359 745.349 886.823 748.979 891.938 748.979 cv
894.468 748.979 896.612 748.154 898.592 746.89 cv
900.187 749.859 li
897.877 751.345 895.018 752.609 891.388 752.609 cv
884.239 752.609 878.574 747.385 878.574 738.641 cv
cp
f
924.771 745.13 mo
924.771 731.162 li
922.517 729.127 920.482 728.357 918.282 728.357 cv
913.993 728.357 910.583 732.481 910.583 738.586 cv
910.583 744.965 913.278 748.814 917.952 748.814 cv
920.427 748.814 922.571 747.604 924.771 745.13 cv
cp
905.909 738.641 mo
905.909 729.952 911.408 724.562 917.513 724.562 cv
920.592 724.562 922.627 725.718 924.991 727.642 cv
924.771 723.078 li
924.771 712.795 li
929.336 712.795 li
929.336 751.949 li
925.597 751.949 li
925.211 748.814 li
925.046 748.814 li
922.957 750.849 920.097 752.609 916.963 752.609 cv
910.253 752.609 905.909 747.55 905.909 738.641 cv
cp
f
966.296 745.13 mo
966.296 731.162 li
964.041 729.127 962.006 728.357 959.807 728.357 cv
955.518 728.357 952.107 732.481 952.107 738.586 cv
952.107 744.965 954.803 748.814 959.477 748.814 cv
961.951 748.814 964.096 747.604 966.296 745.13 cv
cp
947.434 738.641 mo
947.434 729.952 952.933 724.562 959.037 724.562 cv
962.116 724.562 964.151 725.718 966.516 727.642 cv
966.296 723.078 li
966.296 712.795 li
970.86 712.795 li
970.86 751.949 li
967.121 751.949 li
966.735 748.814 li
966.57 748.814 li
964.481 750.849 961.621 752.609 958.486 752.609 cv
951.777 752.609 947.434 747.55 947.434 738.641 cv
cp
f
997.975 738.641 mo
997.975 732.481 994.896 728.303 990.276 728.303 cv
985.712 728.303 982.577 732.481 982.577 738.641 cv
982.577 744.745 985.712 748.869 990.276 748.869 cv
994.896 748.869 997.975 744.745 997.975 738.641 cv
cp
977.902 738.641 mo
977.902 729.677 983.732 724.562 990.276 724.562 cv
996.82 724.562 1002.65 729.677 1002.65 738.641 cv
1002.65 747.495 996.82 752.609 990.276 752.609 cv
983.732 752.609 977.902 747.495 977.902 738.641 cv
cp
f
1037.41 736.441 mo
1037.41 731.052 1034.99 728.138 1030.81 728.138 cv
1027.07 728.138 1023.66 731.162 1023.11 736.441 cv
1037.41 736.441 li
cp
1018.71 738.641 mo
1018.71 729.897 1024.6 724.562 1030.7 724.562 cv
1037.52 724.562 1041.37 729.457 1041.37 737.101 cv
1041.37 738.036 1041.31 739.026 1041.2 739.685 cv
1023.17 739.685 li
1023.5 745.349 1026.96 748.979 1032.08 748.979 cv
1034.61 748.979 1036.75 748.154 1038.73 746.89 cv
1040.32 749.859 li
1038.01 751.345 1035.16 752.609 1031.53 752.609 cv
1024.38 752.609 1018.71 747.385 1018.71 738.641 cv
cp
f
1047.97 725.223 mo
1052.48 725.223 li
1052.48 751.949 li
1047.97 751.949 li
1047.97 725.223 li
cp
1047.15 716.808 mo
1047.15 715.049 1048.52 713.894 1050.28 713.894 cv
1052.04 713.894 1053.42 715.049 1053.42 716.808 cv
1053.42 718.514 1052.04 719.724 1050.28 719.724 cv
1048.52 719.724 1047.15 718.514 1047.15 716.808 cv
cp
f
1061.12 742.16 mo
1061.12 725.223 li
1065.68 725.223 li
1065.68 741.556 li
1065.68 746.559 1067.17 748.705 1070.68 748.705 cv
1073.43 748.705 1075.36 747.33 1077.89 744.195 cv
1077.89 725.223 li
1082.4 725.223 li
1082.4 751.949 li
1078.66 751.949 li
1078.27 747.769 li
1078.11 747.769 li
1075.63 750.684 1072.99 752.609 1069.31 752.609 cv
1063.65 752.609 1061.12 748.979 1061.12 742.16 cv
cp
f
1088.45 748.925 mo
1090.71 745.9 li
1093.01 747.769 1095.38 749.09 1098.57 749.09 cv
1102.09 749.09 1103.85 747.22 1103.85 744.91 cv
1103.85 742.16 1100.66 740.951 1097.74 739.85 cv
1093.95 738.475 1089.77 736.661 1089.77 732.152 cv
1089.77 727.862 1093.18 724.562 1098.95 724.562 cv
1102.31 724.562 1105.22 725.937 1107.26 727.588 cv
1105.11 730.447 li
1103.3 729.072 1101.37 728.082 1099.01 728.082 cv
1095.65 728.082 1094.11 729.897 1094.11 731.932 cv
1094.11 734.462 1097.03 735.396 1100.05 736.551 cv
1103.9 737.981 1108.19 739.576 1108.19 744.635 cv
1108.19 748.979 1104.73 752.609 1098.4 752.609 cv
1094.61 752.609 1090.98 751.015 1088.45 748.925 cv
cp
f
1114.46 725.223 mo
1118.2 725.223 li
1118.59 729.072 li
1118.75 729.072 li
1121.06 726.543 1123.87 724.562 1127.06 724.562 cv
1131.13 724.562 1133.33 726.487 1134.43 729.677 cv
1137.23 726.652 1139.98 724.562 1143.23 724.562 cv
1148.72 724.562 1151.36 728.192 1151.36 735.012 cv
1151.36 751.949 li
1146.86 751.949 li
1146.86 735.616 li
1146.86 730.612 1145.26 728.468 1141.91 728.468 cv
1139.82 728.468 1137.67 729.842 1135.2 732.592 cv
1135.2 751.949 li
1130.69 751.949 li
1130.69 735.616 li
1130.69 730.612 1129.09 728.468 1125.68 728.468 cv
1123.7 728.468 1121.45 729.842 1118.97 732.592 cv
1118.97 751.949 li
1114.46 751.949 li
1114.46 725.223 li
cp
f
1178.15 738.641 mo
1178.15 732.481 1175.07 728.303 1170.45 728.303 cv
1165.89 728.303 1162.75 732.481 1162.75 738.641 cv
1162.75 744.745 1165.89 748.869 1170.45 748.869 cv
1175.07 748.869 1178.15 744.745 1178.15 738.641 cv
cp
1158.08 738.641 mo
1158.08 729.677 1163.91 724.562 1170.45 724.562 cv
1177 724.562 1182.83 729.677 1182.83 738.641 cv
1182.83 747.495 1177 752.609 1170.45 752.609 cv
1163.91 752.609 1158.08 747.495 1158.08 738.641 cv
cp
f
1206.81 745.13 mo
1206.81 731.162 li
1204.55 729.127 1202.52 728.357 1200.32 728.357 cv
1196.03 728.357 1192.62 732.481 1192.62 738.586 cv
1192.62 744.965 1195.31 748.814 1199.99 748.814 cv
1202.46 748.814 1204.61 747.604 1206.81 745.13 cv
cp
1187.94 738.641 mo
1187.94 729.952 1193.44 724.562 1199.55 724.562 cv
1202.63 724.562 1204.66 725.718 1207.03 727.642 cv
1206.81 723.078 li
1206.81 712.795 li
1211.37 712.795 li
1211.37 751.949 li
1207.63 751.949 li
1207.25 748.814 li
1207.08 748.814 li
1204.99 750.849 1202.13 752.609 1199 752.609 cv
1192.29 752.609 1187.94 747.55 1187.94 738.641 cv
cp
f
1232.16 743.7 mo
1232.16 728.907 li
1228.2 728.907 li
1228.2 725.498 li
1232.38 725.223 li
1232.93 717.744 li
1236.73 717.744 li
1236.73 725.223 li
1243.93 725.223 li
1243.93 728.907 li
1236.73 728.907 li
1236.73 743.755 li
1236.73 747.055 1237.77 748.925 1240.85 748.925 cv
1241.79 748.925 1243 748.54 1243.88 748.21 cv
1244.76 751.619 li
1243.27 752.114 1241.46 752.609 1239.81 752.609 cv
1234.09 752.609 1232.16 748.979 1232.16 743.7 cv
cp
f
1265.93 736.441 mo
1265.93 731.052 1263.51 728.138 1259.33 728.138 cv
1255.59 728.138 1252.18 731.162 1251.63 736.441 cv
1265.93 736.441 li
cp
1247.23 738.641 mo
1247.23 729.897 1253.12 724.562 1259.22 724.562 cv
1266.04 724.562 1269.89 729.457 1269.89 737.101 cv
1269.89 738.036 1269.84 739.026 1269.73 739.685 cv
1251.69 739.685 li
1252.02 745.349 1255.48 748.979 1260.6 748.979 cv
1263.13 748.979 1265.27 748.154 1267.25 746.89 cv
1268.85 749.859 li
1266.54 751.345 1263.68 752.609 1260.05 752.609 cv
1252.9 752.609 1247.23 747.385 1247.23 738.641 cv
cp
f
1276.49 725.223 mo
1280.23 725.223 li
1280.62 729.072 li
1280.78 729.072 li
1283.09 726.543 1285.9 724.562 1289.09 724.562 cv
1293.16 724.562 1295.36 726.487 1296.46 729.677 cv
1299.26 726.652 1302.01 724.562 1305.25 724.562 cv
1310.75 724.562 1313.39 728.192 1313.39 735.012 cv
1313.39 751.949 li
1308.88 751.949 li
1308.88 735.616 li
1308.88 730.612 1307.29 728.468 1303.93 728.468 cv
1301.84 728.468 1299.7 729.842 1297.22 732.592 cv
1297.22 751.949 li
1292.72 751.949 li
1292.72 735.616 li
1292.72 730.612 1291.12 728.468 1287.71 728.468 cv
1285.73 728.468 1283.48 729.842 1281 732.592 cv
1281 751.949 li
1276.49 751.949 li
1276.49 725.223 li
cp
f
1340.79 738.201 mo
1340.79 732.316 1338.81 728.357 1333.75 728.357 cv
1331.49 728.357 1329.24 729.622 1326.6 731.987 cv
1326.6 746.01 li
1329.02 748.045 1331.38 748.814 1333.14 748.814 cv
1337.54 748.814 1340.79 744.8 1340.79 738.201 cv
cp
1322.09 725.223 mo
1325.83 725.223 li
1326.21 728.303 li
1326.38 728.303 li
1328.8 726.267 1331.77 724.562 1334.9 724.562 cv
1341.78 724.562 1345.46 729.897 1345.46 738.201 cv
1345.46 747.274 1340.02 752.609 1333.91 752.609 cv
1331.44 752.609 1328.96 751.454 1326.49 749.529 cv
1326.6 754.204 li
1326.6 763.223 li
1322.09 763.223 li
1322.09 725.223 li
cp
f
1370.7 738.641 mo
1370.7 732.481 1367.63 728.303 1363.01 728.303 cv
1358.44 728.303 1355.31 732.481 1355.31 738.641 cv
1355.31 744.745 1358.44 748.869 1363.01 748.869 cv
1367.63 748.869 1370.7 744.745 1370.7 738.641 cv
cp
1350.63 738.641 mo
1350.63 729.677 1356.46 724.562 1363.01 724.562 cv
1369.55 724.562 1375.38 729.677 1375.38 738.641 cv
1375.38 747.495 1369.55 752.609 1363.01 752.609 cv
1356.46 752.609 1350.63 747.495 1350.63 738.641 cv
cp
f
1382.42 725.223 mo
1386.16 725.223 li
1386.55 730.062 li
1386.71 730.062 li
1388.53 726.708 1391.28 724.562 1394.3 724.562 cv
1395.46 724.562 1396.28 724.727 1397.16 725.113 cv
1396.28 729.072 li
1395.4 728.797 1394.79 728.633 1393.7 728.633 cv
1391.44 728.633 1388.75 730.282 1386.93 734.791 cv
1386.93 751.949 li
1382.42 751.949 li
1382.42 725.223 li
cp
f
857.51 791.223 mo
862.019 791.223 li
862.019 817.949 li
857.51 817.949 li
857.51 791.223 li
cp
856.685 782.808 mo
856.685 781.049 858.06 779.894 859.819 779.894 cv
861.579 779.894 862.954 781.049 862.954 782.808 cv
862.954 784.514 861.579 785.724 859.819 785.724 cv
858.06 785.724 856.685 784.514 856.685 782.808 cv
cp
f
871.039 791.223 mo
874.778 791.223 li
875.163 795.072 li
875.328 795.072 li
877.857 792.543 880.607 790.562 884.292 790.562 cv
889.901 790.562 892.431 794.192 892.431 801.012 cv
892.431 817.949 li
887.922 817.949 li
887.922 801.616 li
887.922 796.612 886.382 794.468 882.862 794.468 cv
880.112 794.468 878.243 795.897 875.548 798.592 cv
875.548 817.949 li
871.039 817.949 li
871.039 791.223 li
cp
f
899.144 804.641 mo
899.144 795.677 905.138 790.562 912.012 790.562 cv
915.531 790.562 917.951 791.992 919.821 793.697 cv
917.512 796.667 li
915.972 795.292 914.322 794.303 912.177 794.303 cv
907.338 794.303 903.818 798.481 903.818 804.641 cv
903.818 810.745 907.173 814.869 912.067 814.869 cv
914.542 814.869 916.687 813.66 918.336 812.175 cv
920.316 815.199 li
917.896 817.345 914.872 818.609 911.683 818.609 cv
904.588 818.609 899.144 813.495 899.144 804.641 cv
cp
f
926.203 791.223 mo
930.712 791.223 li
930.712 817.949 li
926.203 817.949 li
926.203 791.223 li
cp
925.378 782.808 mo
925.378 781.049 926.753 779.894 928.513 779.894 cv
930.272 779.894 931.647 781.049 931.647 782.808 cv
931.647 784.514 930.272 785.724 928.513 785.724 cv
926.753 785.724 925.378 784.514 925.378 782.808 cv
cp
f
956.67 811.13 mo
956.67 797.162 li
954.415 795.127 952.381 794.357 950.181 794.357 cv
945.892 794.357 942.481 798.481 942.481 804.586 cv
942.481 810.965 945.177 814.814 949.851 814.814 cv
952.325 814.814 954.47 813.604 956.67 811.13 cv
cp
937.808 804.641 mo
937.808 795.952 943.307 790.562 949.411 790.562 cv
952.49 790.562 954.525 791.718 956.89 793.642 cv
956.67 789.078 li
956.67 778.795 li
961.234 778.795 li
961.234 817.949 li
957.495 817.949 li
957.109 814.814 li
956.944 814.814 li
954.855 816.849 951.995 818.609 948.861 818.609 cv
942.151 818.609 937.808 813.55 937.808 804.641 cv
cp
f
970.258 791.223 mo
974.767 791.223 li
974.767 817.949 li
970.258 817.949 li
970.258 791.223 li
cp
969.433 782.808 mo
969.433 781.049 970.808 779.894 972.567 779.894 cv
974.327 779.894 975.702 781.049 975.702 782.808 cv
975.702 784.514 974.327 785.724 972.567 785.724 cv
970.808 785.724 969.433 784.514 969.433 782.808 cv
cp
f
1000.72 811.13 mo
1000.72 797.162 li
998.47 795.127 996.436 794.357 994.235 794.357 cv
989.946 794.357 986.536 798.481 986.536 804.586 cv
986.536 810.965 989.231 814.814 993.905 814.814 cv
996.38 814.814 998.524 813.604 1000.72 811.13 cv
cp
981.862 804.641 mo
981.862 795.952 987.361 790.562 993.466 790.562 cv
996.545 790.562 998.58 791.718 1000.94 793.642 cv
1000.72 789.078 li
1000.72 778.795 li
1005.29 778.795 li
1005.29 817.949 li
1001.55 817.949 li
1001.16 814.814 li
1001 814.814 li
998.91 816.849 996.05 818.609 992.916 818.609 cv
986.206 818.609 981.862 813.55 981.862 804.641 cv
cp
f
1013.93 808.16 mo
1013.93 791.223 li
1018.49 791.223 li
1018.49 807.556 li
1018.49 812.559 1019.98 814.705 1023.5 814.705 cv
1026.24 814.705 1028.17 813.33 1030.7 810.195 cv
1030.7 791.223 li
1035.21 791.223 li
1035.21 817.949 li
1031.47 817.949 li
1031.08 813.769 li
1030.92 813.769 li
1028.44 816.684 1025.8 818.609 1022.12 818.609 cv
1016.46 818.609 1013.93 814.979 1013.93 808.16 cv
cp
f
1044.23 791.223 mo
1047.97 791.223 li
1048.35 795.072 li
1048.52 795.072 li
1051.05 792.543 1053.8 790.562 1057.48 790.562 cv
1063.09 790.562 1065.62 794.192 1065.62 801.012 cv
1065.62 817.949 li
1061.11 817.949 li
1061.11 801.616 li
1061.11 796.612 1059.57 794.468 1056.05 794.468 cv
1053.3 794.468 1051.43 795.897 1048.74 798.592 cv
1048.74 817.949 li
1044.23 817.949 li
1044.23 791.223 li
cp
f
1075.08 809.7 mo
1075.08 794.907 li
1071.13 794.907 li
1071.13 791.498 li
1075.3 791.223 li
1075.85 783.744 li
1079.65 783.744 li
1079.65 791.223 li
1086.85 791.223 li
1086.85 794.907 li
1079.65 794.907 li
1079.65 809.755 li
1079.65 813.055 1080.69 814.925 1083.77 814.925 cv
1084.71 814.925 1085.92 814.54 1086.8 814.21 cv
1087.68 817.619 li
1086.19 818.114 1084.38 818.609 1082.73 818.609 cv
1077.01 818.609 1075.08 814.979 1075.08 809.7 cv
cp
f
1103.52 808.16 mo
1103.52 791.223 li
1108.08 791.223 li
1108.08 807.556 li
1108.08 812.559 1109.57 814.705 1113.09 814.705 cv
1115.84 814.705 1117.76 813.33 1120.29 810.195 cv
1120.29 791.223 li
1124.8 791.223 li
1124.8 817.949 li
1121.06 817.949 li
1120.68 813.769 li
1120.51 813.769 li
1118.04 816.684 1115.4 818.609 1111.71 818.609 cv
1106.05 818.609 1103.52 814.979 1103.52 808.16 cv
cp
f
1134.59 809.7 mo
1134.59 794.907 li
1130.63 794.907 li
1130.63 791.498 li
1134.81 791.223 li
1135.36 783.744 li
1139.16 783.744 li
1139.16 791.223 li
1146.36 791.223 li
1146.36 794.907 li
1139.16 794.907 li
1139.16 809.755 li
1139.16 813.055 1140.2 814.925 1143.28 814.925 cv
1144.22 814.925 1145.43 814.54 1146.31 814.21 cv
1147.19 817.619 li
1145.7 818.114 1143.89 818.609 1142.24 818.609 cv
1136.52 818.609 1134.59 814.979 1134.59 809.7 cv
cp
f
1163.41 812.559 mo
1163.41 778.795 li
1167.92 778.795 li
1167.92 812.89 li
1167.92 814.319 1168.53 814.869 1169.19 814.869 cv
1169.46 814.869 1169.68 814.869 1170.18 814.76 cv
1170.78 818.169 li
1170.18 818.444 1169.41 818.609 1168.2 818.609 cv
1164.79 818.609 1163.41 816.465 1163.41 812.559 cv
cp
f
1192.18 811.405 mo
1192.18 803.981 li
1183.27 805.081 1180.19 807.28 1180.19 810.69 cv
1180.19 813.715 1182.28 814.979 1184.92 814.979 cv
1187.5 814.979 1189.59 813.715 1192.18 811.405 cv
cp
1175.79 811.02 mo
1175.79 805.191 1180.79 802.276 1192.18 801.012 cv
1192.18 797.601 1191.08 794.303 1186.68 794.303 cv
1183.6 794.303 1180.79 795.732 1178.7 797.162 cv
1176.94 794.027 li
1179.42 792.432 1183.16 790.562 1187.45 790.562 cv
1193.99 790.562 1196.74 794.907 1196.74 801.561 cv
1196.74 817.949 li
1193 817.949 li
1192.62 814.76 li
1192.45 814.76 li
1189.92 816.849 1186.95 818.609 1183.6 818.609 cv
1179.14 818.609 1175.79 815.805 1175.79 811.02 cv
cp
f
1223.86 804.201 mo
1223.86 798.316 1221.88 794.357 1216.82 794.357 cv
1214.56 794.357 1212.2 795.622 1209.67 797.987 cv
1209.67 812.01 li
1212.03 814.045 1214.45 814.814 1216.21 814.814 cv
1220.61 814.814 1223.86 810.8 1223.86 804.201 cv
cp
1209.34 815.199 mo
1209.17 815.199 li
1208.79 817.949 li
1205.16 817.949 li
1205.16 778.795 li
1209.67 778.795 li
1209.67 789.463 li
1209.56 794.303 li
1211.98 792.157 1214.95 790.562 1217.92 790.562 cv
1224.85 790.562 1228.53 795.897 1228.53 804.146 cv
1228.53 813.274 1223.09 818.609 1216.98 818.609 cv
1214.51 818.609 1211.7 817.345 1209.34 815.199 cv
cp
f
1253.67 804.641 mo
1253.67 798.481 1250.59 794.303 1245.97 794.303 cv
1241.4 794.303 1238.27 798.481 1238.27 804.641 cv
1238.27 810.745 1241.4 814.869 1245.97 814.869 cv
1250.59 814.869 1253.67 810.745 1253.67 804.641 cv
cp
1233.59 804.641 mo
1233.59 795.677 1239.42 790.562 1245.97 790.562 cv
1252.51 790.562 1258.34 795.677 1258.34 804.641 cv
1258.34 813.495 1252.51 818.609 1245.97 818.609 cv
1239.42 818.609 1233.59 813.495 1233.59 804.641 cv
cp
f
1265.38 791.223 mo
1269.12 791.223 li
1269.51 796.062 li
1269.67 796.062 li
1271.49 792.708 1274.24 790.562 1277.26 790.562 cv
1278.42 790.562 1279.24 790.727 1280.12 791.113 cv
1279.24 795.072 li
1278.36 794.797 1277.76 794.633 1276.66 794.633 cv
1274.4 794.633 1271.71 796.282 1269.89 800.791 cv
1269.89 817.949 li
1265.38 817.949 li
1265.38 791.223 li
cp
f
1300.64 802.441 mo
1300.64 797.052 1298.22 794.138 1294.04 794.138 cv
1290.3 794.138 1286.89 797.162 1286.34 802.441 cv
1300.64 802.441 li
cp
1281.94 804.641 mo
1281.94 795.897 1287.82 790.562 1293.93 790.562 cv
1300.75 790.562 1304.59 795.457 1304.59 803.101 cv
1304.59 804.036 1304.54 805.026 1304.43 805.685 cv
1286.39 805.685 li
1286.72 811.349 1290.19 814.979 1295.3 814.979 cv
1297.83 814.979 1299.98 814.154 1301.96 812.89 cv
1303.55 815.859 li
1301.24 817.345 1298.38 818.609 1294.75 818.609 cv
1287.6 818.609 1281.94 813.385 1281.94 804.641 cv
cp
f
1338.91 802.441 mo
1338.91 797.052 1336.49 794.138 1332.31 794.138 cv
1328.58 794.138 1325.17 797.162 1324.62 802.441 cv
1338.91 802.441 li
cp
1320.22 804.641 mo
1320.22 795.897 1326.1 790.562 1332.21 790.562 cv
1339.02 790.562 1342.87 795.457 1342.87 803.101 cv
1342.87 804.036 1342.82 805.026 1342.71 805.685 cv
1324.67 805.685 li
1325 811.349 1328.46 814.979 1333.58 814.979 cv
1336.11 814.979 1338.25 814.154 1340.23 812.89 cv
1341.83 815.859 li
1339.52 817.345 1336.66 818.609 1333.03 818.609 cv
1325.88 818.609 1320.22 813.385 1320.22 804.641 cv
cp
f
1349.7 809.7 mo
1349.7 794.907 li
1345.74 794.907 li
1345.74 791.498 li
1349.92 791.223 li
1350.46 783.744 li
1354.26 783.744 li
1354.26 791.223 li
1361.46 791.223 li
1361.46 794.907 li
1354.26 794.907 li
1354.26 809.755 li
1354.26 813.055 1355.3 814.925 1358.38 814.925 cv
1359.32 814.925 1360.53 814.54 1361.41 814.21 cv
1362.29 817.619 li
1360.8 818.114 1358.99 818.609 1357.34 818.609 cv
1351.62 818.609 1349.7 814.979 1349.7 809.7 cv
cp
f
874.447 877.13 mo
874.447 863.162 li
872.192 861.127 870.158 860.357 867.958 860.357 cv
863.669 860.357 860.259 864.481 860.259 870.586 cv
860.259 876.965 862.954 880.814 867.628 880.814 cv
870.103 880.814 872.247 879.604 874.447 877.13 cv
cp
855.585 870.641 mo
855.585 861.952 861.084 856.562 867.188 856.562 cv
870.268 856.562 872.303 857.718 874.667 859.642 cv
874.447 855.078 li
874.447 844.795 li
879.012 844.795 li
879.012 883.949 li
875.272 883.949 li
874.887 880.814 li
874.722 880.814 li
872.633 882.849 869.772 884.609 866.639 884.609 cv
859.929 884.609 855.585 879.55 855.585 870.641 cv
cp
f
906.126 870.641 mo
906.126 864.481 903.047 860.303 898.428 860.303 cv
893.863 860.303 890.729 864.481 890.729 870.641 cv
890.729 876.745 893.863 880.869 898.428 880.869 cv
903.047 880.869 906.126 876.745 906.126 870.641 cv
cp
886.054 870.641 mo
886.054 861.677 891.883 856.562 898.428 856.562 cv
904.972 856.562 910.801 861.677 910.801 870.641 cv
910.801 879.495 904.972 884.609 898.428 884.609 cv
891.883 884.609 886.054 879.495 886.054 870.641 cv
cp
f
917.844 878.559 mo
917.844 844.795 li
922.353 844.795 li
922.353 878.89 li
922.353 880.319 922.958 880.869 923.617 880.869 cv
923.893 880.869 924.112 880.869 924.607 880.76 cv
925.213 884.169 li
924.607 884.444 923.838 884.609 922.628 884.609 cv
919.218 884.609 917.844 882.465 917.844 878.559 cv
cp
f
949.96 870.641 mo
949.96 864.481 946.881 860.303 942.262 860.303 cv
937.697 860.303 934.563 864.481 934.563 870.641 cv
934.563 876.745 937.697 880.869 942.262 880.869 cv
946.881 880.869 949.96 876.745 949.96 870.641 cv
cp
929.888 870.641 mo
929.888 861.677 935.717 856.562 942.262 856.562 cv
948.806 856.562 954.635 861.677 954.635 870.641 cv
954.635 879.495 948.806 884.609 942.262 884.609 cv
935.717 884.609 929.888 879.495 929.888 870.641 cv
cp
f
961.678 857.223 mo
965.417 857.223 li
965.802 862.062 li
965.967 862.062 li
967.781 858.708 970.531 856.562 973.556 856.562 cv
974.711 856.562 975.535 856.727 976.415 857.113 cv
975.535 861.072 li
974.655 860.797 974.051 860.633 972.951 860.633 cv
970.696 860.633 968.002 862.282 966.187 866.791 cv
966.187 883.949 li
961.678 883.949 li
961.678 857.223 li
cp
f
996.931 868.441 mo
996.931 863.052 994.511 860.138 990.331 860.138 cv
986.592 860.138 983.182 863.162 982.632 868.441 cv
996.931 868.441 li
cp
978.232 870.641 mo
978.232 861.897 984.117 856.562 990.221 856.562 cv
997.04 856.562 1000.89 861.457 1000.89 869.101 cv
1000.89 870.036 1000.83 871.026 1000.72 871.685 cv
982.688 871.685 li
983.018 877.349 986.481 880.979 991.596 880.979 cv
994.126 880.979 996.271 880.154 998.25 878.89 cv
999.845 881.859 li
997.535 883.345 994.676 884.609 991.046 884.609 cv
983.897 884.609 978.232 879.385 978.232 870.641 cv
cp
f
1018.49 857.223 mo
1022.23 857.223 li
1022.62 861.072 li
1022.78 861.072 li
1025.09 858.543 1027.89 856.562 1031.08 856.562 cv
1035.15 856.562 1037.35 858.487 1038.45 861.677 cv
1041.26 858.652 1044.01 856.562 1047.25 856.562 cv
1052.75 856.562 1055.39 860.192 1055.39 867.012 cv
1055.39 883.949 li
1050.88 883.949 li
1050.88 867.616 li
1050.88 862.612 1049.29 860.468 1045.93 860.468 cv
1043.84 860.468 1041.7 861.842 1039.22 864.592 cv
1039.22 883.949 li
1034.71 883.949 li
1034.71 867.616 li
1034.71 862.612 1033.12 860.468 1029.71 860.468 cv
1027.73 860.468 1025.47 861.842 1023 864.592 cv
1023 883.949 li
1018.49 883.949 li
1018.49 857.223 li
cp
f
1078.82 877.405 mo
1078.82 869.981 li
1069.92 871.081 1066.83 873.28 1066.83 876.69 cv
1066.83 879.715 1068.92 880.979 1071.56 880.979 cv
1074.15 880.979 1076.24 879.715 1078.82 877.405 cv
cp
1062.44 877.02 mo
1062.44 871.191 1067.44 868.276 1078.82 867.012 cv
1078.82 863.601 1077.72 860.303 1073.32 860.303 cv
1070.25 860.303 1067.44 861.732 1065.35 863.162 cv
1063.59 860.027 li
1066.07 858.432 1069.8 856.562 1074.09 856.562 cv
1080.64 856.562 1083.39 860.907 1083.39 867.561 cv
1083.39 883.949 li
1079.65 883.949 li
1079.26 880.76 li
1079.1 880.76 li
1076.57 882.849 1073.6 884.609 1070.25 884.609 cv
1065.79 884.609 1062.44 881.805 1062.44 877.02 cv
cp
f
1106.49 866.076 mo
1106.49 862.172 1103.96 859.862 1100.82 859.862 cv
1097.69 859.862 1095.16 862.172 1095.16 866.076 cv
1095.16 869.981 1097.74 872.456 1100.82 872.456 cv
1103.9 872.456 1106.49 869.981 1106.49 866.076 cv
cp
1109.95 887.688 mo
1109.95 885.214 1108.03 884.389 1104.56 884.389 cv
1099.94 884.389 li
1098.9 884.389 1097.63 884.279 1096.48 883.949 cv
1094.55 885.324 1093.73 886.919 1093.73 888.459 cv
1093.73 891.318 1096.64 893.133 1101.48 893.133 cv
1106.6 893.133 1109.95 890.493 1109.95 887.688 cv
cp
1089.77 889.063 mo
1089.77 886.808 1091.26 884.664 1093.67 883.015 cv
1093.67 882.794 li
1092.36 881.97 1091.31 880.54 1091.31 878.45 cv
1091.31 876.195 1092.85 874.435 1094.22 873.501 cv
1094.22 873.28 li
1092.46 871.85 1090.76 869.266 1090.76 866.076 cv
1090.76 860.247 1095.38 856.562 1100.82 856.562 cv
1102.31 856.562 1103.63 856.838 1104.62 857.223 cv
1113.91 857.223 li
1113.91 860.687 li
1108.41 860.687 li
1109.68 861.897 1110.61 863.932 1110.61 866.186 cv
1110.61 871.906 1106.27 875.48 1100.82 875.48 cv
1099.5 875.48 1098.02 875.15 1096.81 874.546 cv
1095.88 875.37 1095.1 876.25 1095.1 877.735 cv
1095.1 879.439 1096.21 880.649 1099.83 880.649 cv
1105 880.649 li
1111.22 880.649 1114.35 882.574 1114.35 887.029 cv
1114.35 891.978 1109.13 896.267 1100.82 896.267 cv
1094.28 896.267 1089.77 893.682 1089.77 889.063 cv
cp
f
1119.53 857.223 mo
1123.27 857.223 li
1123.65 861.072 li
1123.82 861.072 li
1126.34 858.543 1129.09 856.562 1132.78 856.562 cv
1138.39 856.562 1140.92 860.192 1140.92 867.012 cv
1140.92 883.949 li
1136.41 883.949 li
1136.41 867.616 li
1136.41 862.612 1134.87 860.468 1131.35 860.468 cv
1128.6 860.468 1126.73 861.897 1124.04 864.592 cv
1124.04 883.949 li
1119.53 883.949 li
1119.53 857.223 li
cp
f
1164.35 877.405 mo
1164.35 869.981 li
1155.44 871.081 1152.36 873.28 1152.36 876.69 cv
1152.36 879.715 1154.45 880.979 1157.09 880.979 cv
1159.67 880.979 1161.76 879.715 1164.35 877.405 cv
cp
1147.96 877.02 mo
1147.96 871.191 1152.97 868.276 1164.35 867.012 cv
1164.35 863.601 1163.25 860.303 1158.85 860.303 cv
1155.77 860.303 1152.97 861.732 1150.88 863.162 cv
1149.12 860.027 li
1151.59 858.432 1155.33 856.562 1159.62 856.562 cv
1166.16 856.562 1168.91 860.907 1168.91 867.561 cv
1168.91 883.949 li
1165.17 883.949 li
1164.79 880.76 li
1164.62 880.76 li
1162.09 882.849 1159.13 884.609 1155.77 884.609 cv
1151.32 884.609 1147.96 881.805 1147.96 877.02 cv
cp
f
1203.07 877.405 mo
1203.07 869.981 li
1194.16 871.081 1191.08 873.28 1191.08 876.69 cv
1191.08 879.715 1193.17 880.979 1195.81 880.979 cv
1198.39 880.979 1200.48 879.715 1203.07 877.405 cv
cp
1186.68 877.02 mo
1186.68 871.191 1191.68 868.276 1203.07 867.012 cv
1203.07 863.601 1201.97 860.303 1197.57 860.303 cv
1194.49 860.303 1191.68 861.732 1189.59 863.162 cv
1187.83 860.027 li
1190.31 858.432 1194.05 856.562 1198.34 856.562 cv
1204.88 856.562 1207.63 860.907 1207.63 867.561 cv
1207.63 883.949 li
1203.89 883.949 li
1203.51 880.76 li
1203.34 880.76 li
1200.81 882.849 1197.84 884.609 1194.49 884.609 cv
1190.03 884.609 1186.68 881.805 1186.68 877.02 cv
cp
f
1216.05 878.559 mo
1216.05 844.795 li
1220.56 844.795 li
1220.56 878.89 li
1220.56 880.319 1221.17 880.869 1221.82 880.869 cv
1222.1 880.869 1222.32 880.869 1222.81 880.76 cv
1223.42 884.169 li
1222.81 884.444 1222.04 884.609 1220.83 884.609 cv
1217.42 884.609 1216.05 882.465 1216.05 878.559 cv
cp
f
1230.08 857.223 mo
1234.58 857.223 li
1234.58 883.949 li
1230.08 883.949 li
1230.08 857.223 li
cp
1229.25 848.808 mo
1229.25 847.049 1230.63 845.894 1232.38 845.894 cv
1234.14 845.894 1235.52 847.049 1235.52 848.808 cv
1235.52 850.514 1234.14 851.724 1232.38 851.724 cv
1230.63 851.724 1229.25 850.514 1229.25 848.808 cv
cp
f
1260.54 877.13 mo
1260.54 863.162 li
1258.29 861.127 1256.25 860.357 1254.05 860.357 cv
1249.76 860.357 1246.35 864.481 1246.35 870.586 cv
1246.35 876.965 1249.05 880.814 1253.72 880.814 cv
1256.2 880.814 1258.34 879.604 1260.54 877.13 cv
cp
1260.54 885.709 mo
1260.76 880.869 li
1258.62 882.959 1255.81 884.609 1252.73 884.609 cv
1246.02 884.609 1241.68 879.55 1241.68 870.641 cv
1241.68 861.952 1247.18 856.562 1253.28 856.562 cv
1256.36 856.562 1258.51 857.663 1260.93 859.752 cv
1261.04 859.752 li
1261.48 857.223 li
1265.11 857.223 li
1265.11 895.223 li
1260.54 895.223 li
1260.54 885.709 li
cp
f
1273.74 874.16 mo
1273.74 857.223 li
1278.31 857.223 li
1278.31 873.556 li
1278.31 878.559 1279.79 880.705 1283.31 880.705 cv
1286.06 880.705 1287.99 879.33 1290.52 876.195 cv
1290.52 857.223 li
1295.03 857.223 li
1295.03 883.949 li
1291.29 883.949 li
1290.9 879.769 li
1290.74 879.769 li
1288.26 882.684 1285.62 884.609 1281.94 884.609 cv
1276.27 884.609 1273.74 880.979 1273.74 874.16 cv
cp
f
1318.79 877.405 mo
1318.79 869.981 li
1309.88 871.081 1306.8 873.28 1306.8 876.69 cv
1306.8 879.715 1308.89 880.979 1311.53 880.979 cv
1314.11 880.979 1316.2 879.715 1318.79 877.405 cv
cp
1302.4 877.02 mo
1302.4 871.191 1307.4 868.276 1318.79 867.012 cv
1318.79 863.601 1317.69 860.303 1313.29 860.303 cv
1310.21 860.303 1307.4 861.732 1305.31 863.162 cv
1303.55 860.027 li
1306.03 858.432 1309.77 856.562 1314.06 856.562 cv
1320.6 856.562 1323.35 860.907 1323.35 867.561 cv
1323.35 883.949 li
1319.61 883.949 li
1319.23 880.76 li
1319.06 880.76 li
1316.53 882.849 1313.56 884.609 1310.21 884.609 cv
1305.75 884.609 1302.4 881.805 1302.4 877.02 cv
cp
f
1330.83 881.199 mo
1330.83 879.109 1332.32 877.68 1334.13 877.68 cv
1335.89 877.68 1337.38 879.109 1337.38 881.199 cv
1337.38 883.18 1335.89 884.609 1334.13 884.609 cv
1332.32 884.609 1330.83 883.18 1330.83 881.199 cv
cp
f
236.016 925.653 mo
144.541 925.653 li
136.461 925.653 129.125 922.485 123.691 917.333 cv
117.861 911.809 114.219 904.002 114.219 895.339 cv
114.219 860.114 li
170.477 860.114 li
170.634 860.114 170.791 860.112 170.948 860.11 cv
583.17 860.11 li
602.48 860.11 618.14 844.46 618.14 825.14 cv
618.14 807.45 li
618.14 784.08 li
618.14 768.302 607.695 754.965 593.348 750.605 cv
593.348 687.891 li
593.35 687.89 li
593.35 580.82 li
593.348 493.2 li
593.35 493.2 li
593.35 450.574 li
607.698 446.214 618.14 432.879 618.14 417.106 cv
618.14 406.608 li
648.706 406.608 li
668.021 406.608 683.679 422.266 683.679 441.582 cv
683.679 482.646 li
683.679 485.06 683.435 487.418 682.969 489.695 cv
682.93 489.886 682.88 490.072 682.838 490.261 cv
682.754 490.637 682.674 491.015 682.578 491.387 cv
682.539 491.541 682.49 491.691 682.448 491.844 cv
679.476 502.77 671.348 511.569 660.833 515.457 cv
660.732 515.497 li
660.595 515.547 660.455 515.589 660.317 515.637 cv
659.844 515.803 659.369 515.963 658.887 516.109 cv
658.887 516.11 li
658.889 516.109 li
658.889 558.739 li
658.887 558.739 li
658.887 581.078 li
711.56 588.01 li
713.312 587.77 715.046 587.65 716.762 587.65 cv
717.259 587.65 717.755 587.66 718.25 587.68 cv
718.25 587.67 li
718.27 587.68 li
721.29 587.79 724.23 588.27 727.04 589.06 cv
740.49 591.19 li
749.45 589.18 761.66 586.21 766.62 586.17 cv
766.654 586.17 766.688 586.17 766.723 586.17 cv
778.905 586.17 830.347 598.409 832.96 615.64 cv
835.58 632.91 800.41 637.26 792.34 639.27 cv
789.52 639.97 783.26 640.55 775.74 640.97 cv
772.885 641.131 770.02 641.225 767.155 641.225 cv
756.129 641.224 745.148 639.836 735.17 635.55 cv
719.02 632.44 li
688.742 635.597 li
689.448 636.979 690.08 638.395 690.636 639.841 cv
699.021 642.127 706.026 644.314 708.994 645.768 cv
717.196 649.788 751.333 671.178 744.523 689.11 cv
741.092 698.145 725.237 700.754 708.703 700.754 cv
692.421 700.754 675.481 698.223 669.104 696.806 cv
668.176 696.599 667.113 696.3 665.961 695.937 cv
663.673 696.838 661.307 697.543 658.889 698.047 cv
658.889 753.429 li
658.887 753.43 li
658.887 816.149 li
673.234 820.51 683.679 833.842 683.679 849.619 cv
683.679 872.989 li
683.679 890.679 li
683.679 909.999 668.019 925.649 648.709 925.649 cv
236.156 925.649 li
236.016 925.653 li
.819608 .819608 .819608 rgb
f
91.3001 784.14 mo
593.348 784.14 li
593.348 417.042 li
91.3001 417.042 li
91.3001 784.14 li
.898039 .741176 .443137 rgb
f
593.35 493.2 mo
593.35 493.2 li
593.348 450.575 li
593.349 450.575 593.349 450.575 593.35 450.574 cv
593.35 493.2 li
.670588 .670588 .670588 rgb
f
593.35 493.2 mo
445.248 493.2 li
445.223 491.717 445.174 490.27 445.1 488.86 cv
444.226 472.22 429.288 460.42 408.775 452.08 cv
583.167 452.08 li
586.708 452.08 590.127 451.554 593.348 450.575 cv
593.348 493.2 li
200.795 475.467 mo
200.795 452.08 li
228.637 452.08 li
218.546 458.141 208.76 465.831 200.795 475.467 cv
.737255 .607843 .364706 rgb
f
618.14 784.08 mo
618.14 825.14 li
618.14 844.46 602.48 860.11 583.17 860.11 cv
91.3001 860.11 li
91.3001 749.1 li
583.17 749.1 li
602.48 749.1 618.14 764.76 618.14 784.08 cv
1 .823529 .490196 rgb
f
583.167 452.08 mo
91.3001 452.08 li
91.3001 341.069 li
583.167 341.069 li
602.482 341.069 618.14 356.727 618.14 376.043 cv
618.14 417.106 li
618.14 436.422 602.482 452.08 583.167 452.08 cv
f
593.348 687.891 mo
593.348 580.82 li
593.35 580.82 li
593.35 687.89 li
.670588 .670588 .670588 rgb
f
480.27 749.1 mo
408.777 749.1 li
424.797 742.587 437.416 733.964 442.592 722.575 cv
442.592 722.575 li
444.041 719.381 444.908 715.966 445.1 712.32 cv
447.21 672.29 436.59 623.19 428.85 600.59 cv
428.904 600.267 443.599 542.968 445.139 502.258 cv
464.894 510.56 479.146 522.19 480 538.43 cv
480.99 557.11 477.53 582.6 473.56 604.52 cv
593.35 580.82 li
593.348 687.891 li
478.83 723.86 li
479.67 732.3 480.2 740.81 480.27 749.1 cv
.737255 .607843 .364706 rgb
f
583.17 860.11 mo
170.948 860.11 li
187.474 859.858 200.795 846.382 200.795 829.796 cv
200.795 807.45 li
295.364 807.45 li
283.046 802.109 269.879 794.541 258.74 784.14 cv
252.77 778.58 247.38 772.2 243.02 764.92 cv
240.972 761.499 239.151 757.88 237.604 754.048 cv
255.865 763.28 273.659 767.515 282.11 768.57 cv
282.624 768.633 284.013 768.676 286.146 768.676 cv
288.707 768.676 292.341 768.614 296.802 768.452 cv
321.973 767.536 373.581 763.409 408.777 749.1 cv
494.94 749.1 li
494.98 753.43 494.89 757.71 494.67 761.89 cv
494.21 770.56 489.95 777.91 483.06 784.14 cv
471.169 794.91 451.475 802.344 430.155 807.45 cv
618.14 807.45 li
618.14 825.14 li
618.14 844.46 602.48 860.11 583.17 860.11 cv
.819608 .67451 .4 rgb
f
583.17 452.08 mo
408.774 452.08 li
367.38 435.25 303.281 432.512 286.196 432.512 cv
284.038 432.512 282.627 432.555 282.11 432.62 cv
272.277 433.846 249.791 439.375 228.637 452.08 cv
200.795 452.08 li
200.795 396.57 li
618.14 396.57 li
618.14 417.11 li
618.14 436.42 602.48 452.08 583.17 452.08 cv
f
79.0021 860.114 mo
170.477 860.114 li
187.221 860.114 200.795 846.54 200.795 829.796 cv
200.795 371.387 li
200.795 354.643 187.221 341.069 170.477 341.069 cv
79.0021 341.069 li
62.2578 341.069 48.684 354.643 48.684 371.387 cv
48.684 829.796 li
48.684 846.54 62.2578 860.114 79.0021 860.114 cv
1 .823529 .490196 rgb
f
57.8693 851.535 mo
52.2013 846.028 48.68 838.325 48.68 829.8 cv
48.68 371.39 li
48.68 359.515 55.5065 349.237 65.4452 344.261 cv
55.5068 349.238 48.684 359.515 48.684 371.387 cv
48.684 829.796 li
48.684 838.322 52.2035 846.026 57.8693 851.535 cv
.819608 .819608 .819608 rgb
f
114 860.11 mo
78.9998 860.11 li
70.7852 860.11 63.3307 856.841 57.8693 851.535 cv
52.2035 846.026 48.684 838.322 48.684 829.796 cv
48.684 371.387 li
48.684 359.515 55.5068 349.238 65.4452 344.261 cv
69.5248 342.219 74.1283 341.07 78.9998 341.07 cv
114 341.07 li
97.2599 341.07 83.6798 354.64 83.6798 371.39 cv
83.6798 568.823 li
78.9292 578.567 76.3385 589.067 76.3385 600 cv
76.3385 610.934 78.9292 621.434 83.6798 631.178 cv
83.6798 829.8 li
83.6798 846.54 97.2599 860.11 114 860.11 cv
.819608 .67451 .4 rgb
f
228.629 749.1 mo
221.13 749.1 li
220.483 747.122 219.908 745.09 219.408 743.005 cv
222.423 745.199 225.512 747.227 228.629 749.1 cv
.737255 .607843 .364706 rgb
f
216.533 740.844 mo
211.165 740.201 205.913 739.305 200.795 738.175 cv
200.795 725.717 li
205.508 731.418 210.859 736.439 216.533 740.844 cv
f
200.795 738.175 mo
155.685 728.214 121.162 700.033 113.053 665.29 cv
131.828 679.15 156.52 688.656 184.068 691.551 cv
185.964 700.388 189.226 708.295 193.45 715.35 cv
193.45 715.35 li
195.655 719.032 198.122 722.483 200.795 725.717 cv
200.795 738.175 li
.819608 .67451 .4 rgb
f
683.847 537.711 mo
683.847 537.711 722.257 518.362 735.71 515.583 cv
749.163 512.805 807.449 505.987 814.271 524.803 cv
821.092 543.618 785.141 565.396 776.52 569.459 cv
767.9 573.523 727.109 582.925 712.46 584.646 cv
697.81 586.367 683.847 537.711 683.847 537.711 cv
cp
.14902 .243137 .32549 rgb
f
777.072 531.679 mo
699.131 546.772 li
699.131 546.772 705.881 576.552 706.456 576.433 cv
706.947 576.332 763.953 550.445 780.666 542.853 cv
783.252 541.678 784.511 538.731 783.582 536.047 cv
783.317 535.281 li
782.421 532.694 779.759 531.159 777.072 531.679 cv
cp
.317647 .396078 .458824 rgb
f
773.274 529.861 mo
772.057 530.113 770.866 529.33 770.615 528.112 cv
770.364 526.895 771.147 525.705 772.364 525.453 cv
773.581 525.202 774.772 525.985 775.023 527.202 cv
775.275 528.419 774.492 529.61 773.274 529.861 cv
cp
.109804 .184314 .243137 rgb
f
763.287 531.819 mo
762.07 532.071 760.88 531.288 760.628 530.07 cv
760.377 528.853 761.16 527.662 762.377 527.411 cv
763.594 527.16 764.785 527.943 765.036 529.16 cv
765.288 530.377 764.505 531.568 763.287 531.819 cv
cp
f
751.837 534.011 mo
750.62 534.262 749.429 533.479 749.178 532.262 cv
748.927 531.045 749.71 529.854 750.927 529.603 cv
752.144 529.351 753.335 530.134 753.586 531.352 cv
753.837 532.569 753.054 533.759 751.837 534.011 cv
cp
f
778.3 551.643 mo
777.173 552.167 775.834 551.678 775.31 550.551 cv
774.786 549.424 775.275 548.086 776.402 547.562 cv
777.529 547.037 778.868 547.526 779.392 548.653 cv
779.916 549.781 779.427 551.119 778.3 551.643 cv
cp
f
769.029 555.841 mo
767.902 556.365 766.563 555.876 766.039 554.749 cv
765.515 553.622 766.004 552.283 767.131 551.759 cv
768.258 551.235 769.597 551.724 770.121 552.851 cv
770.645 553.978 770.156 555.317 769.029 555.841 cv
cp
f
758.387 560.602 mo
757.26 561.126 755.922 560.637 755.398 559.51 cv
754.874 558.383 755.363 557.044 756.49 556.52 cv
757.617 555.996 758.955 556.485 759.479 557.612 cv
760.003 558.739 759.514 560.078 758.387 560.602 cv
cp
f
748.637 564.914 mo
747.51 565.438 746.171 564.949 745.647 563.822 cv
745.123 562.695 745.612 561.356 746.739 560.832 cv
747.866 560.308 749.205 560.797 749.729 561.924 cv
750.253 563.051 749.764 564.39 748.637 564.914 cv
cp
f
741.067 535.603 mo
739.94 536.127 738.602 535.638 738.078 534.511 cv
737.554 533.384 738.042 532.045 739.17 531.521 cv
740.297 530.997 741.635 531.486 742.159 532.613 cv
742.683 533.74 742.194 535.079 741.067 535.603 cv
cp
f
736.844 565.642 mo
738.991 532.81 li
740.638 532.308 li
741.174 533.024 li
756.8 555.578 li
761.796 528.767 li
763.341 528.375 li
763.854 529.024 li
775.099 544.505 li
771.669 527.895 li
773.969 527.42 li
778.642 550.047 li
776.887 550.877 li
776.26 550.1 li
763.486 532.515 li
758.474 559.414 li
756.901 559.795 li
756.397 559.121 li
741.071 536.999 li
739.187 565.795 li
736.844 565.642 li
cp
f
727.713 538.949 mo
729.571 537.512 li
746.861 559.883 li
750.15 532.23 li
750.218 531.657 750.621 531.192 751.176 531.041 cv
751.73 530.891 752.313 531.09 752.66 531.548 cv
767.396 550.956 li
771.627 527.277 li
773.939 527.69 li
769.328 553.493 li
769.229 554.043 768.814 554.481 768.273 554.611 cv
767.732 554.74 767.166 554.538 766.829 554.095 cv
752.204 534.832 li
748.919 562.457 li
748.854 563.024 748.453 563.49 747.901 563.643 cv
747.348 563.796 746.766 563.601 746.416 563.147 cv
727.713 538.949 li
cp
f
619.725 655.425 mo
619.725 655.425 656.253 674.524 669.104 677.382 cv
681.956 680.239 737.713 687.618 744.523 669.686 cv
751.333 651.754 717.196 630.364 708.994 626.344 cv
700.792 622.325 661.839 612.723 647.825 610.862 cv
633.811 609 619.725 655.425 619.725 655.425 cv
cp
.14902 .243137 .32549 rgb
f
708.975 662.557 mo
634.503 646.964 li
634.503 646.964 641.404 618.523 641.953 618.645 cv
642.421 618.75 696.675 644.384 712.581 651.902 cv
715.043 653.065 716.206 655.908 715.277 658.466 cv
715.011 659.196 li
714.115 661.662 711.543 663.095 708.975 662.557 cv
cp
.317647 .396078 .458824 rgb
f
705.309 664.244 mo
704.146 663.986 702.994 664.719 702.736 665.882 cv
702.477 667.044 703.21 668.197 704.373 668.455 cv
705.536 668.714 706.688 667.981 706.947 666.818 cv
707.205 665.655 706.472 664.503 705.309 664.244 cv
cp
.109804 .184314 .243137 rgb
f
695.767 662.223 mo
694.604 661.964 693.452 662.698 693.193 663.86 cv
692.935 665.023 693.668 666.176 694.831 666.434 cv
695.994 666.693 697.146 665.96 697.405 664.797 cv
697.663 663.634 696.93 662.482 695.767 662.223 cv
cp
f
684.826 659.957 mo
683.663 659.698 682.511 660.431 682.253 661.594 cv
681.994 662.757 682.727 663.909 683.89 664.168 cv
685.053 664.427 686.205 663.693 686.464 662.531 cv
686.722 661.368 685.989 660.215 684.826 659.957 cv
cp
f
710.441 643.444 mo
709.369 642.925 708.079 643.374 707.561 644.447 cv
707.042 645.519 707.491 646.809 708.564 647.327 cv
709.636 647.846 710.926 647.397 711.444 646.324 cv
711.963 645.252 711.514 643.962 710.441 643.444 cv
cp
f
701.618 639.286 mo
700.545 638.768 699.255 639.217 698.737 640.29 cv
698.218 641.362 698.667 642.652 699.74 643.17 cv
700.812 643.689 702.102 643.24 702.621 642.167 cv
703.139 641.095 702.69 639.805 701.618 639.286 cv
cp
f
691.489 634.57 mo
690.417 634.051 689.127 634.5 688.608 635.573 cv
688.09 636.645 688.539 637.935 689.611 638.454 cv
690.684 638.972 691.973 638.523 692.492 637.451 cv
693.011 636.378 692.562 635.088 691.489 634.57 cv
cp
f
682.208 630.296 mo
681.135 629.777 679.845 630.226 679.327 631.299 cv
678.808 632.371 679.257 633.661 680.33 634.18 cv
681.402 634.698 682.692 634.249 683.211 633.177 cv
683.729 632.104 683.28 630.814 682.208 630.296 cv
cp
f
674.529 658.275 mo
673.456 657.756 672.166 658.205 671.648 659.278 cv
671.129 660.35 671.578 661.64 672.651 662.159 cv
673.723 662.677 675.013 662.228 675.532 661.156 cv
676.05 660.083 675.601 658.793 674.529 658.275 cv
cp
f
670.917 629.427 mo
672.499 660.921 li
674.069 661.426 li
674.593 660.748 li
689.895 639.361 li
694.293 665.126 li
695.769 665.524 li
696.27 664.91 li
707.27 650.238 li
703.742 666.106 li
705.939 666.594 li
710.746 644.978 li
709.076 644.158 li
708.464 644.893 li
695.968 661.56 li
691.555 635.709 li
690.053 635.321 li
689.561 635.96 li
674.552 656.937 li
673.164 629.314 li
670.917 629.427 li
cp
f
661.78 654.875 mo
663.539 656.278 li
680.433 635.091 li
683.183 661.639 li
683.24 662.189 683.62 662.641 684.149 662.793 cv
684.678 662.945 685.24 662.763 685.579 662.329 cv
699.982 643.944 li
703.693 666.697 li
705.915 666.334 li
701.87 641.54 li
701.783 641.012 701.392 640.586 700.876 640.454 cv
700.359 640.322 699.813 640.508 699.485 640.928 cv
685.19 659.175 li
682.443 632.654 li
682.388 632.11 682.011 631.658 681.484 631.503 cv
680.956 631.348 680.396 631.527 680.053 631.957 cv
661.78 654.875 li
cp
f
387.519 627.144 mo
641.36 678.674 li
659.659 682.389 678.289 674.017 687.661 657.866 cv
687.661 657.866 li
701.41 634.173 690.114 603.821 664.22 594.883 cv
421.436 511.072 li
387.519 627.144 li
cp
.172549 .278431 .376471 rgb
f
682.75 522.221 mo
720.25 526.667 li
720.25 526.667 744 552.047 736.844 575.417 cv
715.486 594.411 li
682.75 522.221 li
cp
f
438.058 690.111 mo
695.93 607.227 li
713.724 601.563 725.921 585.18 726.245 566.51 cv
726.245 566.51 li
726.72 539.12 702.076 518.108 675.106 522.906 cv
419.908 571.012 li
438.058 690.111 li
cp
.196078 .321569 .431373 rgb
f
387.519 627.144 mo
641.36 678.674 li
659.659 682.389 678.289 674.017 687.661 657.866 cv
687.661 657.866 li
701.41 634.173 690.114 603.821 664.22 594.883 cv
421.436 511.072 li
387.519 627.144 li
cp
.172549 .278431 .376471 rgb
f
438.058 690.111 mo
695.93 607.227 li
713.724 601.563 725.921 585.18 726.245 566.51 cv
726.245 566.51 li
726.72 539.12 702.076 518.108 675.106 522.906 cv
419.908 571.012 li
438.058 690.111 li
cp
.196078 .321569 .431373 rgb
f
445.1 712.32 mo
442.24 766.78 288.75 769.39 282.11 768.57 cv
266.01 766.56 216 753.01 193.45 715.35 cv
187.9 706.08 184.01 695.34 182.7 682.95 cv
179.4 651.73 177.84 624.44 177.68 600.59 cv
177.8 582.73 178.71 562.93 180.54 541.01 cv
181.15 533.66 181.87 526.07 182.7 518.23 cv
189.32 455.54 262.05 435.12 282.11 432.62 cv
288.75 431.79 442.24 434.4 445.1 488.86 cv
447.21 528.89 428.91 600.23 428.85 600.59 cv
436.59 623.19 447.21 672.29 445.1 712.32 cv
.152941 .564706 .690196 rgb
f
359.118 744.792 mo
358.382 744.792 357.711 744.535 357.165 744.08 cv
357.025 743.962 356.891 743.833 356.762 743.688 cv
355.784 742.555 355.397 740.652 356.139 738.487 cv
357.03 735.885 358.84 731.997 359.698 726.667 cv
360.63 724.853 360.95 724.235 361.059 724.023 cv
361.076 723.979 li
361.081 723.974 li
361.086 723.963 li
361.097 723.947 li
361.097 723.947 363.591 720.691 363.837 718.364 cv
363.862 718.141 363.886 718.031 363.902 718.031 cv
363.967 718.031 363.932 719.632 363.472 722.647 cv
362.634 728.128 360.775 732.11 359.867 734.759 cv
359.125 736.924 359.512 738.827 360.49 739.96 cv
360.619 740.105 360.753 740.234 360.893 740.352 cv
361.439 740.807 362.11 741.064 362.846 741.064 cv
363.224 741.064 363.619 740.996 364.023 740.852 cv
363.798 741.262 363.566 741.637 363.328 741.98 cv
363.081 742.34 362.829 742.662 362.576 742.947 cv
361.416 744.238 360.198 744.792 359.118 744.792 cv
348.33 739.667 mo
347.594 739.667 346.922 739.41 346.375 738.954 cv
346.235 738.836 346.101 738.707 345.977 738.562 cv
344.994 737.433 344.607 735.526 345.348 733.366 cv
346.257 730.716 348.116 726.735 348.954 721.248 cv
349.653 716.654 349.836 711.399 349.787 708.25 cv
349.777 707.796 349.766 703.813 349.757 698.435 cv
349.748 693.276 352.883 687.837 355.489 683.139 cv
354.16 686.838 353.478 690.751 353.485 694.707 cv
353.494 700.085 353.504 704.068 353.515 704.522 cv
353.564 707.671 353.381 712.926 352.682 717.52 cv
351.844 723.007 349.985 726.989 349.076 729.638 cv
348.335 731.798 348.722 733.705 349.705 734.834 cv
349.829 734.979 349.963 735.108 350.103 735.226 cv
350.65 735.682 351.322 735.939 352.059 735.939 cv
352.435 735.939 352.829 735.872 353.231 735.729 cv
353.008 736.141 352.776 736.515 352.538 736.853 cv
352.291 737.213 352.039 737.536 351.78 737.82 cv
350.624 739.114 349.409 739.667 348.33 739.667 cv
368.89 738.832 mo
368.007 738.832 367.505 738.487 367.251 737.961 cv
367.489 737.597 367.719 737.198 367.943 736.763 cv
370.764 731.255 371.575 729.67 371.812 729.224 cv
371.527 729.847 370.662 731.895 370.775 733.399 cv
370.847 734.363 371.324 735.104 372.618 735.104 cv
372.854 735.104 373.116 735.08 373.408 735.028 cv
373.54 735.004 373.677 734.976 373.821 734.94 cv
372.795 736.527 371.385 738.344 370.153 738.653 cv
369.986 738.696 369.83 738.728 369.68 738.755 cv
369.388 738.807 369.126 738.832 368.89 738.832 cv
383.8 727.467 mo
382.627 727.467 381.668 726.161 381.399 725.01 cv
383.983 721.013 li
383.988 721.013 li
383.988 721.008 li
383.999 720.997 li
384.053 720.911 384.123 720.772 384.203 720.61 cv
384.209 720.599 li
384.321 720.369 384.45 720.1 384.584 719.864 cv
384.59 719.853 li
384.747 719.573 384.905 719.354 385.021 719.354 cv
385.048 719.354 385.073 719.365 385.095 719.39 cv
385.122 719.417 385.1 719.82 385.09 720.239 cv
385.073 720.605 385.068 720.976 385.095 721.132 cv
385.271 722.092 385.956 723.21 386.862 723.598 cv
387.016 723.664 387.176 723.709 387.343 723.728 cv
387.404 723.735 387.465 723.739 387.527 723.739 cv
387.54 723.739 387.552 723.739 387.564 723.739 cv
387.444 723.957 387.325 724.164 387.208 724.36 cv
385.854 726.627 384.747 727.433 383.86 727.466 cv
383.84 727.467 383.82 727.467 383.8 727.467 cv
.12549 .462745 .564706 rgb
f
411.823 544.356 mo
378.093 541.85 li
377.379 531.411 376.729 523.724 376.186 518.118 cv
382.129 518.106 389.491 517.974 398.244 517.716 cv
402.253 517.602 405.896 520.51 407.094 524.803 cv
408.83 530.991 410.404 537.635 411.823 544.356 cv
cp
.92549 .72549 .54902 rgb
f
356.266 696.634 mo
343.633 696.634 li
361.428 671.277 li
359.614 681.819 li
356.266 696.634 li
cp
.831373 .643137 .466667 rgb
f
360.893 740.352 mo
360.753 740.234 360.619 740.105 360.49 739.96 cv
359.512 738.827 359.125 736.924 359.867 734.759 cv
360.775 732.11 362.634 728.128 363.472 722.647 cv
364.052 718.842 363.956 717.29 363.837 718.364 cv
363.591 720.691 361.097 723.947 361.097 723.947 cv
361.086 723.963 li
361.081 723.974 li
361.076 723.979 li
361.059 724.023 li
360.882 724.367 360.151 725.78 357.148 731.637 cv
356.868 732.195 356.573 732.69 356.266 733.125 cv
356.019 733.485 355.767 733.808 355.508 734.092 cv
353.564 736.269 351.452 736.349 350.103 735.226 cv
349.963 735.108 349.829 734.979 349.705 734.834 cv
348.722 733.705 348.335 731.798 349.076 729.638 cv
349.985 726.989 351.844 723.007 352.682 717.52 cv
353.381 712.926 353.564 707.671 353.515 704.522 cv
353.504 704.068 353.494 700.085 353.485 694.707 cv
353.475 689.021 354.889 683.422 357.599 678.423 cv
365.206 664.393 380.581 634.645 380.581 634.645 cv
385.267 663.006 394.047 702.716 394.569 705.393 cv
394.945 707.348 393.375 715.452 393.241 715.833 cv
393.23 715.866 li
392.398 717.902 391.635 719.46 390.936 720.632 cv
389.582 722.899 388.475 723.705 387.588 723.738 cv
386.336 723.786 385.315 722.335 385.095 721.132 cv
385.068 720.976 385.073 720.605 385.09 720.239 cv
385.1 719.82 385.122 719.417 385.095 719.39 cv
384.977 719.256 384.784 719.509 384.59 719.853 cv
384.584 719.864 li
384.45 720.1 384.321 720.369 384.209 720.599 cv
384.203 720.61 li
384.123 720.772 384.053 720.911 383.999 720.997 cv
383.988 721.008 li
383.988 721.013 li
383.983 721.013 li
379.018 728.692 li
378.991 728.746 li
378.91 728.896 378.491 729.702 377.878 730.691 cv
376.841 732.373 375.251 734.581 373.881 734.925 cv
373.714 734.969 373.558 735 373.408 735.028 cv
371.511 735.366 370.861 734.539 370.775 733.399 cv
370.662 731.895 371.527 729.847 371.812 729.224 cv
371.575 729.67 370.764 731.255 367.943 736.763 cv
367.658 737.317 367.363 737.811 367.056 738.252 cv
366.809 738.612 366.556 738.934 366.304 739.219 cv
364.353 741.39 362.241 741.476 360.893 740.352 cv
.92549 .72549 .54902 rgb
f
394.569 705.393 mo
394.047 702.716 385.267 663.006 380.581 634.645 cv
380.87 636.392 394.138 703.183 394.569 705.393 cv
375.067 645.275 mo
378.088 639.466 380.274 635.24 380.551 634.703 cv
380.274 635.24 378.088 639.466 375.067 645.275 cv
380.554 634.698 mo
380.555 634.695 380.556 634.693 380.558 634.69 cv
380.556 634.693 380.555 634.695 380.554 634.698 cv
380.56 634.686 mo
380.56 634.686 380.56 634.685 380.561 634.685 cv
380.56 634.685 380.56 634.686 380.56 634.686 cv
380.563 634.681 mo
380.563 634.68 380.564 634.678 380.565 634.677 cv
380.564 634.678 380.563 634.679 380.563 634.681 cv
380.566 634.674 mo
380.568 634.671 380.57 634.667 380.571 634.665 cv
380.57 634.667 380.568 634.671 380.566 634.674 cv
380.577 634.654 mo
380.577 634.653 380.577 634.653 380.578 634.652 cv
380.577 634.652 380.577 634.653 380.577 634.654 cv
380.578 634.652 mo
380.578 634.651 380.578 634.65 380.579 634.65 cv
380.578 634.65 380.578 634.651 380.578 634.652 cv
380.58 634.648 mo
380.58 634.647 380.58 634.646 380.581 634.646 cv
380.58 634.646 380.58 634.647 380.58 634.648 cv
.372549 .588235 .619608 rgb
f
387.343 723.728 mo
387.176 723.709 387.016 723.664 386.862 723.598 cv
387.016 723.664 387.177 723.709 387.343 723.728 cv
.352941 .521569 .533333 rgb
f
387.529 723.739 mo
387.466 723.739 387.404 723.735 387.343 723.728 cv
387.177 723.709 387.016 723.664 386.862 723.598 cv
386.705 723.53 386.554 723.439 386.412 723.329 cv
387.067 722.884 387.814 722.04 388.652 720.632 cv
389.351 719.46 390.114 717.902 390.947 715.866 cv
390.957 715.833 li
391.092 715.452 392.661 707.348 392.285 705.393 cv
392.099 704.438 390.864 698.776 389.139 690.6 cv
386.58 678.478 376.35 669.309 363.986 668.528 cv
363.632 668.506 363.277 668.488 362.919 668.477 cv
366.977 660.8 371.579 651.983 375.067 645.275 cv
378.088 639.466 380.274 635.24 380.551 634.703 cv
380.552 634.701 380.553 634.7 380.554 634.698 cv
380.555 634.695 380.556 634.693 380.558 634.69 cv
380.558 634.689 380.559 634.688 380.56 634.686 cv
380.56 634.686 380.56 634.685 380.561 634.685 cv
380.561 634.683 380.562 634.682 380.563 634.681 cv
380.563 634.679 380.564 634.678 380.565 634.677 cv
380.565 634.676 380.566 634.675 380.566 634.674 cv
380.568 634.671 380.57 634.667 380.571 634.665 cv
380.573 634.66 380.575 634.657 380.577 634.654 cv
380.577 634.653 380.577 634.652 380.578 634.652 cv
380.578 634.652 380.578 634.652 380.578 634.652 cv
380.578 634.651 380.578 634.65 380.579 634.65 cv
380.579 634.649 380.579 634.649 380.58 634.648 cv
380.58 634.647 380.58 634.646 380.581 634.646 cv
380.581 634.645 380.581 634.645 380.581 634.645 cv
380.581 634.645 li
385.267 663.006 394.047 702.716 394.569 705.393 cv
394.569 705.393 li
394.609 705.603 394.627 705.884 394.627 706.219 cv
394.624 709 393.361 715.493 393.241 715.833 cv
393.23 715.866 li
392.398 717.902 391.635 719.46 390.936 720.632 cv
389.582 722.899 388.475 723.705 387.588 723.738 cv
387.588 723.738 li
387.568 723.739 387.548 723.739 387.529 723.739 cv
.894118 .698039 .521569 rgb
f
376.405 705.38 mo
376.405 705.38 376.405 705.38 376.168 705.898 cv
375.931 706.416 375.561 709.004 375.503 709.542 cv
375.444 710.079 374.882 721.162 374.63 723.49 cv
374.379 725.818 371.885 729.071 371.885 729.071 cv
371.877 729.09 li
371.872 729.099 li
371.868 729.105 li
371.833 729.183 li
371.572 729.749 370.657 731.86 370.772 733.401 cv
371.463 731.819 372.918 728.864 372.918 728.864 cv
372.918 728.864 374.799 725.274 375.126 724.766 cv
375.452 724.258 376.405 705.38 376.405 705.38 cv
cp
.831373 .643137 .466667 rgb
f
386.715 715.503 mo
386.731 715.046 386.516 709.542 386.375 708.587 cv
386.294 708.025 385.995 700.891 385.822 701.233 cv
385.649 701.578 385.218 703.478 385.151 704.514 cv
385.084 705.549 386.117 716.123 385.945 716.875 cv
385.839 717.338 385.125 718.799 384.589 719.855 cv
384.785 719.507 384.978 719.255 385.096 719.388 cv
385.121 719.417 385.102 719.821 385.088 720.241 cv
385.459 719.722 385.875 719.186 386.068 718.814 cv
386.713 717.576 386.7 715.96 386.715 715.503 cv
cp
f
377.88 730.69 mo
373.394 731.614 372.243 732.94 372.404 734.019 cv
372.471 734.468 372.895 734.798 373.409 735.027 cv
373.559 735.001 373.716 734.968 373.881 734.926 cv
375.25 734.581 376.841 732.374 377.88 730.69 cv
cp
.890196 .815686 .733333 rgb
f
367.057 738.251 mo
365.799 738.196 364.532 738.332 363.414 738.415 cv
361.359 738.567 360.753 739.147 360.545 739.498 cv
360.442 739.672 360.621 739.951 360.893 740.353 cv
362.242 741.474 364.352 741.391 366.302 739.217 cv
366.557 738.932 366.81 738.611 367.057 738.251 cv
cp
f
390.937 720.63 mo
390.026 720.583 389.093 721.045 388.282 721.295 cv
387.385 721.572 386.801 722.256 386.934 722.916 cv
386.996 723.225 387.239 723.5 387.591 723.739 cv
388.476 723.707 389.584 722.897 390.937 720.63 cv
cp
f
356.267 733.126 mo
355.009 733.072 353.742 733.208 352.624 733.291 cv
350.569 733.443 349.963 734.023 349.755 734.374 cv
349.652 734.548 349.831 734.827 350.103 735.228 cv
351.452 736.35 353.562 736.267 355.512 734.092 cv
355.767 733.807 356.02 733.487 356.267 733.126 cv
cp
f
363.84 718.366 mo
363.9 717.816 363.954 717.954 363.915 718.731 cv
364.05 718.232 li
364.705 712.714 365.428 705.95 365.428 705.95 cv
365.428 705.95 365.428 705.95 365.164 706.456 cv
364.897 706.96 364.384 709.522 364.296 710.056 cv
364.228 710.451 363.558 716.649 363.062 720.753 cv
363.447 719.954 363.759 719.111 363.84 718.366 cv
cp
.831373 .643137 .466667 rgb
f
432.246 586.222 mo
430.786 592.712 428.976 601.032 428.846 600.592 cv
425.446 589.212 407.406 529.792 405.066 522.082 cv
404.906 521.572 404.436 521.232 403.906 521.232 cv
378.416 521.142 li
377.716 521.142 377.166 521.732 377.206 522.432 cv
377.596 529.042 379.396 559.682 380.436 578.752 cv
383.576 636.362 399.786 708.362 400.226 710.272 cv
400.246 710.342 li
400.356 710.712 401.416 714.272 403.476 717.932 cv
404.066 718.982 402.936 720.172 401.866 719.612 cv
400.016 718.641 397.856 717.381 396.106 716.002 cv
395.506 715.532 394.766 714.222 393.996 712.342 cv
393.916 712.072 li
393.456 709.252 385.136 662.182 380.586 634.641 cv
380.566 634.661 li
380.176 635.432 369.296 656.482 361.426 671.272 cv
361.426 671.292 li
343.996 696.122 li
343.766 696.442 343.396 696.631 343.006 696.631 cv
332.986 696.631 li
331.846 696.631 331.336 695.202 332.216 694.482 cv
339.606 688.452 360.066 669.141 376.076 629.462 cv
376.146 629.292 376.176 629.102 376.166 628.922 cv
375.936 625.622 373.726 593.802 372.926 579.162 cv
371.736 557.442 370.636 542.322 369.716 531.882 cv
369.196 526.062 364.896 521.272 359.156 520.142 cv
359.106 520.132 li
356.056 519.522 339.676 508.652 337.996 505.272 cv
337.476 504.222 338.586 503.112 339.636 503.652 cv
345.746 506.822 356.056 511.852 360.586 512.752 cv
363.906 513.422 377.906 513.502 398.046 512.962 cv
405.406 512.772 412.076 517.552 414.276 524.592 cv
421.286 547.022 428.656 572.972 432.246 586.222 cv
cp
.113725 .423529 .517647 rgb
f
408.777 749.1 mo
408.774 749.1 li
424.792 742.588 437.412 733.965 442.589 722.577 cv
442.592 722.575 442.592 722.575 442.592 722.575 cv
437.416 733.964 424.797 742.587 408.777 749.1 cv
.603922 .498039 .298039 rgb
f
296.802 768.452 mo
321.973 767.534 373.579 763.409 408.774 749.1 cv
408.777 749.1 li
373.581 763.409 321.973 767.536 296.802 768.452 cv
.670588 .552941 .329412 rgb
f
286.18 768.675 mo
284.029 768.675 282.623 768.631 282.106 768.567 cv
266.012 766.554 216.023 753.005 193.464 715.352 cv
193.45 715.35 li
193.45 715.35 li
193.45 715.35 li
193.231 714.984 193.019 714.612 192.805 714.241 cv
192.721 714.095 192.634 713.95 192.55 713.803 cv
192.158 713.114 191.774 712.417 191.401 711.712 cv
191.337 711.591 191.276 711.467 191.213 711.346 cv
190.914 710.774 190.62 710.197 190.334 709.615 cv
190.21 709.364 190.09 709.11 189.969 708.857 cv
189.746 708.391 189.527 707.921 189.312 707.448 cv
189.185 707.168 189.058 706.888 188.933 706.606 cv
188.718 706.116 188.509 705.622 188.303 705.125 cv
188.198 704.872 188.09 704.622 187.987 704.368 cv
187.703 703.664 187.429 702.952 187.164 702.232 cv
187.051 701.926 186.944 701.614 186.835 701.305 cv
186.675 700.855 186.517 700.405 186.365 699.949 cv
186.244 699.588 186.127 699.223 186.011 698.858 cv
185.879 698.441 185.75 698.021 185.624 697.599 cv
185.511 697.223 185.399 696.846 185.291 696.466 cv
185.165 696.018 185.045 695.564 184.926 695.111 cv
184.787 694.582 184.651 694.051 184.522 693.515 cv
184.386 692.952 184.252 692.387 184.127 691.815 cv
184.108 691.727 184.089 691.639 184.071 691.551 cv
185.307 691.681 186.543 691.797 187.791 691.9 cv
187.796 691.901 li
187.915 691.911 188.04 691.921 188.159 691.93 cv
188.185 691.933 188.208 691.934 188.235 691.937 cv
188.259 691.938 188.29 691.941 188.315 691.943 cv
188.359 691.946 188.404 691.95 188.447 691.953 cv
188.459 691.954 188.469 691.955 188.481 691.956 cv
188.542 691.961 188.598 691.965 188.659 691.97 cv
188.671 691.971 188.679 691.972 188.692 691.972 cv
193.031 692.308 197.432 692.48 201.89 692.48 cv
216.421 692.48 230.765 690.632 244.291 687.064 cv
251.802 685.083 259.061 682.572 265.957 679.553 cv
268.752 678.329 li
267.08 677.954 li
284.532 669.977 298.407 655.784 306.033 638.157 cv
308.283 632.959 310.263 627.894 311.491 623.73 cv
312.815 619.24 315.825 615.885 319.454 613.38 cv
323.762 610.407 326.425 605.587 326.429 600.352 cv
326.429 600 li
326.429 599.648 li
326.425 594.413 323.762 589.593 319.454 586.62 cv
315.825 584.116 312.815 580.759 311.491 576.27 cv
310.263 572.105 308.283 567.041 306.033 561.842 cv
304.654 558.653 303.07 555.577 301.296 552.629 cv
315.116 560.937 326.073 573.408 332.54 588.35 cv
334.79 593.55 336.77 598.61 338 602.78 cv
339.32 607.27 342.33 610.62 345.96 613.13 cv
350.27 616.1 352.93 620.92 352.94 626.15 cv
352.94 626.86 li
352.93 632.09 350.27 636.91 345.96 639.89 cv
342.33 642.39 339.32 645.75 338 650.24 cv
336.77 654.4 334.79 659.47 332.54 664.66 cv
324.91 682.3 311.02 696.48 293.57 704.46 cv
295.26 704.84 li
292.46 706.06 li
274.529 713.916 254.138 718.325 233.222 718.915 cv
257.686 739.264 289.473 747.446 301.698 748.975 cv
302.215 749.04 303.618 749.083 305.771 749.083 cv
324.963 749.083 403.598 745.616 442.592 722.575 cv
437.412 733.965 424.792 742.588 408.774 749.1 cv
408.774 749.1 li
408.774 749.1 li
373.579 763.409 321.973 767.534 296.802 768.452 cv
292.361 768.613 288.74 768.675 286.18 768.675 cv
.12549 .462745 .564706 rgb
f
184.334 508.423 mo
185.849 501.858 188.124 495.814 190.988 490.257 cv
188.124 495.816 185.851 501.856 184.336 508.422 cv
184.334 508.423 li
190.997 490.241 mo
191.015 490.206 191.035 490.167 191.053 490.131 cv
191.035 490.168 191.015 490.205 190.997 490.241 cv
191.072 490.095 mo
191.074 490.092 191.076 490.088 191.078 490.084 cv
191.076 490.087 191.074 490.092 191.072 490.095 cv
.819608 .67451 .4 rgb
f
184.336 508.422 mo
185.851 501.856 188.124 495.816 190.988 490.257 cv
190.992 490.251 190.993 490.248 190.997 490.241 cv
191.015 490.205 191.035 490.168 191.053 490.131 cv
191.06 490.119 191.065 490.108 191.072 490.095 cv
191.074 490.092 191.076 490.087 191.078 490.084 cv
197.544 477.615 206.978 467.602 217.442 459.649 cv
209.559 470.326 203.916 483.201 202.288 498.64 cv
201.972 501.637 201.671 504.597 201.386 507.523 cv
195.603 507.539 189.912 507.846 184.336 508.422 cv
.12549 .462745 .564706 rgb
f
266.442 678.242 mo
284.194 670.321 298.315 655.998 306.033 638.157 cv
308.283 632.959 310.263 627.894 311.491 623.73 cv
312.815 619.24 315.825 615.885 319.454 613.38 cv
323.762 610.407 326.425 605.587 326.429 600.352 cv
326.429 600 li
326.429 599.648 li
326.425 594.413 323.762 589.593 319.454 586.62 cv
315.825 584.116 312.815 580.759 311.491 576.27 cv
310.263 572.105 308.283 567.041 306.033 561.842 cv
298.315 544.002 284.194 529.679 266.442 521.758 cv
247.617 513.358 225.521 508.521 201.885 508.521 cv
133.101 508.521 77.3407 549.477 77.3407 600 cv
77.3407 650.523 133.101 691.48 201.885 691.48 cv
225.521 691.48 247.617 686.642 266.442 678.242 cv
.92549 .72549 .54902 rgb
f
76.3385 600 mo
76.3385 549.008 132.659 507.522 201.885 507.522 cv
224.487 507.522 246.642 511.992 265.957 520.449 cv
268.752 521.672 li
265.775 522.34 li
263.351 522.884 260.918 523.341 258.565 523.783 cv
247.883 525.789 238.659 527.522 235.024 535.998 cv
234.858 536.387 234.777 536.781 234.777 537.203 cv
234.777 537.204 li
234.779 541.781 243.934 548.211 254.535 555.657 cv
271.32 567.445 292.208 582.116 292.418 599.989 cv
292.208 617.886 271.32 632.555 254.535 644.343 cv
243.933 651.789 234.777 658.22 234.777 662.796 cv
234.777 663.219 234.858 663.614 235.024 664.003 cv
238.659 672.479 247.883 674.212 258.565 676.218 cv
260.918 676.66 263.351 677.117 265.775 677.661 cv
268.752 678.329 li
265.957 679.553 li
246.642 688.009 224.487 692.479 201.885 692.479 cv
132.659 692.479 76.3385 650.993 76.3385 600 cv
.368627 .254902 .184314 rgb
f
201.89 692.48 mo
197.432 692.48 193.031 692.308 188.692 691.972 cv
193.027 692.307 197.432 692.479 201.885 692.479 cv
216.417 692.479 230.764 690.631 244.291 687.064 cv
230.765 690.632 216.421 692.48 201.89 692.48 cv
188.659 691.97 mo
188.598 691.965 188.542 691.961 188.481 691.956 cv
188.539 691.961 188.601 691.966 188.659 691.97 cv
188.447 691.953 mo
188.404 691.95 188.359 691.946 188.315 691.943 cv
188.36 691.947 188.402 691.95 188.447 691.953 cv
188.235 691.937 mo
188.208 691.934 188.185 691.933 188.159 691.93 cv
188.188 691.933 188.206 691.934 188.235 691.937 cv
187.796 691.901 mo
187.791 691.9 li
187.796 691.901 li
.101961 .380392 .462745 rgb
f
266.204 677.757 mo
265.775 677.661 li
265.706 677.646 265.637 677.63 265.568 677.615 cv
265.635 677.63 265.703 677.645 265.77 677.66 cv
266.204 677.757 li
244.653 672.745 mo
244.647 672.742 244.64 672.74 244.634 672.737 cv
244.641 672.74 244.646 672.742 244.653 672.745 cv
244.625 672.734 mo
243.035 672.09 241.57 671.334 240.26 670.416 cv
241.571 671.334 243.035 672.09 244.625 672.734 cv
240.245 670.405 mo
240.237 670.4 240.229 670.394 240.221 670.388 cv
240.229 670.394 240.237 670.4 240.245 670.405 cv
234.936 663.774 mo
234.829 663.459 234.777 663.137 234.777 662.796 cv
234.777 660.995 236.195 658.907 238.56 656.583 cv
238.564 656.582 238.566 656.581 238.57 656.58 cv
236.2 658.91 234.78 661 234.78 662.8 cv
234.78 663.139 234.832 663.458 234.936 663.774 cv
.756863 .596078 .45098 rgb
f
97.2304 651.034 mo
97.2274 651.031 97.223 651.026 97.2199 651.023 cv
97.2242 651.027 97.2261 651.029 97.2304 651.034 cv
97.1553 650.951 mo
97.1415 650.936 97.1307 650.924 97.1169 650.908 cv
97.13 650.923 97.1423 650.936 97.1553 650.951 cv
97.0484 650.832 mo
97.0255 650.806 97.0054 650.784 96.9825 650.758 cv
97.0042 650.783 97.0267 650.808 97.0484 650.832 cv
96.9579 650.731 mo
94.4079 647.879 92.0672 644.919 89.9501 641.86 cv
89.9501 641.86 li
92.0678 644.918 94.41 647.881 96.9579 650.731 cv
.819608 .67451 .4 rgb
f
201.885 692.479 mo
197.432 692.479 193.027 692.307 188.692 691.972 cv
188.683 691.972 188.668 691.971 188.659 691.97 cv
188.601 691.966 188.539 691.961 188.481 691.956 cv
188.47 691.955 188.459 691.954 188.447 691.953 cv
188.402 691.95 188.36 691.947 188.315 691.943 cv
188.289 691.941 188.261 691.939 188.235 691.937 cv
188.206 691.934 188.188 691.933 188.159 691.93 cv
188.038 691.921 187.918 691.911 187.796 691.901 cv
187.791 691.9 li
150.027 688.778 117.28 673.266 97.2304 651.034 cv
97.2261 651.029 97.2242 651.027 97.2199 651.023 cv
97.1984 650.999 97.1768 650.975 97.1553 650.951 cv
97.1423 650.936 97.13 650.923 97.1169 650.908 cv
97.0955 650.884 97.0698 650.856 97.0484 650.832 cv
97.0267 650.808 97.0042 650.783 96.9825 650.758 cv
96.9748 650.75 96.9655 650.739 96.9579 650.731 cv
94.41 647.881 92.0678 644.918 89.9521 641.862 cv
112.6 658.16 143.53 668.2 177.6 668.2 cv
198.996 668.2 220.003 664.191 238.56 656.583 cv
236.195 658.907 234.777 660.995 234.777 662.796 cv
234.777 663.137 234.829 663.459 234.936 663.774 cv
234.961 663.85 234.989 663.925 235.02 664 cv
236.207 666.766 237.988 668.814 240.221 670.388 cv
240.229 670.394 240.237 670.4 240.245 670.405 cv
240.25 670.409 240.255 670.412 240.26 670.416 cv
241.57 671.334 243.035 672.09 244.625 672.734 cv
244.628 672.734 244.632 672.736 244.634 672.737 cv
244.64 672.74 244.647 672.742 244.653 672.745 cv
248.649 674.356 253.437 675.256 258.56 676.22 cv
260.854 676.648 263.215 677.094 265.568 677.615 cv
265.637 677.63 265.706 677.646 265.775 677.661 cv
266.204 677.757 li
268.75 678.33 li
265.96 679.55 li
259.062 682.571 251.802 685.083 244.291 687.064 cv
230.764 690.631 216.417 692.479 201.885 692.479 cv
.301961 .207843 .152941 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.1.0
%%For: (Seriy) ()
%%Title: (watch tv.eps)
%%CreationDate: 6/6/2016 3:51 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj9?5dcgXWSnJ%TZ]IEPUR'Ec&s*58@mU6J!8//tC]P%&i[$B@+5Yn(X/]B%bLfq@,\*>(1FHSQV=(AOg3_6&>e\m,<2trL
%I.OPlbd(_]R:U!J:WD@KouDREk+5Q`K?e/;6F5IJ#EA.;]3,V)S]tcKg$YqR2Lh#2RD%$/HrJ2#%r/N7T:()/<5+#uE]a2p=KMbG
%B"MC7Ajk2oTQ<F1^[Am9ciAMA\3/HD"6_/sG(C9>S,,;'cC8)@Pl@0Ppds3+PN:_eFD^g?_JfEF8u@&Yr+G!OcO8B!DF^XCO+LE3
%?0YI[%HqI__r/:TpbGbRc:YcR=4*4gZ/B,9+bNK?B(fF7l-N?1Lg]kIV>jJD0eWT]s"-&)IuJRD'7RAG:<$<4*#oZs%pL1_/)t[F
%g=?e=.ifaCSqt>44V$bZ>,`If>RJZso$"E9Ac<8c_u(&iPCD)'1Wu@CZU/2iAQr;ETIe_ua48hI&-P4t_4RcrB0iL0[.R\eg>/Oh
%Ipl*?LS=nAUVAeTeUmM\7^WUk-OAk8ak1B0Jf<Rf%2<S(RX0TbqPc309C;>D$Nf(aol)Na1LASSb?fV+oJ8b3A@e!'<mWgD^*-C@
%RHI[Tf67(NkPA?%jtK_:#Q=s+c=P#eh2Eqa8*OS%$Tk78em2[1fNQpg`;)FoU"sWgc`<%*)qnEfIA,bJ]3VPWi[jJUVg_Ik=jQm+
%L]93i0FZcTcj2X?p;uHgTbpgRmg-P^C/d*\Fe"R(rg=:I#gel@o3?bas$>O.'>9^oK`EJRS+&\NJIVYLT9nh)n)U.mK.j^gc!G1`
%ERt'J5P)EXo/+P$$-M(9)s4Ynfg#E>Ik5-m5<61NaV!)Oa+]"pWIN]$0[NT#o[DbWI\0JE\5IgmiWiceRff02*%@TKW5!/Jg0,=Z
%*/n#^aJa%9=o'rPS`Y4%!+;bb#!RV%.sd:0BuRH!L5`X2$2?(lp^I1uRo+$>21>\9AdeK;c))ZBTN5flg)9bH+811#*eqLrNh-hm
%L8<%l)8JK++e"O,MXEgW84_*UQ\oD%K,2[/og_"6&cEpdN3CZO[9IKQBnB`hG5'<pq\&n`W<B'Mj.pD]kVD@f0D_0gd!sL56)f23
%ShOhW3raR[R8a^F*9(lXinpRup^sHrdL`iiWn"-4m8E8E>0c3`^!9(/\Cmt^![;JKVF%h6%+F-LZOen06CH:hM19IpQ<6`6RIh-&
%88ZKekQ^FoIR?iK0BCW+@N-X\N\!Wk#]@Gs.>%P#=c&aH[Bc^DM6sZ,Yna+bi/EXmJsG#h<5HrlZ/F6n*;s"A;n6*q9kA^4Ib%;a
%[;)U7A&\*8QnF8N`JnAY:_5(C:ueLCJr_1d)'alD>**Inn-bP=_\$Y6<Z!gcY(gp(I1b-.C:P*"rTnWY<8RJM9]OPcs"%+rK.$M"
%.Xo_j.p3-LEC3L.Yipm7L1K%r@2s(5jc*ksilOTV4f^I`NQ<+4WnfpoPUoCt)oa:p1c;nJiFK<jO\S;6h!e07!C).6fSk-CQUf'5
%bYhdh^"J,WTSrWk9(Y-M$@fbDgO0C-%"0a-bF"]^g-8)T[?d6\X'TSWQch'hmHSDh)aLL/"GjU3]@;m?^8TU4m@Z`^G%P<`d>boZ
%+5NP+Do.k4bd-@H1+PlAB]D43oV5COBrm5cH@F6^K%DF$'cKm[+tcSH4+C9]h2<!&BY8=>PD5@;;R#]CpfM3-l=Z??7WWZ@\j@]n
%'YG`ra2MV-k6/H.'fp&?DHuL\NTRZQ8\lYr9sP?09YnWm8/b"G3GBhGgM<GT+D3//UIRX620(CF`lGqmUNt@k66nIXSIXUei@g0C
%-EtN;Y??dEB'cnS$&\-.HOlu2NV)r'O,H#F1hVeSID=PhrCAeU-M"Zk6M28A<]fO;C2"lR&2C#d)+HEoNon_Q/3"\^1^ohV+8N08
%$<B#S1"g@Hm1Q4?.4-?1SSTaU2MPpJ_AslP\/75@p=eV9>8=]sE0Q6RZ0TSFZefG?.&T_30#*5MMBtb+YYkbP12F5?D?ALZATkE(
%mbc+Pgf\65$So?#FpXo#g<4*91X#0_,.C3B;45k^/ql`^V092pDO0#$;S-(HpHP8'E@ZYldHR#^9][l8gf[,:q_O,DSI08E]>6\Y
%9BVVtdD>JKL2`>U\E?=pS6s"O1lZL&4/b)fUkmqp!,CcZUc(C;_/0Hje])QTR0]?e6)e)PV/auhm^Q@<AWR>GU7P^)$R<4J_]K\M
%SQ;lH825,G;QYm>g/Dr+UQ."*9Z'c->jg-hGa]c"F;`0[@LEmE<_B]s>H1Z&\FVZh?P2SUEo[qWFW-dJ$6D(]\6*0RGc@JoI[+oA
%]i+7Dda&W/5^qH>[8U\S$?L#^P@85bT(uR-UL3M/%6h\u2*:prRT''M-=dJra-sl0)V'-`ZSmBf^._H2X;$7.<BA!_WY0!>O#L.c
%eQNcc?^iL*Kq$QF:b25M$Y:!qcEGMcITQJW]@?.gWhi163*2;\")_D`n&C'eM(eh(e<ih:A*'rE\)/-:Vl$unJ$VK(Ufi6_"iJMl
%[3TfK&8>t&9aVqr/Yj\;E5reVVr/_X]t,2Y\OsblPD0<TN*0;qg:aEih)$0`$GBs7d!4Puj3=+:<;FTLHLsGf,c>W*ieDM9/M">X
%62Nd[_&VVFY+fC6L-/[-Suj19l8@W:kDEkeaH=!VerXN[aM3j)>X:!=W!:MtOCr@M^T#F4>=0IIa_VF^2aj=KMJQL4.AP;D]('Um
%Gd_KP>;r.U)c'"i^J[3VlZIg(AcnPp,E7XfH"(TP6!D5fK'53hgm5_s(KWic?L?.AeaPCS+=rlLEoe"jofk.=W$-k)lF"q\-r2pC
%8b<=uI?X)][!LURVj*XF=bSE,d**tMA$h>s9`(nb2Ck!9b%.h6=VqS==da(mb@E)s?TW026":@u`*a%%=7s5:p7p?C"l6S0:g%SB
%99#W\j0SU8(hQL<W+H5kpa]qKbeP6gNUTj8<;LO@hFhtp=+iTr1/4H7Ko"Q,pRj,::-pAVf[\s8</Nh3PFf781;kF)XhS$NmA)3M
%?%$7"8ru@E6>CF8'ta=`pd2AsC$]]8*i5%G=nu`ICkR*gf(1,MAlNDsQW`9Y<d:#I?=nnX=lEpmGkj9]'p`!%iC-gVW;\P&]M*8K
%3\.kuV!p.R39g/'o9ksIdZI:rVRhA$9/!?U4i_P\PbQJ2%caoidsYXnRS*is(KO36&!MHN72d4Z(KQKOZ1L-E-Jpoa`]Mtr'WZEg
%9%BVN=>T,"_$4c=*%)t%R<7UO]?P&AS`:1.Xbh7`koIprpr:u=::KO)V]3kGlisB@%8LE6O7:osK%Eug9Z[ZKQeC^?YGl[h:!dHT
%>j+8TKXs)M0@Sn^^3!Y'b8+EYjkAuY?E2!;NE^F*E;VX2ZR/d`Dtj-:;nRa(MD)ZQ4[l@'[21&=a>cQ3WPA-NKb^P^n_BBa]'_C;
%Up9$H0tn7qQ>C8RSt1"U/o!a8W2/2Q0K#_#0m@u'fD]pj9X`V8X#6@][Inq?ZrSY`Y%8<Gfd`8fh4L`K2H>.r1Yo#HKf:Wp9=_rh
%C@io#5LZ>r723D6e=p0VrTs!_T.*l38?4GNk[9?MX`I@>2#l@D?++U]pC5@7oUEQVrVjH#F]rg#%qX)4A5BRjRU,1PbC%a6Glr$o
%%neo3bfR44Q5[[<=ajHI1bko)DT-`[2n4iZ3j7:0ceh^Y[PJ<YAte&\qWYI\1TIdSBKCa>=\SJ2$(7>,T>VBAlid..LQ9J3h>1UT
%m#^"Un1a*^jCTd\-eLf3:688SJ"3&PT1nE-4$c%Jc>e#ZI-)Cr-UF.%#C-\QOO&=7XZA`Hp\%jhQdp(Nm*/:g:YO%j*nrD4oC6%a
%QqE2pCR<3";XJ&%RO3M`c]+0IW;1/+(JhQ%Cc%3aeS]Zb\l@\U$K<(-CT24*:10-@\ZD'*@ICMP$&\-.HS9&sdi@*-_]N)\O<Qc%
%o]l=HIQp`TR#*pXVN-#jdp<If2MJE'[[:nWDj,%[lQp3s`>o[l@Dc6fdf0dQ'L>30qfgmZ0_(ShnP3j=T'fjiUM5Uf"<H[Y]2$s)
%gJ$Dj90R5deG&i9`/R]NVZ)U7jkF`G`c?shHfAtcpjH/>Z*:S70:dk=VtNpV,nmb*Dr'<5[jbE(\O$-RnKn:'&o`FV6+D?_@(J9/
%Y\]aA*n(s$hb<=48r6H9-CctGRehR2[MeFUB0j.3D3(t$0kiH!/Y/c,h5R>Jg6iY_I:DtGg@A_THd(':fP?]^Vp^OZ-6^RTN0Us@
%@^\E5ZZ1m@]D]`#5M"(&PiCUa!ls\+UN;a`%1Emuo=(mpET;ZU'4:FB=l;:TEO;11nOCs5d`8$6Te12n>&BSar*=T=D6a"%>:b7;
%"h3dY8cM0H[UE(Ke&KqAY/0kdU^26aqrN%2E9D08(Vd7n[c-tIT3+dn?o$L+X8&-:%DV#^Zs#5ibhRBJh[\qr+"7U^3:L@]I@m.8
%9t32DCH(Qn3$G[!E?\=@iFWuEg`.CPeOCiEX#<j]lIZSM6)e'ZZX@M,Nf1;%:<C.C0'rN_Yq_EZ55]D?=fXH4;MqLqbGABfYF-^`
%1f24/;)M7mA#W`$eU+]%RX.X/H!G0:;Ue<QNXM($Q"mcheEA:TMGV@4'd"2/RCc?q)3)cubseW*BBa%9<Zi[QQJ*d?-\[sDnG#.X
%OA_iW:Sf8MY7NMW#ISI69$6PS4dmipR$-Irbn_1/V:3i?5t+3]hhR3kUadofkE@-,ohK=iiu>BHKchB.Z>BI%=skcENSO41oNsS.
%2GSt<nQ*l%cM_@G99E?6G+D8\">cU<l.g6K6WK;8dPYI4Kf%("h&COJh>`RoV&4f-WD`,[.K"sWisL;eeSE;Me"*?5QA]=p\iZ\?
%DI#)7c1;W"AM_O(b:T?R=hYS;0XH-_b;ZbTPAg8aCX%hSOGb7;RsH9sE=%(TG5eRD;SDcqj,JtbANL>WBeCDDj..F;[=V'5[b?uo
%9pa"fbE_WdAbP(!dQL1.Zg.gEG(O?\c&S]o;]@:3Y+M/;4c&@Zml5.h/uJW4r,&rd.LcoPId,?6H2VH):]'P.odRUc.f&YpeWfMn
%mW<rUH\&E<)d>isHY)qn^Tr4[9'_>BkpRsdf3'J=\[8FP2J9nuAk3q@Z16]cD#AL9Cp8"tr7W.cGJtC(c0FYte[%u4^SDu+nXC_$
%4-l:m*1&gWmL(=Q0B=s7R(\UQ\+;:i_bPdgB7)hsl5+KtQBuU:hH'S>k8^BS$,0!-GA=R9bhg8u`UiV(WL3&XRU$SLj%Uu;Fhc$T
%3fOiO+D4n9`ZDD0[VAL3J"LT.Qu1CK/HPe9]jS<04o7CGZC@Gm@+&ZL[N;!,j_D7W=(BPBm)Dk>`dN#_nJ'2@p`>\"h."/Q^,C(b
%7IYIB5"T`lF]Qm,H`f0*BM;qbm+m8N7N*=['oe'pH)FC"B,-D/7:XbXAld<H<A^SLU1)l\MFK(=VPKr+$gsba+00&$XdF@f##h/)
%'A#3s:`!;,q5^^iRonX^h3F#gW%6<@[u/O2,6oH.Hqa!J\CGN:Z>T,HYu9Z<;tj<D<3P&CY0Pn)0NeW,DVGc?FBUIP)<^A2$F>+u
%QLE)h]d_;%;?WStHuJ$9]j(7ek?FPJV:]$9V$UK9c=RC?/E*'EI'\KEQLOik-[`Di\p8IW'#*J\Nod7_ppdn2+1"*-mCIW<1B)\P
%0$d=).rKQsa0I.;U<h](1IWJBKQ#<:9m\WCQ'Yj+UVlPX6uVk_UR<!hRBbYB/<ataIT+'p;L+ZJYC@u2]a\UFDM*85aD.SB^W1<N
%eF-<).=Us4/R1b<-!?G7laM6n0L[r`V/(W2Fr*j.>2X+`lt'oOcS*#e@()U$\#1FhabrpJ="94*>tSgaC@[]EDh[L>9d*QdA$'Xd
%l(hRAAW4ll;POiRNe1G2:006_qT-2A4%unsG]Wke4u-_g;lFkC[8K#`#EA.XWATqnVd=u;;QPaN7AaR+_Z)Am5-i,Id1"LE1]_<H
%37/L]idFd`RbIE/W"dHL916IMDkPpuc:CX;I7s/eenMed/!Z&f][iu/%SVr7s5J)6e$qR&X;qHD9i3i4X4D%M2HSGK2k_Zoa'$#W
%:W!F2NJii3EnP<,M=$blius,92V<jIInA^^jK&lA>YN_KNM)NqB")f[<o.Vh\`h+"*>_Y6Ag<!q.$_uhHLI;>'T)'0ON5=@4.t(V
%"_X)m[9NTlMQ[;.C^JUqKZ@>Q#gQ?P()h+-<\FV,Pr':s.]dWp;6'RtqO)pMLjlq3G02d9@?*4O-oJ$t<8,(Y]-t/m(U>[NMVCgC
%5pB7A9fl5#0Jb<BMqLji8ZL+6P,q7,oio-DjVH`@`_r'"Vf".[q)7V/8]/cZ\=P/,Mio9kS<CQ6WJ#$WpS-FMk?5MnHVr3F1Y[gC
%gPbW@GamAmPR5NU7Vk?#SU443=i?0k;7C6m8fD<=-).!u7Ca%6:W-S(<&-B%>(<%8U8240>."91Y0p#(SsiW"Gm!FPk?LdVMmH=K
%n=%V?oNb3H4VR?iW>Hud\*@!]\rY+plLo)+MbX2R[jt1J7nZb_S<gd:K(a06S^sikDX.ZSDg(Nlbg?;E6^Qe4laP]sV&4fPTplq2
%R@s^M2j`9-f#^sf&fEf`E<MiFCc2crPqFo#]WC(;gg=lHo>c>e[cfeKI<SNR_9[P@!>oZRV0Ntio'KcH,-t?cPg7+@m^F]3j/=Ue
%lJ'Q]X]@Sd_P0ngS'BXor9T\%#(4+iOND6hJ;GO3^O`d9oH=IW.)bRVL=u3KbG'L+J%qS(?[\8VGE9="CI&3TiC0O;B7p1MSX@_\
%W:Gcm0pK,2ED(]Or<hAshJ6)"V`;G:;5uN0$Dj]?%d@?J3(nlG46i-SQT'CF9lKi*Vcli;eS\[tf0<fp+1;'U7UG@9KJ4atmU8q0
%Jll(;>D9#27P?:NJ+%jcnK0:Q*'ScQfUjjuRD$hbcW6q6#CLfQ?c)7=[ZA"d!H"Deg56RX3_.H=X;mJYh19t8CI+^N@P"\FJQbUM
%@&IGL+?aUO39AbuZ.WqmHI_F;(6T4.,*B[Or[/oqW-QbXbl$d%Yk95SlrWg+!c0h;d!`^Rg>'!%`:gNr0d-[JP`E+2LC^!F1?Qsh
%MtnRgY(Y'W5akfi1ds7VH<IgB4M`gXIg+pT&u3/L;ih"q3l?X<nsQ&?g$+oqrcND<Z7OTp6d2>ZD&D:apR*6G2;hW`G.?qW#BsdX
%B6H>LSJF"C4gWTn4$Bq!;]n`BLSpWrBfWNK1HRb+e%a+%B>Q7Opts:$c\uf],OE[6nB;0aN:="YQ<h=SMNNV9R?1Nq(<g4t`lD=f
%%`ZnVn:Zd.fc4I5)^B.EFdP7sg,#e#b%gf0X$*fC1TUK?XL9K^+j^e4;Fh=X[DSiZ&kCODI87`lL'rfn'%T-(PJWS@UHLEeBoFsZ
%Ak%,ZZtDl*f,8Giq6l2Ng\(f7BVTDkIC.4ajTl6HE!DW^V2@-4C.hr:4tBOWN:of;rUH(^nrr,Yo*M,kpu(-Rn..\jpqjGs1P^JL
%>Dgb(AO!3G>IE+h&$=*M<.QkuPmIf>D=ta8\E(#(alaXtR=uTHR*E,`#j.,7GI\ZL0FL>E!49>,i1>*ADD`o`5/kng*Y1lNT\Bni
%EsJV=OLFUt(Wjc#2i_Cs7qQbeZcsLm_NL#LdQ#Gm4pJI)+#D6dj<$2'(]O3U6(*JIK5=]Xif]I-SnaU;QK(nR5.6(%)#VWHfU+1^
%1#$`Q0kNq88Hp%j%\;uA`t`@5ZF6J0f<]R/*g5fCNH#1Pj#/`+1I#U_np&8U@dj,aDG,Y"3A.cPR[*BcMV8-_TJ=E^a.g")#:u4"
%cZ<IQfE"4>:ZVZ4GGHI>9OO"L*0q%Y>X/S:[%V&f/Gj>7YU*Q/-'QDTLfR)@Z@52G=Fm[h%,5/?JRbpF3#?R=%eiL.4^hKr95Au/
%9E84!gEcsfLU1fPgZp7]Ngk3rBqRZi=BKRd+>T6Q_[#eSBg!&tPW%pT_o\d07GT51n:+<!^_]g_,IL:j\HarH.]NL%4u15CQW"<2
%=],g]iBY75Q]lnq.MXk#m0X4k_.Zqs$n0$6*S[Fp;:"ndY(ek*1]l8r8J%,bl8BZW<Ot._18^<s2#FHC8J49]JE,'0P"62^H5r_9
%!26@?>eqtc7)`,G`s/doih3,Ee9T]6/`;-$iaC"[&l0<T?'';'-`54t/M]<f1de73F?%MKfI>,jCP5h%Ec+6kW3KJqV+Mo%./3k/
%a>51"L9\RoE.N-Y6huZFO[6$QN<bUcaf!QXP0\@eJRY*\d0GDCC.EelX2fXLMJsO\T!TukhH3+"R#`h?*)&;'+%DTZG_3.-gJd*G
%qcntjfTLkTPK2*NK'`_Aa/P(9VD`8?#J^S6c_Y5UPN>2rh5?>e2!*J&c=2MSmVo!_oEAg,6<Z:8#`*AOX'GdQ0q0W4jk@k6\_sh?
%;nk[)k46h+jIG**=1Q&P%u'*>TKEX>#H)95PiXrd+>`CE34kP@;m'pDM2ST/4fh1FA3=IP:(mkcbUEJ7j3J[)Li*@mZHUu&c/M@P
%KM[5pi65hEj?4j2*&ENmfmjSVA`S,512RUb1#F:P-lgYQ!=I%1=X6M!NJdai`Z2B)IcTHXg^JD&,Y'//O-CUE7]K@l:ujV[<W+"]
%]+VfY7/<.R*.cG@8a89&@E&fnbV\R@`>k?]55H(qMFH[T,,)AQ+3S)_8MRH6m;qlO"_'kHJqq;;IgFe`0":(X*e20^f,!<988=ru
%>Te5-"VVYr1en6,qA6\IAM#;Ii3?<E(.\aW-ub=0&&>7S*Os1PYl5/AUJ_tMT1i'$'S$2r6m:TV7J$S*NXfI0k[,_hQ:l3)g'IHk
%RmlgGb-/[`P5JI79>,u6%k6fD&@kmWD#B^AT8*6/('Qpgc,&uh+"/C2.hKh[Onlhm`h.PS),IXl4_fe`/k>:1CFX1C'KGEPLQPHl
%QgfZed0P'Z?N#*O6+.ZaC51:TB8(ECFIQr#PZfSe/`YP(2/1I6O@X\PrO-CS&kNE$d48k.eu,$,k\NM\5l,!Rmh!eT=dYRhfCCM&
%'a;l`'+DV&;smX`r.%O.\*d+h'mWk9%ZF71)=*o)]?39>>c84kJric^bp".IaNo)FXi,f^Zd!0lD9J#YaaGp?&5eR16du,k\8!jZ
%UnRic`[aj7W/LdCgG0Z^Y)7*7`.BJhFr\\,dOeE$NcDXj"JkU#@AAGHcmPYJ6I`bi:'4_lcpZMs+s:HS9t1_-,e6ta-mr)+>F_`3
%F"O\/9FH+[%1*aTL/*P`&'[5#Z#AS@-ABsh#B;,$$UL]ai,7c)A=/p%Z&_;:R&=VJR/rCk4AD?-AC2N',;2Z89rWaoUG<FS3d*'L
%Y%Pa)/m3,9eT!GpSnG*Te[^ZR4q_^q>)(TQG%'lCWkj<a<=9SLXjfst!u[qF?6Zk2l&P<hLa3FTE[Vh+Zf*<>l>mBM8=ZCd%4.]T
%SD6)41rK\_.nLn_Mo@*rK/cu3=lQ,('&arY@qhf<#o3IY_6i5/=3ljRm4ah9-cL.8Y5O:k6o._4d2/<t(`/<I"FK3k!(kqBN!e@B
%,iuI$_H`r!(s!BfOY]?+)%l)N;@fb$:UpK2LJ8A>MkMaNVrjp?aGN>;-3!F2,/'T*kK"ej[7L.IlhX61-)[RMcsc@Al-e&JKMo!*
%F;Vtn"K]Jk=QY0%9EWZNH&gT6$Jr[$E=Bc+[\9F8S7i6YBrD@PSK!6=)><BeU!Y3sC/.VgKI2j!K\s?OO$7es4qjc"Fu$>-A=.fP
%c`e"QRKsk.:rOV"aII:-IUm@r;B4dAOc:K?nM'#[,h`t_+pI#O/Q+4B6$:Qh/.mSH;2n!l2H`OEG9l<]-U#VhXEYT]Bg"AsP$Ki/
%1,]qVfGV4A!A+\E=+HoAcHUC[LX;eVTru""4i9)jmB@l7@Gu/FjPrj6<6r//RGQb7Vu&C[L0':NWhI1Qd$Ru$bG1^&dq0&YqL@WF
%o02BB*].YdB"<[5lP<)u(qR8APn8K=9`-\d?NC.cb7"T&4oB0t5`T^eppZ^f7D0,A7:>QEg,g/6:?EWT3[[-amEXG,)]/Pm^DM6%
%7RTruq<-6<eS2Eg!ObL*,RV%8Udm^0bo74N+qoB=,+)*tk!6__29V?&aI?^rOq@:f$H54OLheZtQodkuf@A;`MYG=;)/3],m#up?
%UTjS>]idVUaUiLRZeXkgS+R(AJ%nuO=$%^5#=KX@L*jU0rYp0)2#85$s#*$L99hSOInkNA:Osh\e>hWbA&apR=dbPmTN&OXjbodX
%IZ[8&,1MIRh98O.gn3+hGM&tUP.YMQM-t2R8\s-%9DB5&PJU3I=WD]s)H$!F6?ltuhQW^OS2Rtj>3lH+h>MLS`I")2R&^`l9GBeT
%;-hqCa3Amn&Oq:pRg;(?6+9gEq!&Y,j8WUumT"@k,aHRkf\3iM!cgA]AYOJY"@g(*B"-8Ln!21NbX&ScC[!4VNJ5jN+[8n?G>F^)
%FsU),f7mi&b]u:+fGf\&Nm^>3\\j2tZHR%,oZ1VR>W*;":\bTrgFb?EX\p*FTF$QV/"'0*^L9d_(/Z!NE$-se::"!d#1.!J<J++J
%qooi.HKqKXWb+,SX$K!I8<4u^o@YTn.fFeI9:a7TZd`\H]DZuN>1Eo5E]][oYM78@Q9*ip4d)Yb"si]_?5J?h),7bplXsCt<mZT;
%WV:/t>>\9liXP&)PTqLpc\[`N1#4B<IZul`0fpr&c9XPU"RR9sjuE.:S(Xf@];<tkXkN^k1Si#N?OMGmg>OuF@Mu<dakQ9,>;.2Y
%!#!bK_Z8i5BCO5lih=&YF"usBq2]kgV:qshhg@=]H&u>J@Ec>L""&P#lt22s;Ne"HN8mU7P$]:i>NV87r,TF#4>#(nK3#2,0pjad
%f?0UP7"Cr[Wf8.MTfqk850:facibR\YBhLbK$8-%,H)'5_EeWT@K+-k@W'c>Rd]gYbj?*k[9>OXDh9m1%,Ze5GnJ@-n6IQ;!ta4[
%gF"uB>CUd*CNp:@NFW+DUfnU7QQ"[p#+-ra#)o%q*;*JeR'f]Om6qbk`r;$lh83q%^^8.^Lg\M*CsJDrEWh9'hU^2X"N0S$?d*I'
%e=Mr:0O2sud,$3nkj-(T7>/;-/=1*"AI3/diu%B%m!=>hZpLU*L5^o*,\(VOGbRq/Zi#G^!13et/CD(9YO//kX1#g*?m4SaYW:l#
%*jIS-0fO[X%G6q?id]!;NbU;;j-;U>>:G2,A.sf$/E8'`Vd%?Q>*V.mGc`\cn#s*4-9S!ooJ]kYc:YcR(YTn_\#Q1AR,$k-`u`_l
%G$_;gi+1RH=+a%/9MNBHm)0?VS#oZGS%O)#bPFR\'-f`9pDV\D(ipfYC6V&[ouUY%PJa6.^tn,AcW.`jUOVTZ')q#EUC[\KDgZ3e
%gK'-h%Ii/#)-DCWL0S!0[Gj\&,,5=@H$7aFXrS`5`;Op^7d+(J'^!#+4`?_(_]VWfOJ9%pBW]$01*rhZ=1PbL_JGfDCI&lW;WkF@
%Xd<5Cd9(0sl`gI34>#2n;I'O9;f4M//p8tD]8dCiN=>#bX]3$I%_5le2VV4c=sHNV0[IOV?8UF:NFRQkBWYmERVZhk1f26Ufo%[X
%iDK]_L8*''Y+sQ;,5rFqBrBadQ%*+MQ5!6-dCETGOTCi->,c(R3j?"E`1Kn]0XA+P(hfJl0=-bqJ_.#_6L.&&PD2XVTn/#CX5,V"
%b.<ujPdU<P)hZdNfeJFAD=LG#bO+G7W^\tG(`A<"C4Tfo2U7bdn1ZhP^pTD_aMD3C$T8.?@=\X9eM\4-$`Rtuf5KRYT8+7maCF_9
%`R+%rlh+R=Na^^WWSP*[3+DTt`:ga8;:r.s*#/UL9aTP<>;j1,(lDWQ[4aUiA>d5'a\ICL.aC"hFL.7$@B0W-LI,a`c^Ki/D(ssl
%HDd<L".N'Z[#/j2QrFR8W?mb%5q!So@bPe7!=-P4E*gD_AQ3a/!uiJHC(,G@Ka^"p%5&cH/kVD%*F(O,L_Y"d6>li?nW42rY7E4f
%S="PN[Bf1CIl8k`q('8I9,mYf#1'J03!<+UBd5DS2#W49mW8SdG57@c?f,Y*<PHbO!<smCP^=b4bi#oj,C?K`Y)0^iUSDn`5;AF_
%'G^#5c'#=aRS3M$1N?[c)?I+MN'Nao&$r=`mta6/?"nL\pdRS3lSZi:8Y\W#M.IrpK./&#;PVXP:+"-VdD7"aPY<5]LYMXKcISk#
%^(AJ2Q4<FHFbj8Hk]Y>&!>=,]7+G]W;OFOE],-Ss(rB4->-@n<]TtM!?^6Ne0o[#*X5Nl4<XuLE$)c;="H]W^&LEsS'FnYq-C!jC
%J\MuN*V#Y@/po!U<(08V#);:N@<iPbU%?["#"Cg(k+M7%;k.$."Bsuog4ClNEF"l]G\uq[m7u$(2u6d?MU>;#S!LdMqp*!NIbm3C
%JP\!U\GYE#)U5eGPc6R>0SJ[`["^?A"D_Xj4/9s$7PPItm8sP9,qZB)XeHRiYtVR)b>a7R1=[,pI9d7E8lSrq@;*]dB/0j1KVL$F
%.rSBU/`0o49Ao74Qg)rJX1&S!DD57M4_hK+RjlBN+cd\K,i4Up;b/?m9XiY=AnIr'/g298rsEKG62N2]pNqj)kV&ifI]$S./`GuH
%R\"AD?QHRTC/jhG6bf`s/7b]WG*--FSt;\,Om?((1g`309Ke]9[o%=2641rN0W_L<$r!VB(rq,,AuA\q;)/AtV!;g3,DR4KXH;+f
%6LdGq,umZ4H.@ZqO:ROta.Y($5pG.iVf/TOT;gR/Naji0dSfbbb,Bm0i=Ocm1\,&^V@_Rn#"ceVr_[iUNCD)pC8CA+RO>7Fl?9Bs
%<"t3-eMd(Rj!g+n%L;O1:_+e2PSm2_(!h>."(fm(he9I)JAjth_5XUA4a%OJ\usGBY1:r:UZl"*kj#8k7A:V&=$"?3\4dE.(a&?g
%'_PkD+gN9fXqaFU@9M7jWQ)Z+*OcnNU>W&b_uti/)V1qQ&]]tF=&1M/`F)9`C;cRf"@g'<(Q,AS1$EN!S;Bjk&O2;Ie5SgB-^-*G
%8*rd0&5H6TP\!Yl(d!^DTZG(:1eeqZ'A=H(/OFaHT28IXbW2Lk^/!t<M2B/M%b<g2:SWcd2I*k4/4i176OXo[!]1RETMo`0>9cK#
%d&7@TX;m*jl]V'36#.#a;/tAD[9@1F2SuWa?G?IRiZ>S0ofW`NY@ihc39l*>!b\!kL:eE#?T2Yf\oIlo0Eo]+&@q8JFitp;]/4^m
%^Icg&`(K/W%'5WICtWsp5cTeV\@C>X*iMaHIHNo&<fN"(K*s^`Z$X_bZ[C/<eff\CZ_=h6?]@ja)ag0S)AW[(It//JQ<J#682[n8
%.uXV&<jITJ$d@J"c1\!uXTqpi_FGbOqKWPKf;k_d7(c$N(0Pf10UUCsC6V_T;2Vh#QO@/")jT^o/`k-cHS)ulCGERc\?M>^D>o?4
%XP[1qMP?n[VhrPW7Ybih0kOOD_]_YYWt>Xc+&05Zk@X:mRja;(.pP$%im?>1&eLU*%^51)V#h;&j,77BZr*jSdb+0CSU`Kej1aWX
%iPDXb[UWhE?!+i#UW*<q$-YP?f@lOchC/qZZdCqSEO_ksDjkT0:$`k3??m(3P1%Ygb<D[[4'g/oa_W'jf6S34F@/934D9N7#`2-@
%!%#m]+db2DGTf.9Q509;r7bVt_G=Xb#*LoUjK@CmFfdsrlg%"]Clf#]L`Nc6F+\mul"u@8YkPW.=dg1AoM39h9U^tqFrFq2p&0($
%B#M^2ZC>T@#2A#l@X]U_\j9#R/%;"GV=&6cB+TdJ[QPn-)k`<p*:l^D)(H$GGM=ME=8H4GbQF=)d[O+%,n*W?q?s&0q7M!Afr$Bt
%P;1;;]T+H-3;nN[;-+_E7GQ;;<)<1RF3Op6_q=d"=G+a:D=6b8]F^=tj9^;$52C_XEH1sEj+hEHG>$8Q#Q)^?NV7Po@eIBRkBZUC
%deq#-C+7oJ04$lt'),Ec?>i']F.]W'IX8N5dI*92EQd51k*YJkZ`Hp\>N'tO]"bND-2V@cIAtcMke+-$TUUqKh)k!8lZkF=rp82'
%`k!*/D,q`C.2T;CLZ_b8g9&#C%V;=n[jjUYG73:lkM6Zl9=]@i\!,Q,l<Z#*&bgUjJp[N7r`edK>Nhr'Aj&@!f\1c<T?0$q5(:Wp
%De@l8n(#?\rOfCa=o>q;g<%n^$VPQSir!u]%(`/&.XhQC0:[H>/+^0.g:PnAr'bi$6@N=!&c)9r:hI>s2qFTbI&e.eU-"iOcG)3p
%dt@+CS]]6Kr3H(aIdUnF?:,=pY#OXO2u^;^`U[&t^RF&mE)5'9F*#WZ`VdoUYDX?h%pp,3KAN@NDk>ju==]_2Qh[Pk\956,Tt4je
%8kHIlpV3k3^HA^\CNE8n0"2W]ol@Z7&&'7j$QEm-0-'1FXM+GBO_^1'ee]FsXf]\@VoMdd=#sthY$KmmMjLIqC9h)hhK]2J-Q`Q`
%X^b@3X.(UcQt3Z"G^aoeaOfK=?1IE5GA^o3BDp]AXX0V"*OpfoO5f"0\_6nd\GiArERd7dpR0``d[1-&Sqoo2E*>G_\)LBiL[%J1
%E^;6l!I[o"[FjYhH\Ia5qLddu`=HhP7c5(iW"hXMDQM=!4"gK:pnYF&5HV]VHD0geQaXW.f'N/)%S6(NC[oN1XX1UKo_bt3kj@F'
%[E>tF?YD>BMP7`^4:f%)XSh[GK[2@ZD#WrJ@KeC#pmlfkKSCG_Ni0&T+MO+^a+\GiKsR$\hmZ4SL\LE"o_#9XB8)Ns\`8Tg2g95U
%]U(^g*>F'pr;?O84B2-\p$V.p?8P8HGSAO%jYC_uX(C&3_F]+3/=[_t<G4psh9s1"PC%(`eLY.Pd*:,J>C;WYh`WW1[+cD#h:93J
%:MH+W?>U(;_+..Vq541gIl*@jRmS8-Q'tro$G'AEI,(2E(2>C=4m/m8A)"#`L7X4Mk/Q+ppMTEoH+/!?2#Cn6)#A4FhmMnqlkjTn
%pM;_=5?,<`5:FfABJ"%,Lr0a-Vq1^>6I9U'=i%r7[>5GQ,11ArDWacd1Qo<Ajf_*Pfb`>Yc8SnS<^=p0GP&TJ,.IRu^K92QHgY&'
%`G)0Y=fK.`90-H%[duBHphefrkjCY6OFMG$mr9E]cje>6lkd)`k5sl5eN+Tfa#[FQgUp-s5@,3k/TnO,G>EX:EQrpb2^W<%S`\U;
%[8RfN3gW&PfF.FsT#H)Z"fi1!T[SZ(-tI[_O.UoH*qjpZ$#H%4hp1UQg?tP3lFE[ncO28Ra7DaM^tHV<,'U]O4PtC)]Mg:tH*?'j
%2sZCQeu*1L>$FYEQZhnM=FCDfht+>"Qerm<4clDf9$0glq"SeECus]4\\hV:Obrh4oF+FP6WY=84Ncem]K^-r2hja3&Pb6Ejb*NV
%h=&B8iBeSK.%KB?IS%&&_d`.HiQ_T]!X?.HJ84W'^2H@N5_R=6k:n$-"E&@o\[?NaILH>Sl7Jt0]DIL^*Xdb;boJBQ1cDDb<u#96
%%\apZ?G(Nk>[61G$hQ#jF8i,3n;m<%k45qC<YjlaA#uVEcc!G<GN6s4MEH.WrXaRl#-!(L`-H=bIL\S*[=Zle;ot@:NpVPth[9!-
%r=Ft[m6g(A_41'%4Cf2e-e[aN;I6bs>PGU\a7o]5aaF#k#-d3`381bNnAd%mji]"*hV?AlA$>K?Bmp`-?H#rOkF`ceD=8=XCXcne
%8TdB'.^G(XT=e'//C!X%@(T456Yu,r[>%Br;%M'`l\#>q+Mq&6lVGE<YdW'n^t9W:2b1s1/*b,<q=q0"7))\!@u!'4hS:3+j&([<
%Ee@38hr&_.)N>4+I^ug-NSK`%YJNrO#kX4R%cdPnl`IZ%U6D1)*a=D;;NdY>,+^+#lg^0`qPXYs6-gUj.%pq=nMc[mSEX>U<lkse
%7SUn(;Zd#(G`e6),O>X7:b5%58.C9;X!Td"DUd]7-+-$`Ta3i2)E"`:o*X:r]a'3/pQ]u.M,qjF!(g8Qa&;aZ<iqH&OrHcZE(8?a
%6m?t&*JkLV*bHu*`T/.+-(Z?D<G_BR^*,.u-9\l\-e'8l!j0HT"Y,\PiBo;Xs$Pjd4VEL/aQu%>,+qID,ZTu44\8a2X(_!QZQDB)
%7i7(GTJ<5S<cbUZ6/U?C+'Jj--LN4HTL^8u&34,W3e_eeLC(L(94cT%+<SXEXs>uiT[=[jQ'>"l*hX5Teakh;X<42$U[b(%qm;7[
%%'@=^$RsqCcbR/?F3$"E2pBT*Eee;j0-CCHdH^=:\`5V%)UJi'gn*7a!K#b+_?cf\YNFDo-f*fQ)f+$@S].]in",69G56S,nmLHc
%`%M"FSV]sQN/Fk_86@]h8`iBhocc%16AW5BEDZ?6h%3_0mDEfrk?Qkn:3fKqV+"!i]]O9.DCmN4\V1hq^Un):q3)qFfJn2J46l7`
%[ha0hk*+]RTUXqq5M$7KTYlIC@8oDVHp%D"gY^3s6pY3D0fG+NA$D?]eHgul>5@h7AH\Ws*u:HW++50Z7ZK_1]T[^4p=0CBgZuDn
%mEU1-efj=]a?sM..2uhZfg2#97Q+*HT/P07etd]l3I"C\Hdt,[W?-Ei.Gaj7WH&*]^AG/gH(t?hOh[_bhEjM.bc/1h]A.k?nEoVb
%B(_Wq=Z`\1SO4\%Lr#H@q24Gd%kC@"E&eEhFNf/4qg>fZ^QSmg2ec3aJ!(&agn[Ss_E:@OMWu$S$KoS?:K7q/S0qYeT%nh*H*R-n
%F/A`onZ&06(ahuaj.T'j:R@^Sfj^Jd-V!O^),1/(lJ0:Oa0$&&/YE:o.KtEAY%Bs1Sg]GV<T2k=m7j+Q,Z>Ff9)Zrk`?qfg=Y,"b
%H/]XKhoiA(jhd=C2U1*%p\NWmF_B[^TWBX0p$8Zqg$;)4g>EDi>=oVZ]1-`&.gu&^rP9dCJa.M\`FSM^k=>9(>E.K@Hd8gA,Qd:)
%pK'P)ZFp&ss6<to\9VG2WTt21pN*lH09=s($O`6hMcf,2%kJFYbMMK7[JSsj($G;hjV%I.jh8os:NohUT5:-iK_"dr$Zh\`Oh][U
%KKS>R/6:V-//!BQ?eUS0ckiB@7jSRZ[8O22k\=G`R"#rZWOYUP3fWFnrS"DA%;o`a/O"S]qB#?L/2u-d]Y=gln&:hC?g'Xo8)';I
%0K5'Ip;ZD[IQS.%kBhB&Jp4*+G^@d%d7jG@^qN,oi,EIQa.9>r(-C>SHi5X6eG*id]=W7;48>+'IU.8\NaR9N[:U.<D)af.ZfT8/
%pD737>-W?2bV$4-02c;d.88CCBsJD!`=Zj$Mqis%W>chrC.uWZTI(VrTI-:\/1qpleqsY1_-VN[rpunc9jUbg^fmY=:DiKe)Od2R
%4h1iRoQdX%4fg2QXM4UU)>U@DEOXTQeAY,n_<'8BB!nl6DJ^U<dYE&dn]F;ijXZ@+7h`C<Gc]0SgW(;)^R_Rs5N.H$jJA@'ml;It
%X:IBsMiYfE;1FP$&#DkQ^\?R%EqekRn("hPB;ao3X7(pe7Vg-mW1noo8hPL>l+M=2N>p/Jj&ttXA_o#V*.D!?"KhW.$8BE3?.'Yp
%gP$HaHZrs4jI=lk0fZqGpU<o!`ok4lET(_LWO^X(nVu>EXn"bpTeD;O`RXRj9<bSu?.iA+q'L<u]7J,gdp9spaBtRsBJ97rgqhsl
%kLJi6mgLQBm3=FJ;9nFr$4+oE,D]Jd]e5nX?**\mC-VN#LM8reK7imrBfV!a_^Xp5][PGWQ9BT$UgYt+hXUR5bJj:S^X2]Y45J_t
%is$]WM\Np2cI_@4)9pFLb7EUSlMg[?[?f.A18dtU:O945O01uUX]/'1pRs"Kq64,.r!s<rRt8)n*>_=!?h<]2QG)q(]!8jHWhq(5
%)k/@`7#NXXbO7WHneCe<LW:@kqZK<0F0DoQID"1b==qg``)H2DHh6@]S#9-EW5W5Z>5hXV.3BVlh7%S%b3XVgG6^6eor:"Or9:Ba
%lr10iUZ8<.rAY2Ep-Pjo\=Yi5SDX51b10O9'B5hQUFWI;"\f]DO6[2Jk>"jpf=+LV5.$K2/W)7Npqcp(ilSk=Qq7CDMk@GlI-[)t
%OEu'-\%>kBq+(%WH]-1ih!soe3sg1X\eDK`X(uNT2KkAULq%_/q(tK9T%to7juu0-\?YY.=BIWH;:SUmlX/e_NcWW54SR[8q)YaJ
%[g&O&W")qn)G6Ai/M&iHNh`iGYle^ie'!aD-`slR>/PY?TT((Dq69`Yn%QR6qUsn)m__?'C2O[NlM*$[d!YOc^37'Y&os2<VQ#)T
%UP]!?3S&!/5`M=]O?S']is&PPGNU9`[>">[h;!q_XC;V/itj@!KhC0.9$fI,7XtI/4LW8P,WEJEE'n33V&3cj(LK)8O\PG>f*\F:
%WcS1-fCjMF=)6TfWc"Had/)hgbKZ;JKblDn=&]04^H,ONDR$PDibIoNDE+J2kJ7`MYDC6<gloC<CN3O;.b3[a=JOTd!Y!H=6Stmt
%_MatsRsf%Y^=55h?ehls-SY(Me)Hog9+:CHfD(#;K*F>C5oH;@EF_GIc_L:>Q%7"eq'B:-gR&pf0\;3R48#+nn`f/K@c:_`W&WCL
%_9T\&c8V9k#<,[U*?$AXN^GI'R`rmKH^d%jpM=>f3P-u<)antUNA^0#J?n9Ae[0[i3Hm[eH>C69qAB_L9<@,&^9#W.#FYloioTo%
%\iJKhgC%Z7eA`4jnaLf-'C-IFk/I<E9!':g:24X<b$Lk0$0dM:&O+Wp#0rQ@-lm/S_Sfr%qm-NJF4iA=]=Z&.+9EMV.7DRAY@;"F
%OPRZR2h^p^=DATn/M%26NSHP81cB*UKXqrojYqKg;*9?!9F;HpMPkW;D<^J=<<&s?DcP)?o.RP#F.,[,?[]M@?dpL64`-ahSC/0s
%ch$hAhDZ[0g3D2sWYkUPlK54T?BT*-p()16^";u.#_]Yp48!=nS63Lc8R_G#-Al1)k5=18_>``riT=HXpYOgg%g*9eDm#>6:7KRq
%qsYfCM,B<U]`#KCqRU`,?XJ17^h6.<ajZUF@(NDY[Y2Al@dV'NY-<fok3N65o%Bf,&<ZFo1b@n#p;;*n#JF0"GC+U+7N`j5;KkI,
%c[0%pZWjj8[r2KjKq6@:HjrO'q>>UP=*Sr=>$.q.W`-jCeU=ZC-gZ.e>e<'G\CD1/qd'H&D^kGGd7G3-oObYZ9]Q&`f<occDQaT!
%$j^([a/^l.SG%hI^Y![n1ah!,nA1?da$Dn<%([UA=+`5??%)p#nSZ'[p7QP(FC0,3(Jef!'r.8`Q_ebjOj52^qIT1&(Ut7XkJgY<
%3"R@FV4@GP@FJk-?XVlUo<p_dg_g-thG3=k7VC]9h85*5T>)1ooe1M&PP3N1T7,8l9CcdcXIeiE8GfIqTYC8aJ3A6[4R%<$/oEc[
%Ng"7;EJPAW%0tgn2jQ*Zk\t6_qh'+jC$YCNpU5%d+&l`C(0e#WO<ZMdb%g0TfqK@XQ.=-;O6b\]\V#mml<^C?9U6<Fps/fT6@#nZ
%=a3nO.EcjH/(j];[^1Z3&=,-ZlNhV4W/0lAPk13IGHl+mXc1mGEUZ78Isnb'/G*tigA2/nOGD#5@O&>e*qab$J%<#%XCIPaHW9;n
%#CC[E40HNV;\JK3\sqjj`KdRJC>mr%Sbh+$H[;(Pn@d*f2Kuon-f5^mA(dND%?>Q0iVMundc^NKGhfIB/%[WEi/g0'iQ4U9$`EHF
%6VtBBcaM`'[(_^>N7;O^d-E8.jCNFQnM+/<jl/GNIeE%V`'dD;@))K.2tQuLo3IT\Fn,=$Z2uNQHDrmEjrq?cFgtCqIcnqdMVLPe
%.GfG:bE7u:cL&d)@?(#=%mHLB$>7W0Mc=@.=SUI55OW#Pq09N<D10O>por[&6i]/+4PVF\mXF^"T/js+Zh/XIGd?sR2:5j^d.(0.
%MB=c]q7:j#;1+0mqUEd*2HjQOfDOK._+cKXL!S<DpPep*9Yp#cd[Rq;s$X0k$3K8$ikt/oi\U3c;;MEneD'lR_Xk`nh!DW']t[Q2
%?)h:5o2NWmG9>c0T3rABSg]\MQ5aUHQ@$1&9mHf.Ba(g3Q"AaoO_a*2@SEG0aI1AVD6//7SX5>,@oiAPrn5R;eM^IFf"c/C<'V%r
%lbIH`7,9=Vf\UJa40Pr6*r*736\spUF)ekjre%n,B0!_IdAW;tqr_nP5jpMA*APkuX*6`kgff))ra)hs0/pu6o/iG&(uu(t]9!H6
%52F5!lPt!Fn&Z[!Z16oC^B.^%S*C^QT\[?4`au:$c'Fj4kYtN+3.7]ERDF(h%6U!6J%t&AUGUo'eYCQR@'<Yt<a2sSf67E_Uo(o'
%*.9rJPo<^7./Wu;(Ua=E(=@PqA`G*(I;`be_tQ6$)h/^nLn\aclBUg3^EFYJ8j@s3<i)/JAN3##:]L3NhRuM$kNK9`L+QqZ)`/5D
%m%@#F?ge\:B!+7@!Y;;.[nbl'f?oFh,l\!SeOHaDJ+r+Js61\L\JG1T5Nj,*MI8NrMs\&dA^l.kTRM!L]D?;Es$`Oc/,g5kSGhuM
%f0`[]FW@tl?!RV1\(!C@R4n"ppb'eid7(#LXKF`;2(H#,D/O;eHSoB/LXjr"B"JY^%ni1&YHtfTL\l"6)F$j%C8HuC/'m1"K@Nu"
%s(pN!IBXZ!>;sEBqR*RM)dd"FB/R7CB/H69Gk3&*OlZ/3cWPbh3VGD(qg7q%^,PY_OLO_\9crXqUP^uH^$:mPMNdJcl69cZHj)eX
%qQn+3&T9)SgZ2pg"*&?Rq*LS.VgAZFG,a=9no`ACq3h&4be(?6W$<UC:!mm8LhqhF>CVYb9B%u.HajgX#Q,cM1,Bt-j"W>2@k\r4
%igrWGO^Z+MV(s9]$?39`hfDN\0)('t?=Ig*[]SE)/6j4mW2RbZ1+rbqi58gWcMI=Ek%3;TZ]8E+%2*_F5O1=-!8):s*qLOmE]o_2
%n9*4'[d@_<D+fCN-gS@&nEd7<gMUU:+.(?`j(kl;EC#-fJq`6!W8M!:5RtMkS3!qqTg4q(lFrZ2348"\:0'sl0r:@nW)-B]NoO\f
%QXcdgA=9Zp"ikT`k.1Qa>^YM8PCWIHQ8.8tX[Z^DH'YupOK);"hi!Lkr#Wi_5R_!MD'KH<61u<9#Z!La!A!3ZN+ZFDa1R7D_)T"[
%prhHZ=W?8&D86:ppTR$JoQUM)(6FT\FZ5bRY/D,?$a]R57ZU&m)Q4fD#f9YdRfaj?OTc?^*tW$e&uHQ;W80WsP9<:8NCc,)bd)db
%kp*+R6idj$omgci$K9B:Yn7Hf/SV8O?/Yn!^9-A&n$!)C4W"h9#F8a9&W!VC="r6#$4HqqF*nl3f6=O;-8:71D;gSg5)13CH/RDa
%J`-9UWkgU&l2B_$!e=IM)A6EWmUc[&b7BL#j*W(%JP[HG(sG;:3529B"hEXbnnI?6%_Y57\t%0+YOrk%okWFEe0NI=>Pe-;@2Lm'
%Jci<P1t3:Yeq^Lf^s!!sZR'Q$ncU/TO^S?(iAk,oVQkuo5\1^<dZH8Qj<0#^jaqs$]gjc&*/><e-Z5RY)Q9sKbpHq&U3?\Z',i`B
%0Q`TS1(F!9TP&_AA\#1`$lZi&T?icGUHNE?Y/QDW`n%><,rp%7%u*PEXWB[M1>,OeJ[hH!,d=YdQ>M..mKa9bQKo)%#Jmj!J7Tfj
%<oVlA$1(5;lHhVC@?0h7m/Ve/!q?;YJDmpg3s"@c$]I'@GqmqUh;k4O]%%(F7c"C32L;YpTt-5].jbVI<`XP%=8EoCm+GMo4Dj-[
%/;<7:0IT)!SW,9A<tNEm1'']]a[-hNK0q,H#/c]/AtXK/W](LPJ=Qe0O7-q`a!2Gj%?G;6'1%'(_`)dTMW+gk7di<,cXk"eq3#@*
%``J&0f^.-kh#+#>ejElPd9fOmaZ<p*#k`([$2T1+':]>u@/LSL\ia,u+RsG'*+Rn#@:ZdQfjL?f3+e\0Yl$,_[88Sk$YGC6P2%4t
%,j:SH3RDCOL=5*sl&!2JHDHL'NPWiI]o:>PRR_(%fFS^M0EF(/92EW\D)"k`8:&(%CDaeGSH//@L,kb3"f(hA'+=r:=<K2O:__Oe
%:QkbZ)'4Z[&r&'ImsCLV8(`q\a&'gB1=HKg^,.9*&-s,2QrM#a4Fu1)1EhN1EP?4$##47Bol[%!bFP&I%Mg+EL^/eJIIU)982kKf
%KW]]B;^"ae@u?EJibo/:4oGmZ.Ik%o9NU.2'IV/Uh\<#)M?Pr*-_67\4QKS!4T/mE%@sJj[3M=.8KJ?_oG'Dh&A$(NYIcgI8X#/F
%F9Mc;``38-oK/a*l>o%lh\tS5Y.?r7e@%*Cf;K[P&D\fIj'p@G,E"U;U@#b3#Y_]E\9-XEK`Lb`[65KHe1oiXJK%#H0^puO0b&,"
%Z2l:h_.)umCJ4p)+Un&I\0U>]o[La68;6sC0,#<^@6]4?hgB:.YTEcC;=@T)D*f@\(l3bFAh=&:#"TX85[]LT!skDaHij_2;36E"
%d.=)cU3pBUjp7B_4NLe2jNa9*(l``9g1WqZ9EEd"ctCCOW!]=%V\l*/A$d)1/Rf]Y(;kNiK9`h5EIi9Jln?Ar6=MPf;$/CB$WACD
%,[A4I5VI:&'XC,njN(k%K$49>9_AP1Q^a*Ic8'",&Nq8%+k$WW&sGVQA-OdtBZ5#9LL%-u4qe,V&nMD*O$7.u'tZ4/i-`=.K'"GS
%.'';TbDm*Mg>!3APSRn[:bW@l/^Uf`Emt(n6".nZC]u5k!F"St,X^6M%DqHL_H$j`2k4'5I7Rs5+r"BbkA]1+;N#]X8Fb^k'VVH=
%QndgG1T2J=!*Nbp:JqZg2/pe9TiXZb/NZ+AXgCJg['bM(%#&%7O9QDrJYUt^BR\=)^bkiE%DbY]5b<o-"@-??)']B#5[=oD&eYaA
%>Y()b<(;s-cu)C9D%d$V#UUA-b-k$_\6G=i$b`$o(fHG\5jAfY9n@t^&0gm%%A09c4\s<MjG4Sn]E8KJQkE@2PTSXI!Phcm9!m1G
%8IY`)4GJOsM]5J'D)%eu_1%P.)^#\e*tf_8Jf&7HKuYn$E*5C>L>#.0J9`iP/-I_#D%fahe]de@jLZHC,DlPZOfugZ(rHo<,7Eo>
%S:`X1j#P,HMR<2Z0W9r!AI=9N`F9qM.4?YM<+*`0/,AnCp*6uEY^Hi,##4sXaM=@?a`0u[8<iEH,m,;%9Ib]ULrM1(&Sa#8E!+jf
%r5u`f#X1d6'.K@SH<>Rq8MJj:^r'bN+"ZF$`O_h"('A(V_Fk4j$tqX!3%9kV+lEnSQqS?52:F1h,a*Fpr_*J4Sr:7Cq$*#aUf%!U
%EJ?>"2ABo7JFtSI(IOlC@;u[-TtmjI41l(21LNjP4ca(j`n,5[D(mO!qa5-5Jl$eZ(2T=J4[p.>@Y8KIJ:h"?Jf[k^j(0f9E)Cnb
%kf[dZaI$a7`Jsq@oLN.Or>DO7N$Z]EDhp5D3_3;dlpEH:PMml#j/EGujm&'X"iI)bTosJW=h9cQ(^b-fVHdXs<3`[d)2?$Vqe*10
%K`Q"7<gn8@2lQ9V+KRLhCHbcoaWFt/LK2JkHkItM;j%Fb@hEo$U%"I3>!=+@B,R=Mih>.q2Q4?DOW>cKVWIJ)Lp1+t&RsJ`=Uq^K
%%jGb=_D/i=@jpOq=Bme;c%3d[63/]AN<'/d^&ar_J2ijM\ucMu7c`Wt4fi[TmItHO:``%C&AgaVX@<47F7,5,J0>/G-E4s=oGj#8
%(cefL4rA;G6qu-cZrjKspW3_<^k?8kO"n=5Mdo+e"6?,F&/=$@dDBi=9D&ok&djL,b2cs=)FJ]^:`DII"[J^?!f>8^"V!6g0clM#
%PI]HP/jRImQC:_59,f`XoEgtAb6(.QKErosZVV!BljT!7bmgW1[!XRU0[\0B-n$:X<c0#/eb\WB#gLHN6G*QN&J0WgIgiu"&5iuf
%%URmI&MXQ5.:C,2`Bbr67hJfp\4mR0!B"SMB4ipJQlS>hYLOD^G81C]N&3nIMu@"FBL&j1PE0OkpngenM2\gH6Af2M"Pld;6"D83
%:S@dpL$&o#ROq'PpDCIOL2n,4N_;4@-=qh'AdbK@KMVoS/MT+r.rDWnBWr.,6=`a41G3:6Q?3iQN.EKnZ%:q-$CFg%pi3QTRA6<_
%TY2Df.ECprR6uUg)GqX@EQk.s\L)oks+'$cU\T`g(G;T&bj5HqP/IbkU'=ioE5_n%hBq3qKjfoSII)J]!-R8B!V7EHB'pDtPu7B:
%KoTZYlJfr)#G^SCEXthV`tSk20/7S#KYf.2l(fF4L'0W8n:sAZm"*fHHQ*ANHSYe]@s,]0-q8_<$eHTILnU=o>mPtk-e3ehJ8i1&
%!Y+W.=Wcs60aLG[/i@Vq9dhn/+t/H5@SkQ-4W?\$`Kb)qecbagE,UcaD$2=5aWZ'e@a(<ZD#h%7r%5,[$2Jmf/5.J90;L0b!EKPE
%>"o3Q/Vmu^Z-XU;$DLseL-J#s0VH4Hgpf?H'N8R.0pd$FqQMgk#7i)q(^^_g#:&M#TYZ4tC&k<rX'rSI=@6"ri*]BV"pC-4)hXmk
%\uVK-Y+^=QVd2XnUkJ\C@)St^Hq:WK'U=5s(Q=4QKi/#8R4VsaGhKTGD#4N,WH03cJI+]*QR/Pe,Vl6k3YP<K$Fm)efpF3]4\*#=
%K6ihM4V"4hYnqrGX:Pjt5X^Qj[9hTU`!&+i9=r!EN@X3P#bLM4quV9`k\[>nd832=iuoKQ22BtS/n$!1j7\=I"@\&.OH^.VC?UA=
%3IL%"*7d@"?r84Gi.6L\RFOdC7=,i'"B]n\1%hIG'st"E+e2F:Ya:H-#b+)^6]9+f&m-m(6#g/b+Q46c>m6KO-K[,rA/?5e.F<Au
%#e?!N0a-%"@R:nSiWC$@65up:YscG#ZOE2>"o(G"4:C:<.-sm0,Tst_S<GsbnUn(oC&jSYV9foBO9GJIi!#.\1d1tB:H4ZI9Ikh7
%05,>J7Z=5TXH_aRF'!#'1fH$0680<a/16&RWLH_Eb7<H`M(0Ir3_;@M\l,?HEbtnF7!WI8&pQ+i*p..c)V.8iAmDVk@BZ.&C"XM7
%8%>`9h1QdLTBEhnMnubF(j+M6PSBeK`pA.&a-?j)fb'TAO@TX2@*i.WDC&?A\_edl&drnG@;mK\..4+t>RtY&ON9RD*#C@>?3L20
%<-SH\`iqE.k1'$`=IY$RU;'o?eJ1[IKnF9r>S"SFp#Q`1+C)>l;uO^4dl(S86!;nQW'qHg4t%<sE!A5NbC/8LSV-53$\m&rlZ*),
%<om,;=cnOH.a0G,.@pp1L?%AoZq68slV'io$oLV0)/sT/C)GGG4G(S+9*f3Ei@ZG_bA4QJpJF[iQ'c>2@]@9Rk>b@h&ggcFjs/#Y
%W(CJEc\%oYN&4S8I2-2.@!YphX='\qf-#5SaN6a",_;?:)M3*QL>d.].]^Ml<IKl>+dKNNM(*>f!9nt&=T^/#Fc243*3M"]Q>cJt
%6.BgH@"]B'&N+cd?Y.6][P)VF9#;W?/F&Ds2TIJ*RU[AI0Glie#/IHt`l7-YpHAr3B8@,!.[a0#VP.aQ-j_1aa-9#CTEW?Q!@qt4
%XH(4kUuV20>3Y#bWahJ->^I's(Fg3sm21L/_$6)gcc/e_F[=`Q_(CDA8/6Ce>k;CZEg*X3(Q<l@dm5,rWq8Ui)TUqe7k^W6HtTL.
%RgA[,Ep":J=`-2S)X&kbqSEgd%.0N4EcBIG@V$Ae'<h'S'FU90)%4V]1`7:RagLd36NkiM9#op<,$'!)6#4qegR4E0oQ`Whs!4eX
%ct)t"K\N#dR2M!^D)!&S1KP1K8Dc?kA\D><obmoeiXH!3+.%V_%`3`%*>m.W4,Rnu\tu)%9*>SM<P7BsQD55aQsP/*@?CU8+XqAW
%Z,P8c>.F2PKf&cYX/.:@p#d/^_Q7M_5jWHZPR.E#Y,'Ns6*:Ve!Z-cBZL,/J%Qm=i`(C@g%'e=Y%^%TKSu'mLQmU0-mY.r\@49D6
%&52Cd+dE>,S/0Ci@Y&Mb>Gks?'=c!BH@;eAEHU.o@ffp.'"F3],h9po+%YliW^`%4J-#;ZjY=R"EPIEGL+`=QY]D%,O_PE/G,1E/
%c3:1e?->)j8<':m-pN8"`mM&"0L4i5R53,5%_/d6"VN"&=E7Dt$]YtG&<6fg9$2`qb.4?LIO/l!i$tVu0gV';[lEZGS4ak!#Qh=a
%d'_?l76hl-e!_GXN&@mq\?\i2S$kk\X(!CoLp5'iG-R-2TEJM^p#HG]/nK']`(S3Vh1R(j]8)TDio!+!JLgQc^HO'J5Pqt=k2?Q9
%C#BmV/snpCb@1`/R(590MUC?@[s]:_".LuW[cc:X+@428c&&)?H+;QTrF%t?%sjlZ(05.5h@Wp+P`UR`YCYI9.>jgdV0SlI@+@@Z
%I9[E(D)fNTq3G@98BdpNZO'uK:.luOrA3!5'SMA[N4VY?m4f2ATZ-t>Rnc;f#V%!6EN_WU]g*S!$Q_>_=sAl(hSU'OS^b]g_#p#-
%&J$f4*A!pUC#fXUBjf\lP=ufYhJk3^OY:sHE[@_+&;6cmp%R_qofS(e"U<R7dY/NKV@*UXPRZF3?jS_*C.-l41lAk-f84=C%]45W
%c_aCfN4P-=-HpSJ_]Xe2+@JN)LDsQ)d2-mD:m49dfA4,h_IKN9GQa!4\#%r$',+p:c4S+b,9.uGi_G)GXQfMOB2[#o:!U0D.$(&K
%NKH12L(4Mj4nK*83la+K(lG\n_#V"J1[UV[Y=H2[]Y<1M"0H&W+mKW*a!lpWa=BaKJc^DjD??!(YX5MqIRkWek.R5aiY%KZb1!j_
%lSCX_1)QGs!tY/)f_mUcbEAGR,:O':[XA>ElKqT'G&;gS!$;61B:BJeph7J6q^e"&.l%F01$5tt_"D8N^bhF*2PMqA:lF"7e*>'6
%o"tp88?/Me``PN\RD9]FBLbu8Qf?M?h!5>U4bu,.n=9]V*W"?kODKLODFIJCD.4oJB#;Mu=7Ao=ji1D3^Kd9+3*%=,[<i/kJIT$:
%JjTZlK:<`4#_P$`OM$ag0]b<H7MaHCTB7H$UX*n=,uM*%Ws*cEg*Y;Sm?Ka1$_*&>jocT!]f6S4(5YE6XXQ1`IBhSG]]muOE,18h
%cS2pHICa8^op#<?6b>+DGg&+kZ&"_bHjebSBXSU!KRSL[ol5$Wa;BgPWn.L8f"s9I@jp?5L7#Oh/Rfl>l7/h:&fDcmkZfuq3m+Il
%:t(a*GSlI8W56iZK\H`c@DRSO#Z;QV&WQcm/M\3V3ESs/=[W5.Cmfrq1kmKq_h\lU`>r32`s#uf%u*/GLl_no`_BjD:#/.eka2DV
%ZtV*K"V(SC`]R2Xbjg9-*gM&e&8q2YS7&jj\k`?:BWNp"F[37!:dFHC*U?clJJ"PG-m7qjFEg+Q,>^_j@VD]j;/7nU;7DDPM!0a/
%A)>)RY&\;-+QS3IYkf*]J;+sEq5!Xb633(N0GG(be:!`]5Wn*u`SS*b"([?Z$k9TkC+U(,GUNtDNMqc^@MZhXY-L)Z!AT(h?=.CT
%2j--op&ulNQ'SPiX)M&LTt5Q;J3qiGWHAN\f&pQ!34[s84(u.f(GASV-gj/No?spA[+5J5RGJ?e0(t]hE<^qFWYM(<Yn+J?UH0L!
%iV?TYj@gC5U;kc2=COZLCg2!Z3F(qBE=p##3qEgtq[BD8kepsp(ciorA/7_"L_mgJeH`m5A<#WT%tM3Nc_D28%MoLWV:W;W6O,4>
%MEtg$*/oa7=FI+l/EDHfTEHgI!%!/[kQ(gIpaU"-2'AOrlYTUh15\<s`r(R*_5/UmnH]G]bX?$8"=UDT);qG)6poqeb`%I2+GP`^
%P8$/hRrcbGU.R8MSl#mtR%Nar"VI?D<V@<^JcL`QV'1p#_46567YuoaYrPJ.JnW"`?gn1FmZueJ>i&2jic:+]Np8nelF(5LObjE3
%1cr.Ll:,b^Lo-<FgoLh0@3&E&p#rE;#rCj5$*^Q4:m5W+/[F=\JO4Kh=F25uWM>$%>E<K81TCrp;N&d``IZNFQ&s3)QipNpRAe$p
%.]X#F<WM:Jh;IE>%(#G"&=ql>:`TtUC!eAIdX]=&+UPAZ3Cu',(K_<`a%J,n6=\N4Tr?)6]PE!&XpPVZdddJH+GYpM<R)#WBsZeW
%#"+/L1>I"cWB**.#IBf_3s)1aqc9X\&6W.8(`3V"AR`%dS/SYL0)?I$\3Q2uK&t#^2@@Us:m<aMRV7:_Q,e$N!Lr-fN=5q'lWcl`
%#r%.qd)E!%'E*mEL0t)lpYNH@!@)=:TEBAIjIf@18>Qt8i#iP"gOZ`[Ji1D]bL`&<440?CBOBZ8JB2Ie.7LUG6)0I5+"s=PZl?f)
%qt1bL9@MQ"'/cBVa<Y"*L49(9Gj\@mZp:[2jf+gSK.-kgJK8._=o-iLfN;9d()@9Gs0B3:7[kiG(CS%<Fa>(Q6'Isl_Vk]XfTSFt
%^Vm'ZmqA/d@hV:)qnfQc5b6s6)rt>IYiA3%)KMoRkZ%]>KkmGa@hHM!P26Si"cca_+d+N&QSODS]<B+H*[HFo#_rMV038ZS#Yh8'
%LRV6'+E1R.TG2'@&#na5X'cmmeHhpR6QE%W!JY\a6^e]74P4-?:'/rW$&M"r15!N`#lRIPJ?L+;[ZqOEd\35eY+At-!^qC%E)d6Q
%0WNMmJaMF`%gEGjT5TE?a'_#"8.$e#FE(GMpnb]6,DN2<@=D504\!Eh-dq%3-EltsTEN.`O@HBS9FY2:Senp#?On<a&>#MQTaC'G
%mM./$KcFM8f)Z(4]89EH@i,J4;YGqu=;>s\_o.5,c]Y_6?O%G)f-.e;JXnMV&>j3c]#5(47j$A>R`*I"(;J;.'5Lg*lJRCDf.lRW
%"tX1J%'Z]M%(C5U/T*qk7`j?a7l>(4i>El`/?K#ue\SOo[0EjP"Ge3N?;G/#c[kW(%G5*G.BHaChup$(7ScQ0*1Yq0!ZN+5>??%Y
%Z68Xt[o^Qh=<]6l`Md3.`*gCg$hR"+@W91L71qff4=i<t\8-[kX-aV'!uqR%$s..bA!-P:-Y9I4Dj_K`NJ93N<\R^2QWg(rA#02^
%G?-'+C25,He7_<u.g[QlCi<d(-.'cO35X<R8RUH;3cCh]PlNW7)CrE%3AsQcj7\lh`aq!r0rg;HjRqQ?`=duYOd!q?`-X$9N)>e@
%e';or-%N+r,bfKc;GSETAq!#*I!%A-d#SF1\Xc!FB/JCX3G=^Q=+Pb_>+r4QdJue,/VuI=n\T-j\;QN+Zao6:0L_M8[o=3CG]q-u
%h)IHgH-sgZ`g4e61_&)Y$&0(rHW-W.&R*656o<'U(*aj($iq<@2)YLleK4cInBZEm]+IFeM5uH4LcZ0:BYo[O<"B#!j;Epc"=HNO
%'-)bXN"3iT_I\H&8Q=r7,&?=,^`/QW2(Ei[2qibb,&=bZJigUuZDP5W*61cCf%>K[<2.0sd:ULR5Vp&h_G76n&4m^C#WJ^n`jA7i
%GZ>IS!c%u@UH7n#gYi=-DBWHYUQ#Dd)';Y\1;(uN[r&hSb7h%5WPeRpOX6U`N/sa7[udnB$Iu!:+UN4WB>W/SLK?JQW-FD(L?j9%
%7>Ad37?u7'<1=hA;5ho*UU/H:'4clV<s5;=EC&+C_rUZ)B,l,`0O9H1:Ieg*ZjSAc&4(iJ-kIG"+f.[IRGuT6;r$)l?(Hth;`gM)
%JZuNA;`c^u:5\)2*Pk(+NCS3We./'S<a4oX:`0cYiC,i"M21gfWf?W6Z[<&M3$$73%WFq'YO9Bg\.@2hog"(:X\]7kE"`g27ti=U
%I?8Z5];mWO_2[@;/<')8TJZiq.Ho.BVATK`$8kljI:sr3KgS,O`_]GORLr:C7%ULjc/>`P:/\&7`4lIR9i;Os!FHCcib7>'ZCh5\
%WoW7"brVl;KO^`ki<#(cqYJt^i7`F7(8+oX0-"Di%_9skCHA,A(GX?LD%T>1TKQJ3(saa:*'D>b<<A=PI4f4=-gMG.(`J6ea$\So
%9g.<65Sh]\&Np)seji(UV:KAn2/LP<)2&mSOFapLLs*;4F#[Y*,/fk,YdLOe)K$NX.T]9)k#fRK8>n63<#,$roO=Og)>.P($mJ)E
%(KZNn;0+J5PYhO_AMe9V'L$"T@Mt0)MpPqQFAl7D*O+1KDF!#!5b$?"K3ajI-tD3T#J9KlVPiT:3dQ@bCpi^U!MtJl;J8]FaM?iq
%FPB&323>Ya^?cLdiS]t@_R)tQZ1Z4Z60FL&A:t!Sj-('0'N]@m%Jes+Ye`T`a2\QsTW:j)i7W=^@"Yp2d%LK_-^@90j3n0rGp]2k
%,3st.VN+rU_beP'\Ek*)/r62JL%444L)Q7c*Wa/1AJC?%FG,Q=!cK#SV)qk]ZLe_U`1YR&(k;lQ'SU;aBfef-4F"A+D0_%)AT]ED
%=0i\di]XngKumh>3QM3Z79N;I)8ksLi!eJSX7dG<]N>j!K(*TB\s8,tGNbkG4PHW!?>6I*+Ga\&a[/,_JI=aJ"?.(]FW_@?e1qTD
%VKPJKOp8"fX$[LDa`2Bp0YO3rH\rj*."/K+,k/%HclIdT5_u<r]:hcL90bH<g4="8_9pbm6J-$Y#AI&<3/!OH0fDe77g%(k/f`IW
%1BYRjeK5IiWPorA)@"-$V$==#UQ3-P0]J+2^%=ZN`%(H!#Q_%GNWh&mW%"Hp*u!^(lTPLe-'F;F5mf'jcLfJN,J35%'%?+jc!3\,
%0qoDK_Q`6[U"043:Bn7<SUL(*L?1@edE'_OFO(X$PY$!,;F2^,_NcL,&<Rs8+ra#oN/U%VCsg'i")=lhOl-VsNQ*rDl<km':-Gmo
%\G&*J(l@"E>u);6PUD%ZkEHVSqHtR`K52h=?1LNLmJ('7jV3lGLib(C3+;)[,b=J"KjrAc%n>PZ2H?`sA*)[c8;ra[>/h#(*pc:e
%^5Spdl<@C(duBJ$:JQ*r8U-F1SVt-ARtd8"1eT8-?*g?Q7E/0?osmVX;0DXOh$T]sPcd2W(kH@VXN5.3Lj3mSF`_\H0G6%a;1Y)L
%T8U?SbCCQQce`A&9^.M0;,DsN1$KBI.!#r?AlZKRaJQnEOK`s2%rF:sh?]m$M*&93iZ^1;7mpOG2hH9jO([GX*\To_QcVWm&(7.h
%Gr*>_]KsdU_D\%gpQ)AMrF'q]JBUj;J?"t@>LQgLFPK7=qqMIELjPLr[;m%V8\BmHq^!D!1a$:N15QP`#K1[hR7W)$1ig$N=A(ID
%i2XHuTp-`I2I-f[&8.@`7]416EK4[3a/fAT58gK[.6F/#LeJb*<!C<miW34go>(7kr()>C5k-sj0&NV^p6_H\,p_<s8a-[s@@7<1
%$$)mgD]mDOhSorc8[/Lf9tK="#"+M[?+)J\W)Qm,_(/\K<V@ZD0C^qo\sOiHTh&Q*-\\*V`&eH_2LAE/5oQ#3H$3/k_'<^k"HCI>
%H4==u"iL3cZ!N&gkgSIP9L*tE8nT[gG`kt,T1+"p9SO=-^m$2eR`$"*fZG;V-Gt@g%Lm?5oIXeR.6MjP2p.LW"0_>oqg0MTo[7LA
%1j!C8aDbf><&lde..X`06O7>-l+&_&!BM6*)ZC/=Sja"pTg-FNFF'9G1e;kdN>H>Zkg/bVURqfMOL&o7Zoc/-P=g=7B.!/o2+K*A
%m*$a2DT'd.*foBmFF.+PKruAd%Q(*;_<STg6Q0Hh6>nbi.Lg<N`,!=H]U8d0]bs`0=CGKhS.nl?eF"s,Rn7`7<<CP[qLibMc"LF"
%jsT!<!+H/B1H]<jWK_:hWsEBR3lfbeB,K"&<J!Y?afm83%Y_bR91%iP]L.4ho+Krq@.BpePH;9J_,/T]`R)\,@>IC"(h44)n`Ct;
%N*=EiW$&E8!fmiNq51,X'%QChdoK%&=V.IFTrgYT@\L,+[L2%459[.R)H#ti1'JNFhA-DhO6//pY:J)XB<!ZUUKc;k\lV\Cb^g#4
%it`R<`,-%4@D!08=lEMrE&eU=UI03L3mS.g/NSfFeMl([8jD#PJf9Kdfs%EU_N+C:Sq\,9iTWCGA8DP$aP-1"T+8X4TU,'3Y2_ln
%J78=VTP/m*^]I:(;*6?k:DD%`*i*fP_[qZeL.G'L49<hlp<QZX)Y$9mF\dNj/&Kb.q@46]&9.SEa*hj4"W3rg+VdO5dB'??NhnW<
%HWWI0EZDY7cUP&3s6[L*Y9h5/-2MMps5CU%ciCPSb0"YIPMC@7`^%Et=#3of4V9i4KM5W/Bi(#uqY-1hXiS_b^%\5RLFmi]a9HIP
%e[_`dnfonF@R\4TUZaIJNuTe(&6Xt(l,Y+S"6rPRS]"pfcrmLc#M;aH+Yah;2K*:i`V2gXfo-o8)a\K$4>0XR;+$_k9P>[`K:21/
%MK2q6i!m9ZiC<`"qUbetE9\j9)FPkr7sQqK)hj6LA,hoQ-T,Y/^IE)2Ai5W]&YkF6:0C;WArk__k(RhW!5o@Nf[OfKhHQ^F;2oi%
%%sORjX3a.Dp7SP*-rC83'QjNDKo@Fm6[ndC$kh%bhCP"`L['":p`Pc73GWh:h*ZV<TcE>F,:@,^n7Y#F'Jd[S!bqk9$OY#_QQ\!Z
%$lOX/8j'et?/6p?IGL9k;)b'!E)/9S(snosX9YY1\@I=\gdk6_%>t=B?79kQ[5q-W0UE,?jaA0Y-kE^SJ9!'6)OtE\(E4tNW52\f
%U`5;RF/`DHX'lK2T$F7iJ&h`SPL9Yi)g@**a,3hMjY=)$XJGt/c^Dr#RK>3:I'(p1lsEJ/mPC;P#$CH!]qQt91:5XR9tA&=G2+>Q
%1Y/:F!VOW3]\[[i.Ua7!`@c%KHD<UF#gr&V-&Y#o/2J+SAV[uNb0l7h^DlV"7H-I!;r5cO?^,mGOEbJ.;_HRQ"M5Ra:9Y?_R^+[h
%jV0]^P,q$99Yj#b4-ik:.!i':p<,SW+SaW&1o3RoN2A_X9;ZT;d?LjAVr/\%1F9Kp)r`Zt]+np7jkV%A>0r(48c/cti/GhH:o'?W
%mCXV>\lLWpdXdtG3_J"d,Wqc5jkDVX^dL7eDI!&0E=SH+I9&o"6r+E?h;`Mi0AX<c65Z!D_;0'[S3?;VpM/Y0d*`3K:-V$8UEsGi
%VklcZ%bXX&N'9FD3thO^`o154ZG@.Tlbs-n\b`ZB[@@R?[*ELsD`3ab+m3mZ>,OHHRrI447NHINmG_;:87AOie>7#t5tKC4\Rc`f
%)`Nod+f'(I^]'llgoSmfgue'aBl)Ya`AH'+`m.7)e/=Ze7cTn0W/$WM%k6n29?;[cP;3A_%JXH*3_s2'Pq#r%r6u5nZkVU7l=Z[3
%\g\:0+tOVrKEj]k11mVB:]Q^4s5@C,rJ)K7;@3.p4]X$U`Q'mK^bD#b?4m(I$W9`m00tO\-W$2(4,7un\3IJPQ-b.<Gi06)MIn.p
%n,gS&9*1nl*+6qrjCT3@aU8g0%4.'Z_`AYGqf*#7!l^j3T^9]n3T8i\"H)O'DR_oK4mq`b2(AkO<>lgkX[19kkKTjLTh]Xp#<W,r
%O=#dgB[P`;RFOD;WR/7qOfH&hZSjIoSJN7t%s,m:MNlI-KX!hc`%tX;%RJ_/.8B95K9l8_A%X.KZd27c/FP/W9t+,@H>epCI!h0h
%D<S\#Lbh&gZOu%uLH+b)8'QD(4RF:u6l`@8Xa%V$ZN?)HFDZeh_d\B&S[TWPT.U>kp>2NPZb,JqhI6Tt]>rXM&]8=YL$=mlB55#&
%FSR).L/4n*/FumqK%WHEJ*Tu'h_J0B"J[]uIuA.9-Mj;5(4A)rlW!(0ro9M-6MbU`[/IHDSbdPC#;10(VNAR(FIs;8D!=8f_i,S'
%PO1X8m=RiW<HV,no*i#i?.=%Q:(J4oF&+)s>dN7tjj1N>MN6c)frl,ifK.;oH]pY!ELrg1?@KK\a>sAAoL.jglQ$"Tg&,u7PTd#U
%,T2(Pm-)]>lR,&mE=-?gZo]i1l;C"jjE,!pb"mbi.DPCpJDm=J9r%KB)+WYd:n0TV?Vnp.q(\<dm1?)@DEh8o@?<)`bP%-.:qEV8
%Agk\=\h_O4a_u%lT\V*VlRjG:2n.osHa!^W`tq*kPIr71kjn4*C`#+bP`KdT8W4!7Y)bZX(ijDP8Ct4CF0p;T_V@FtJ^53d\K<h-
%-NA75LA?k@VY`IL,O`A&/lW7AAM,H^OKf>Y!-9NMLY\rk+7]L2pc)c2D`^S%I64e`D3iB";4&Y9Qna311^IFHq"^1d`^j%u=lul!
%%.02Sc+SP@fn,Z?dl,)Y-IM13FVcU=iQHbi=h*W@f[7qrYS#.p#-?b)8L,6^eRgY9URWct[pJ!D_7=beo/V3@N8RiO*kq8hce&Wp
%92c9IR"EMD*,6H8(<!gm'I:Q<A0bqic#miI(_R]D3i.n.$ga^BP=d7/4"Nrm__^`&V-A>KM;.8C\R5Xl;clA<%8ScE+1Vj=.H[Gq
%g8JNfE'G<tfA=;"Hd,;s,PIM]_a*(Ek/ht1"9!hV#()c/g+^t5=,#7pYApbo4JkPFq6HYj!Oeolg4p,Bb_HV%,"f'\0M3?%#2rbo
%SlHd!AOA)7\lH._BVsbVGA*GeK(dWF_72:MBPK:=X<IVLomajoBe,QATENH2!9[6Hc$B?b'@Z.):hEd7dqIk!=A1IldA!:VUfWd<
%aYVrPR$lhDJS@JimQ"+>P/=%SL/K5k>g_-OPDB"Dh;4p&@L]6#TNNCQ@2erO-HDLXL9o)pd/=(af5qNgTP%g=[_m&Yn(+BGZT:Ll
%GeaX%U'(XF8mkQd_`>!b\\dIFfhL9,8++jt#.%%m%!eAm6Q+K@F(oJ\C2XsE*0)uEGG;#[Cq6sJ[;(ib'@UK'BD<gt&OQuZZBEN]
%SC;&o65ogPeDtW^Hui4^mKiFY"UV"@VXWkim!0!caMss\&_f"^__le)&e:*4"IIKNattM@9_0"Wegm)aH^G@%dc8fO!M/C9/hW#8
%SjMPV%@k6.0bIe'PBi_ilX41*g8Cc=n4etcF`EJtQksHUT(`^Yd[2ASgED"9AQ'PFT8u9V@b%TXqh+Sen%\gPBnOh27IF#sNUZEQ
%>R3BRMf28;:9XMRXc3pj[aS8U"L/l)H;\B<k.!2`pp=-u5]U4+q@#+7llCLdFL068NT8=rQG,TZ1SaPM.LYh`2m@:WmaF;3K?Y8r
%OHOOnA&&n;Amc54,]@oa"3srb`=lrF9P1)g(PI>[1TBeAr7NNWU39T@:<7],/bk0lCmmk8lig9`M/^'Jmmt_5:I5MGTe#hZ&nSQU
%PfVNVC,i`:+4mB/cEtJ1)3fB?9tB@f237V+J6'Q)l=TdnA*(`%Y]C7.6@NT5l",+bfe%S$59>HnO(32V)OE/+!,mA,%'`/*?L7L9
%Yg6jD*jPnUe,RON8$VMF]q$rRhPG?lSij`b[>SgW*A9;+>UYk,TVQUF]#QHQ=5K],]ilJE._nelJ#RPZ\cIP,k(VMJ7>19)nf%?t
%AO,3PA[^5c;5%)CpAN'lq+IQ>k7,d$EnqGcg\mtsFjr;)hmjeRs6[7]n1QqLrXK/:jfB1mig!%>q]!M'`aeXpCBd,59o3lf1(QHq
%ep-qhKCAs/=CuqO1./AI!0fr.7r?nPb<oR-hO)?^Ifp#jmFLdmiCiq=6XG9`gW[R!DJ"Igd8O?hDltp>So?UaE6KRZ]."&L'=3L,
%oQA,BmYGJ.L5;qA=_DOjcdVTkKet%"kG[#2$`uu$U6khJL,*EpdbT#in330+(W5Y>c-,bfPMZ^]0#u1Y$;-[PRW47O,\f-0)3@HE
%GuZS\GhDBK/0qcr/p:Z4\84Qo4kn.IS=Xe;$A+*TVJ/LV43WOcLE87G),G(t6""]TAL6`7QsQ@r+J3G\lDRB?`<FF;UtNT?6CO=N
%T+G+>$>G5EUr#KTJR0MEpTnkqhAOqTnS+Z&:@C]u`I.'Gr(c]NL9H6?h*Lk5qZC9P.LF=6.e%1`(fm#GI6l28X_jAV_DUZq$H:FB
%E.<*\RJXm3+A%M]k(I0b&U6MOC.r&eg+UqNJS8BSm3iN4k6GI?Ps#.a><"i0E\?O16fFPg$BB$h$VjribSAG5&l`t/IA_\0GInbE
%c3dg%3^428XLuf&_/t,[:mhp?is)i[+8C:F0YiXF.4ui$2C$5_Mhb)\Sa"c7$Y"%+AYsSZB:q.(8(H?[0eDLC8!BGbR28=%BpS>m
%PG.&)(t.[Hi1.'t+PH5ma^'JNQm=^W*0ellIX&4kkTE?"/n3Df;$;*K8qm_Z50K\*)hR:k"Pt8eF&Unspo=B^R87+*=BT5>E%c<m
%)jHfHrD`O/ip&14!p4k#^DDb_OCntn:K-?.L60H#7]nbY.<=f@2A[5&=m:a)CI^)P1SB"n@K&V`W\="8:an/1o;ak64Lt0A6bTp&
%f@E*=fq=^"a#-8>4IeH_GY:mO9R\US`#6+?'VTU`63,4k$<-b>D1hN-BRTZ/QkF^@+e1UEb0;f6/l<9D)t#^Y<O\.sPNa\IGl>_u
%32GHdh8H'S<tft,bF7(\lNZKTg$T[KXQ#qbF7"]->t@']?;!%Le%'2TXlMc\*ega?72kVcIW[[cfrXaH'-UK;QG)Ka.J0^neVQ8#
%S$(<26sB.2JOMU?,0/fIKts.!3hVbc!#=9qdHMXlP"NjCDNsu6:]r_\8F^NlIW&'eHr\mK7%=?/+5dks<Do>A2N7Gu+qo=#XVRdJ
%OVDr]$L)Sr[sU-iK*u`VfQ7X9_(@/r"<_Y%S'I_9%]lQ8ZDt!ic6B2X=a_VK+nAkLfPWHa6I.,VC/T46*0]'MN\eZND58a9h$.lC
%ia.@P8\\Hh=BM_ta3fQV\L9dQ2oIZ)&2cYIdQJFu#?3b>`2*<<f();n>)"(<cf19>$u3&%S$`Z/!'REq+UhscP'/Hipge&P\h)up
%b1tqlo*50!`HfD?hCkONfcgiY]ZVg/@*DA)bI1)3jV:2o5(:=ObqNGW6g#Z<-n/0/3.+cP!0tOV%JT@peU0RlIPpRKn>gi0DD`Z_
%@-SM2bZ'F?pM1IW[#S%%(3?(D!*mFj8g*QPll`d-2nIQrGiC9V\sFl6SX&[:lZio8ZB4O0AOc@ZomAt.O4JBSG29d3kDc3P42Zpp
%C%u"-KOnAE!&"]uFGTPX8gXUHAYEIlF-)kULLP_;D"c?/C=o`_b@^Ke2;DOnT6C7BIat)"7npI>gS*d?7[ACW'<dMZ4VhnT2C"%r
%R3oNhY0*#-?p2e$]2oJ2&O=8mn#%lD7JC^XjB4drf"9IKIDUB]rMMi`Kd.#V?K_U3Ti8'm'Pm6Z2!tGQ`:f)kHD7^um=pGI-p9Q'
%dQpX3oVhCS,([58WE0.i=+IDS69I$jL0#l+.^dJu.hSF)#N*rF)0s>k"KtkcIN`<bCP_&Z:8qbI8Xb4D;T[#&1S%UDP$^UPo[54/
%?Vqrb>0mgbRH,U-nhH<tU2%7WRS)[oWH9X4_^l:Y="6@J8gV2U2XI7j@\Qj0^ak[0V@FWNX!*iIjU>AkE`s=Kk`s9qSU$l-ilf>l
%;.hDk5d!J\<O>39d4+00>2<CBS6-)-6-h$BWg0pF7<qGt__tD9FkdEaX(JsceZIo7HY)*BEF%I66h^cUC%n7"\RQIt%Arg$'"+[(
%hN$sLG8JaLlL"t>;>128Y)2e@6(?l(iL1_WYD'lcOcqGk.I;RZLDGg#KITl9="t=$'[W/g7\1?R48"6ZD!Yg^!TFSS/7Z(1/-\5_
%ONid]hSHh?/9NV=I]1&5Pj.B94_qFVYOG5i8<.kKNj#=N%r4R!S#Fb)"5)JY0W?`/m'?:MBk0W7CUg:>mGQaBCgH]6`5!](kB_KD
%$8uL[NiOdKT<T@$'+g$>))/PDA/3_\U(?)R["a*g<dd>7U_I$Ug!`&?m:dX%#9\P?)XP\@L,,!*2f]ZkoQNud?$]Hi()BK0`QY(=
%O_ms:kd7;U0]7A*FjPg%NDbg5<?TdXgG-#s/sBI+aq;W%G`s$aMOs30C)DPd(=ctoCWAC`W_$<XHprY?K;M@U;8WOY9BI->UJ^A&
%Hpc2Rk#&I`WSXOh1hKT`%FJ:M/f$<d\K<OiD2[,0?!tmEeV=nt#<@^27r9!M""=uNAZ__:MVd8M"gWG140E@D=EO#;W'+8Uf5387
%C@cq#iQCq$].\!R!&QK)fU<gJ/,_sSoF)LfaG_>n//g)dl<Z)&5BAD8lO!m[`>X@)Q`?(*Vcd<Q1p=MigO?3UhJ'\SZ`n,P\Es1(
%'WhkbjgC2MoFUGF:fGMA<2qL\TpT+jn3W[rA.WD!q*c"9b>h\eUW9GeROsC8Dn!l`!IV-8+:_L4^<LQ::tMPXWjM!BE_Jq+!O,4T
%0%BV-I;$+1J4"b2*BJP-Q,(7s]0g5>OG?KTOULl=iR0D^i7.0T]]s*pF$8EZn)Ia$O3u!\4bB+;#Nm`@%\8NZ+Y<>%^-dQi\sJGb
%=B<5n&?`(?SGmLIEZ1uGm7ui92Rg;FXcj-qJ#hQ-MYXXVYB>.HC4hsd`fGg@cWOO0>=-tbnag7qDhs3hSJoRcLnG<9NV,79\Zsec
%?0g:pm-<cj\o3D-GH9EnK__SD:OR1L6rDO,dZ+(<Tk4dMnG1I#\u-MNU/_#4D5b+CQZ/M']2"R"["`]LY;^+G["e7K/0iEFL,mW6
%]atDc.udDe;7Aj\ZGJ/Q\#;9%hX8@C1%+:`-HiKuXC:nJ?k8fDYoAVpZ=`uJ]W^./&+29/4dZD^B\a4ZA!fWm0s%^C=0SHPehHag
%`lL$%5tb_QX^R28Bj,U,H='d4Ej'!YD/5M+V_tPAXUHqrTu;iQXa43HXdE(>2lC`=*5rV/>/MBi_?4RUL]1A^>N2B:3:q$FBJG1M
%L$QL,k/A4S'9jQd$X'-7,7\j:6W![/e=;;es#hSFH1?7_Fo?>VG_k@+F)&0t'ibBZ8l^+EBhO8=<2Hu+4jOJ/2-_&k;a@6-RL&a<
%moX=_,gmi])"rTAAfMDi<;*2h_GYs(3`GbGNZOO4f'OKr.,0/[2r+"?C?:'s^Ffp_Q\oG?7@Z`C#*&CF<F4Le9/N4ZpXKU/h!I]m
%L=rk`3QTmh4=V9e&c&3!%1H'u''F(=*J6uXLGsf.W_Q^YQP$=^4InKJO:XJuqjoTqFXC%cQZdZ"f!L#PW:8:oEZ;i<bbR1LWQK!2
%q5`^5`U%lLLq]g>gL[\,(D_j92;D+eX^D\%dL/Z9+*\mjLF[+?0_?iM@#$Y">E%6ohCcfC_(.L14_m!O(oQ$J]J(tj)o3Tfjae!P
%iGM+6E-E!aqjh?!GB0At<X@=77Y"N\ds3cR9%%iP60V=u%,.b*"\i<(2_N4X>HW^BjjN)M,m?Su8lat+.D9rcH*0etC3(HP4+")'
%BtS^ICI0KUX)!SL;giE4(9Y&"G>n%946[WQf32uD_bT=.^rHl8K!Nb7fB!kbf42D>q?Iuk^Z^8(.)lgdC4BkkK63m^44J$qW-uiG
%E%dlepE$`f,<jSHJZD/:*@\J+lT,eP[0u,3(oR7Goc3&1j1OXO!dtURg4"uE^93.L>\5=l-PQeu(Zk!mQ]RC%lCjWMD!G*/=`OXW
%nl37p6s+jdQSf!u3HMrAQfk@ql'`f1;tdp>#K=,,0K9b%$jeis1aJcb_GfSO>-Nd$F7irp'>rC+;^_]FS<,1VO_iaC;0$rZh&ni5
%%;Ft\n7_?W/bf%T!+.,!@XsPKU#jaOonOL]<:UJf<Al2u>)FXk]1O)f.]GVd3$>7Nkg$G,h^8*\rY!kt/-Ufa;cu+?>]!I\E_O?d
%(WCQ+HE^1rTgE'kAHgM?(YsQd<1qO:anOici;08_T"7EOji#&8\h^'PiV7<`JWtH88oTN=j`D_flSA)"7rHNkV]N9N[=@1BJ,A>o
%V7QQ7S*o`J:V?_uB>:$?5UM3>JT7pM84Gi/k@O4[X<a\_Q[MqJUljY.?.3f58%V9n-T]J4bD,DIm@S&NEW>HT@s=JKmImHZVqljp
%_aT2?m:WqmO:85sG7q1rMo*K%0JbHs[R8s[\*9Vd4l<E@U@VFRojf@WY:C.*"ACE"9c9.-$3danZ6Z&/8'okUY49rI],5MN+2-FA
%0ju:g@!lAc:+MQHW%Oq0kce\-ge$a$Q_qi$+Ft1:-#M_)-nl[]nsQr6_\`8[cb^(Zir]cZBCgYi(1rS&Ns>D01JCr1Bs5TB#DXWS
%_(BVR-M/k3D3iF^2+0h5F2m[h3Ts^S8<5+./)B6Y'#:L2hE)nYG'@magn-;CGQ5?[e=aoq.>Cr4[Z&TW]?j7DSOXVI@Q)m9$'.s`
%KF?Nm9U`D>0hOWdNoj\Ro=SE']N-:SQ&WDMe\W:Ul9.K"c;<4`',")"OhuHcj\LOL:./rP905OoC>$F["3#IOn/Y6:f:dX-?rQ&G
%HiZCI;B%Pu`N;9pcntm0(q>hF;UnKE&:8k"GLpTN:ho9?4WA=-jc$0%LoP7`ZmL+`j-lR[kY&7>;Mq9(_pdZS58dTDDDY@qb#XaM
%NA[a2.U0KV'\,@@c[RmTPIe_H5ZDk4h6JS3MBA[U&b/js/1Z,WSnO.0##(\q91TgcKCKVoLilZiEtEYMHm2ET3#f`<b$',`UlgSB
%TJ[)Sm6Yg3!eCWrZUlHt"+_^BMua=Y9]T>fU0n.DXbrr^698>0An]2^D="_/E2o.%poqEZa0=c?f8lsI%Dd*g)@T@O,KU/]V_%%7
%<Q0"->%s1r]k/7,OF)G&YQh68.(Hl=QL0C07nm0]-Bqe)VbBP<.-!'EiJUT77\O,t,LV(irjEm2TIg:0C=:NnDTYrQ?71,+#C")a
%)=qkBhl?doccsc"A0B`H/0hXG2X36^I_oUeKl("&[7E'f9fL5=fNEot9\EU=%s;W02tFR;c]"C++cFrM@6mmc&o]Y/=2f@I,iIZu
%.\4K+(BJ`4bc5;TgOc@06s`&H08%%?W-gZ`W#\=A2E0*\g*4KRD?!ZoREr6k1.:OTCN8IZ:8'9Xilt4!a+BnTh/ElcnoL"FHTr%4
%9"Ds7Ks1lnHXrea)$(OflY&%A8co]F&Jh=g'I8rg[0Xa=LY3m0+r:Tmb3arJSBU">dMC=\",qcBd;Tp'(S1ZMbr(`>k/jAXaHheM
%4m[puMUJQI2%jlsa5DNlTeHYjH)&Z1FG^';[C*r>TO:JqC'S(>TGEeD*P5ag_NXD-)fcS1Ti2*\a"9T^hs2T2mbhjD5%?eErd.A6
%+MYG=0OCJ=X-.bI99b-:2TU3]A+V((dXp^0(Q#HE,uKcnUKik$\2B\"k9<cLZ$PB3iJdA8&u?YiFP8a3!n=.a>G=+(aUV8e199D%
%e.4l/K&+1[;.UgBZ@a1`rC3Hq4%W?4(+=.sfe]Or(oekUj$fO^V[>3P\9<5?QTVgN"]%s#,N.[?)]'ktYj]+9[m91OeWdb;_#73Z
%$soSlNFjrWh68K/`"FI+\d4O[/qJUr'JXihbre'XN].$9_q]JSF0:m/-\D_i#D;M2TRa_U9T15oM4;%0^B["XSL<;>'`>>Wc.qMZ
%e&9L!q<",?2Ni2S7Wf1[Gue2s'r0R/RUltA%>[O^Yq4ZI\janLkbWV<-/iaVA:g/u*G;&6/UB5mf#>Hn>(eSVZr#D[m:\)kb_-_!
%alh8Z7Y*"bV"T]f9\kpdMr%/:MPmJ-e'2.R0Ja@X.65"8,a+^6$eu0l9)C:MQG6>Gj!qdV7l([,jt<+\0It'.P$+`gU[$T?\A>+Z
%"K']\]\Sd,`k6#'aPSfpl=YeBe/2O\h+_scl_[f@R"W%&g')LJb/m.q2be[oEb2e90T2jgDOP)I.n8"D1cKaFj-lU\kR.V*(r&')
%hOmQ_WdQ]iFDb(g@\'-X_6@\s_4n`!H!(gr;;kao/Zpj!Flpkn%/Sj+ba.qd?UB1Mp(JL@r7G0LBVT&BW:gfS*I[4XWbI.SO[Zr+
%no>mBqP@J(]/Nm[,?Q=?Zb<e^+15kV>qo]mp(>N?4drs_g.*`_!IJ`kUn_?)J]f[LeU3RmiL8Q0amZ,(L1km$gS7t\Dp/_Sra#Hl
%8"^[M)k>=p0@-K8/VZ:XD%<%,CL"?6k@6FQdJL"<>,/=HW<[9K]td:m:.2ICp(HY7NG,S0^-rX=>jGBDX0g/tM]rm5Cr(sDed^oh
%?Y+1u<[Iq='A8C-?,fU^SB8C2\s^Wq-n$,HDI[V7mgE#\=\.s,FRO'/Tde4-%jT`Y,1c1!%)/dq`?0^2pW.5TipDsjeG!`Ci=YAL
%[R9677cb\RVUqCcd?q<mr8'oN(DXr1%J/cIe=O(mbs!2N>W6joPY>lgZFTMkC.8E^gj$.bP'a4L?1<g?jrW<nA[_gs)t"SMCZ9fk
%DcR$^]*3W\\MA2Be1:!i<%F@*(r[/#3\HI?A`IM/3b+Z%-$Yt/fgZ1O1Wl]nMRVCBR3o8IGb`)5?<W2qJ6&/I[dnD5[S:JGp^2%Y
%pXkb!%/2Nua9UF&\2;tC<g84%_&2#;1@D:<R'>mZD%nm4f!>G8Ku+5:=BWqL_sAclCo]$)`RR<:XH:&W"[\OV[3>"cSY[&i=`U_=
%da2=D,&s\rKaBY)='a@X^h"9U[\mEU$FPbCBko21Kq-l-HCGX/TIElj4!h-ec6N[r+cE*8IP5UF6a3RnD:D3h6i\7d(-F0Cpf]8(
%-5sKL..14"=Kn8?L/DCVHP*>6]W;k_\OdUdY+PN+`N8JDKBI4Bq.@>I.q[mD6/9G\7PE%2,?M<_<q'1(8!2>S@TFETa"CucctMO=
%O:mJFm9=r\O&PNLj]VNGI%6O8h(i='LY[I#,=_"Hc0E%PkoYRRlhr`FG@Vl+ESGQhZ#ra35=3&Z_K/jIn1iQDG8?Qe.rLE\'*GkQ
%-3TY2=Q/3F20/P9?*d_YXg=ikWt;+H[=dG-R1u!2^EHk<6RqfaKefP/9;=o8[]PhGOaMeo8A?Ft5NOD:%Dt5KbY@V8)W(>-1XYdR
%U0"trbX?FaZ,/<5GdGj]JPK@>+_Si'VokD\%8RYPFC]sU[H7Y/i3Vjq"<hH&fbrijSVOVqc6-rA[]EU_d$<)(r7eT0qD9K$Dt%_<
%$ZD3NcJ4Dp"6Mq2dJ/s_;Rb'8U&uRkSEO`C+H"Q1f<#sg0g%(h#1Y,2^H?C"hDXIlF!'eImBs0)HW`2+J%O\=[e[<-YOuF+<$J1i
%bR_YqQ`[84SXqg0F.`8jfS:5Fe]5XifOH`%[i`)Pb=HI!gk5K<;k`[_Yr%U!]@C_GepPp%G<T1I,u9!'1R*Cp*R$.@2-cgMd-$`a
%>QJS:@3-FjD9G`WAgH"[*P&mP+'U7-g]B&GbqH26l#g8n<99XA-5'HH^Qn<p?(="mhf)e:nA(u5/`a&W3.i(ikNnA"!eOt)dtB_A
%/Eh43I_]\(.:j!$&m.OSVth*o7cU[3eB@kLifDJ'9HRYg.S86'fe.@Sl>ZqbF)0+\le@6+LH-?p@E%(=4Ks7sb*H1U@lWFKAn;K#
%AQC.Bm*'*KAKZikG(D574ZEr4$SV.Cd!Ftt)N7PNB-OU'TT^":*8VP-/-`;XRC\.0b,UuS+:7e4K=_\VBQV1(jNfoc10U;CO0bQ2
%brffHra8I^)_37ITcBuF!kB2%3In4-qanItnIVcBF-Y%aZ70^Z&]Nh],E'4ua"Sd%0Aec=_*K%g=;sm,%:PK9V/C^Mdh>AumsY)C
%47=5QjC$=?q<"bun62jQM2oWBb6j3+Q&WF/<lSfXCoZG2[nh!]pKF-7FfB8#Y#HO`elZ]F5uP,V;J!t2,.!\AX(4Yg2BQN@E3cs:
%?^[^qMULTfl[Xob8C+0XW;1>Eir1$0\m;N"OD*fTh:HsAB_^S%.0hih<(mU8Np;"Z+_iZ5&\YA`gJ?s:[#ZR/Z>(U(?G(;b<pbLj
%Wb(@XYB6m9cG-3QEU/pCS!?][2[+i=3%("=M[:?*/,-bN%p(AU'Tg;tbtnoD2B;;1CFh[SDbCcdd_h%japO6WCpgB?XCPbU*08Lj
%,FF`Rp)ej6n(^8O_VQEsiG"E00(-%+=</,I`TXF"U@"\8995F:#`(MhAlWBgf;"h$]M]gn8-?LEZ8;/.*h\\3b:r#b)7YriJh=8#
%gI7-qTrZYachlRYpM8aT%@\%HV'*@3=CmZP(<B0Z-RkTA-_i;J1<D.agOqiSX2e0B=2W0iAbaVWjnT*ZZ4nL23PGO:IXqj]k4j*B
%RISDGDJZp$ck[Yh0,l"uMC(D9E(cfeDDF2tE/1##T>fH(d_l])B+I]m\SJHj]aK-eqVcm0:cI<<T'uP*E,s$Z!34M8j4g8`_3<mu
%*ECAn9H,#0R#f$F.;c.Fh?,KPSPjAMAFW,>gu-n;2F19CP5/CVH7Zh?7uR<%RhWL>16]Ju$h/gc]`dR9X'n/n0HDYd_sdP3$m&M3
%^c7V.n$80:M?JUBboo#]PNo^p.IK.=>4,HJ."bu5/ehG:S(+nB3!["io4V4n\c&nC(A;PBU=oKL%GeMXBb.r/e#ujYUg/[aK6'@F
%lVo8YV]BtFf;/eY91VlGBC'M\9S_8(*uf6KngM[:5Im\#f#R[d5TG\D\pJ(_qlF6XeD'G>E&f1Z1f:>!Z`Y2(*U8:`nq'=Xc$]Vp
%D&M7Pg(#"YQ,L)@*[BhcK.d+X_:YH._ePKr"RQd5^M,_eqn!K`dV_"0`jEMX[Rp1:^-_Oj\V;Y&DSIe^Y`Dd<EAuYtK3/8Q>.kll
%[l:tPECls;lE]D-\op_7%Ys%&+..:c$+HBWbp]dO0IQIPmDj(bDa&s1k1`[9T=J=pa(+j^&)@.BHeSGMqTT6cl#uMiCi)=)6Q^dC
%\IQ0P#G,MkeSi,6VfcoBDF8jm*,6F)5A`#02[k%embY'Xo:tY<[ibEZj)LBb*W:oD=&:R"KC8r3:Df34Aq"/K38'6C.&p(kU56s7
%0ZpVWD%nfC$gQ:)I(QCt`%u/M2$?REb'#DCb-86[aQhbAb.)WAL<M&u#8Tcj@sVgQ!HdD?N`b"=5aW8QImHPk/5.b))ko)&YNjUU
%&KZI=os,S\!O!AP*9u#l2rK`o2r];X,2RqAig1t';&6)Q(CjoSSpp<N'5-R:b:qsojOH[qf0l7N_j'626%(-Vgh8j8j:b)F)@i(n
%F7\=)=BA`C^luNEU@4<^<k6nW47J!J>!ZWs[R5?rb'W3@X+R"/82X'qD=%mAG*pA6jd)2#r5jJloPQtM%BN%2fO@Zn!?n."UDI<s
%P7M:t)gE5<DKc[cNA\bh`p%-<lV@=b,/%7H1CaksfQj7bB[h_O]eVB%CQMMl[uE.:9k[EGjcs!YiL+Mh(7JjXH&6:cen+P@B-,i>
%`B*(oE=rD54/6)l"V&s6c#/"4Xc9KS$_"20&O_E\E$n:0q$YHE$G*(9[&bugg5V@d5#c#]l`/aD9"VHjWjg,YCBS45B0ghGOMq^?
%O4N>&i182`f:p2)c#]p'DQle<_SIVcc9ZTZmPa@+!`K[c5jJRf$N"Ai3V5/Zh2qXao=X#K,1FBF+4&phF<#B1(ADt]_`H4tdK1O;
%M%ZZC86`1-NVYg_\5Ea,a/JI;6YFa*X9c*nFEXFDq2UL>U%H%$h)N!520jD98t5:UZoH[B]nRW(O+hUC;'BtG+h/ko_4s;T#,Fdi
%F=MGH.1Pd\W]J.2*B5m5dK':#k\tOa"`gRl5I&g,OEU;mOaT01mg\85JDV4Z/Rb.KXU(]^%U]ZPEZ-EJi39j@pC'S%89&D"g9nq?
%Pd3R$AM8Q`W4Vb<#`79t[=nf.&(O*`E2]B<ne&F_DpX]UC6oEJW63[rd5's/dn5.Qbah8WPhBpkST(d6QK4P&=iU7<:;__Gi'b2H
%>1Br;:4o2.^,QQ=At&46SjLQ:>hB?%`Fs3]=bHtaG#8fc@>^uF:.UIFF%Q1RP%#J4YM(ib<XWJ'mf"^Xh"-r#e^!*e.S+p9E[9+q
%R+Fn:.j?2iC,2JAb=?pO>h,V.nPdjS9EL,Bj,'f"N6`'_F@3I<da9*fi^i'K(.eXM#!ri.]0&fKM5tOd'qJp28c=cO^':FCV%^,t
%#jj)[m@ggXS9jg8a_9f&m9U6VbHGX;]</LTft)pcMP:,\\S)o.RJCS(1[p/bD@`NK3"b?#Eick!i):++i"#-QF.Fd/))e4CQ`)aK
%*\+3iZpSV*V.brQcbbaB=k0/#=&4VS"rB!iNJYLSIY\DgLi-1KL>T?Yh.CaEM5FLU>.^`,<Wt60"]gHQ:gF7!4k`mXR\&1WRiRL=
%S^B<8ne^jt.>&0(GG6)AYcd\SOst&kMc6IG4]GKoBSRd,)24b=)+!tKDTQhPkY:9o(9gc@M7VN"]nW9.&%8_jBcZ$X.\g(O,d^(J
%.RK?_/BT2.gF27/TH#<2?-lg#WPqG(PhTr/SDKGsanM"h!0Qt'#*!n!9HUp-#MZ1;9?YX2"V"%t;U2)FJ][2N[L,;^PbOo:,paiV
%,M%#B)_\I"kCT;E<R*XUG/H0kW&@BDo%a:\Gk(+L>'(tJ_\G=7XdM:28l$^N!+Es,Lq]lRF1`CrB;/YRAR8mB1_4lRZr&oYFrp+G
%8#r)bhk]G8qn1BN]8$25qTLpIpULec'eLQ_&a;gRSq.TgB;+YI$S[t?o$i#0<bFhAk<$'/U0!u\4[TO+03V,/.%f>oPlfhZiJkE^
%3T*d'lP=OoDe(AE)g'42fZ`KKHAjnefqYE%PCm0o=u2==NskW?^>Il-lk^A2@#KGinIls[?.QIPlqlT[4ZSSN`sQouQkZrSVa,UY
%'^19L9dSNt<LdH]^J+%W,3;[#T^a+:nl@kHFBbNG.)@o>Bt#&Lf:)]oE6kOcom&[Cl9fji)-O@AWLiB2?4g<pIBOI^f6#R5$O`l.
%U-;XG.!"YK'dqX">CC[nT*s/OY46\SOkSXYoNLloeCm%6/U5Q80stZd4^;6.D@E*,bl$JSGcTepj/G4,=:G29fb<]$B0Y3VI7>mV
%g,&D7bbU%t94RS?et>0@3c@C@\@B7O1WF`!j+L@)3LBE5CNJ;GBo;M%pL!JVKbeNrF=+a[*'1Pu&!hQTD2f%/N7**`Xl3.3)BC(L
%<aOQS*YpH\Kt-IY7,uDV]c6D6cFlLJFK3s;!L?j32gYY8.d:M[Dh(9pJB,@a6%P2S`9e"E%_hHBmekCHDg5sa%>VN#J<?8FSh"QW
%@CH\r7bLBd-sWN%qp!NtMe4U<4c4]4F;Rl#FKU@FRb-u;?Oq$u\@Hao_p>jI*AEn=VmCOO_^6c9f'[L=gDpcpb8CYIr6fB.6bbhI
%om?'9bU.*R0,2=$nC@3A#@I%0GC[_Mp3YsUFK"d>K&)rb_Wh<Sq$S3(rIs0NLGI]CTYH*:/QHG1@ldL8pA%'54!u>n+c6m'r^+u3
%;s61>6JpAlKmX&&(9DY1m^@?bD*bj2BCZGV%Ero14rD-%3-XFkUm&3gPSY:>b#$It$n!;NNJ5eooBd3;<hAIs`HaDd1N[CsD*r1%
%ST$!Ua@K.d*f!@@87UW84!FTHp2@@.T<Oo0qjlGApn___H$'cRcL")pfq=ZQqtH0!`u5Pr3,<@S.W0('%g)(9s7]:<p?B#_8%UQ-
%FLrU8TY%8chIVNd=6:A`$9%[D01L9XcurDKe<ibIfGs0F$O.j263k3bc3RZ;j/$0?VDe^T']kACV[sEXJeF,3@qT5qKt\5#jL(?M
%J?!\GWgsXe0&uL@mt]hkKQfT^p&%<Mp=\BdqV]i"q;&PE(]_)U-AA@13$Q]6+HA2A)F]]rb05Dk*Qek4>T]"Ff*@ACUNKIZ0L<^/
%G$H-]05T7H)@iakaL9(\\K?Am'"WZj-pqFKLhVY?M#h6q=c+8qne0iR-FH+WY>`Y3ogD:0(aeF`@\uFJ5"`o1)'WgQ))l%N"'d^)
%QU1,CBZu5-hLY9Jk1_2j;8;:&j(p$sU5*:^jO%W1d6L.b]V)AYs8T'sBk27m1_"4*Di2$]lEFsPlW2olYR][Ift,HW'7?jbRb("^
%Yc4BkUhsNd;]cGRW[tQ*j6X:kVND>sVMa_Y@8-N7,Ns5IV@l+kajaM*Q^^mq7-(ct[T4k%rn;Tq0*OcaIi*0VMWqqQb[`QL(0og.
%hd3O"URi:Mb[&[R\iVm:dgNUl;\-L:11#\sifP:t.Knj5;8Pg`nf:s^s'i",*8#)>,#*s[)HF8(3/DaHXbM2nVipmiSNM89p7?6$
%VI%iiel+Ts`o&R7Q.)MphFg_Z?s?RC^nt=>iqLPD2>V.qbB._`hE71qMMZCK@I'aWE'NpmP9*94E1d91k]C6eGWHO)Zc8Afg=T+!
%*=$FYY4<]]lbqGpR-1lr26BK.m[lJ4q<DTcE?1s</_G!noCaHu='q92m\O^15&igWp8bZ2n,L;P*)HV0jkp&3H2>L0Gl#J\6*/E4
%k0X'nnUJQi6aj=R?e?S&its!7M#qcmgqj$ha7ju>kMrKri6QoM2]:^]`WmY9B;*PlUJ$]'TJI)F0;1;b&1laSL8P0/n7dC"<0fcY
%-pgBN'%.G*r/$g>nL#luGSiUT';&%)C,-7\=N3]Cru;(h6\s?l1i<gH#9k8U\Cm`EP^aGiUdVL3Pu$m?'*@9$8B+$:rUmO1NkaN/
%dgO,@O0Eg_.O?=I*'=Dn/nekZS9(I8*PR%.`fi@rpN&^nPC'7$qXiOcX+U]UI%7fBrfiO$'iE#%`[rbKC1B[r`POI,enQU%ZtKP9
%/=6]"_Zh&_!/8l&#cpujPnc=[,r!+#\!9uWU>qE>L4+4kiS4Sn1g#*0b4aQsK.7+q_`W%Y=BPVDI3-gTSCupYE6CkXBW'-Z&_sTY
%403os$Vj>[3T?nE.&S6K#hAb*nS`:DQFC=Ra,npR.`*G8!`sa!_ckPC%n/S60,k$?d0&`I5TP1*S(,6:*34ciJIW3h%(0'L7FB])
%L+)iOn<,1s1SB\J-=%bD"rGn7Tr9'fZskp!Je7jR&Tg(rekJM@(F5f4WY!o)1`lDrc:!D9/9F#Ebtq<sT=BM^"2q&""thGk;B.g'
%/5G0>@"KAZ$6Zd>n=KarE-ZR1N0n!(pk0q/0UDfaKZ<bEHBKp`//W,M^kPuPbP%6S@G3aPXOkfqHjh#\UcN4]Tbau&iJ&H7l4XTS
%E'V9*OJk2Dn2Zk,\YF*eeXScF$bHi46JiY!MamfU%_[B(M#r4UqJFY^C@WJs(5dr%oZ_^3ej@;fG@WK<%Y@QZ<.!Uo_9m)T0."W/
%QjN_K`[L[ZKVf<+R=]Pd,&,4FjL68ti?BUO/K,Sh,5M_]&VqPG*_FZH3)0hok/\beP(0QNoI$pb4RlP0ABa%p.,CoIioLHs@D4!"
%(m/t`@htHUK\7h:Kb@/R1`lt21q+oD9cHp)"rJ_*68>^[-stK9)nTr,<lgX9#WWCt&k1f1K5EgC]hm\Rkhm:7'\,SVE=[c$4<5ht
%#B>Y)X;/c0IS45iB2(rhQ/Ek/gR_NM9Mp.'#ZEq'93EGhb\0ltN*,DW^kmf@"0!X\m&^G\AggX]63_p=4p'n/G7@Q(JkHMMQKKCs
%J(7`m.[Ep-QsYBt_bW83fr'Asmg7*+k!/-uB+be"irP6mq,E,>K*7W7d\#69)2?<7"C^Cf)=MG-d9)/_>).2@>bdm>rQe;R&/mIH
%$9X@ZQS]$qLO)j<6%pl:";!7-5`/!Yi<VBR'V+*gRl;_#JNPZ,CI%O]cu73i.msaTIHOI$mT9tKYikHs@K+lRpRcm(b?oc!_uK].
%o+,2Xp[.kHs8;L>@^j-+hLGL)?iB,fk9&Q1qtk<Gq@?B:r,4fIs7Nk9Ij4m[lT]gjhu;m=5C`@,?iB0^hgYCG=5X%qq[]ILs7PkY
%a3u\ko@<_VT!".PeZ[hYp\hR.IK,f2?[hso5Q'eJVu?N0J,eo.hLG.iQT)+\qqZc%1L;0j=$Q'miM0Qu+4]*<jR9h[mQp/W^3fkZ
%s4>kPq!'5VkAS*3j0rBUJ%0sla8YLOjmU&:J+pO"r98.k^RF$qSppM0hu7THo^BQnqM293J+N^>nbng3^]4"_=1r'l%]&q\E7t\8
%iBMhbp$_op^&csJJN`k>mJltXb9-`J?W^OIeuiMPs*2$;rp0IMhgbF=$i`=RF%BmAO8I5;qn$3"5QC8kDnc,-4a-%:!<*KSP%<:m
%\>2t]6.LQY^+LQ5AGlJ,[oH&Q#7.=Snt\Hpn%9hmJ?t=N3?Fi,_D@gVDVk86MJ3P$bbYOpan)jY%1d&2b$P]&Od5s>2Eq?CQHZ7T
%;FJ<>Oq^&m+eArh8I$[P'1p8eq@jMp5'\C3Bmu$>q0#DC6bKK)s1j]2!p2iRXBra/?_2-rWUKR_n?IH2^11[M9-!X=^ZDdTm_<@D
%X8AN;EVDo^>p&f8T7-5]:>T@UqV1JQI1#(0H.a!U*qL+??__2,=T!;":<\]A9ZVk>f80%='DuI&3fLBY<4AOl70PA6%ojm`4E\tS
%.((`C9E4.+K(a8GmBb]THMHDcT')XCK_,**QiHR2%mu_3p\gFcI;.-fdi@N]T)=_Kq`fK&rJ1.)r$;ktPQM%Ok$sGHO82N*LX&[W
%k^WOqs7"i'J,J8KeGnWoraUHQn*I"QR&.#6l7[Y8LVUim0:gtOPQ!sJ`Nc!6?(LWU=ElAP[fH.hF/)KHqF<N]3JI@27-?[dDM@6W
%s(LrEj5^17gWs6gj'Up.?fg=_XaGMh@t);<&LuOk%2?TZK96dgG56<tb^bibYM<&ABlU)l?uY>5V*GQ>)!-CF^GG(lR-oUdr5V3J
%!W@BQ'h.Q7mniPaV`,KUZZ62c2[U?-KCIEYDPm$s1B*/Q7'Wg4NILJ/:f+B5_pnZJ)4Nr\i-)R"-:q@r:^3Z>Hs71pk5^-Gg!pMh
%d722ZRFWn]&4%)QG)M$\:B?#"bik&9DZ!G`O[4;+qgkt&/i+ZUJP+q=';@^T)pL>%g2X^OHrFQ*6kO$UPI_e>M?1@d71Uoi;+9e6
%b3(NGmto(-W]2Ia0<_hCoCMN-D_NkXYgd2D_.S:W\!])%0eTDM3e$gKM';q5q#'5NaLasoad[(7]07-RHcs$-"Q-d@m<Zt3<,./#
%_[+/'p%Msfgqhm/F_7g=jh/cD0Df[+Detd;RbmW'm_/(,/[I\=irA.'Yp3jAVZ8e3DNj%47<u35$%E%:0W`41DgFo=)&\9"!K7LT
%'QdDqbspr^Co-W`)b#Jr-K<m#R7`b1c\.lCSTd]ZRhNMhjE7aeV\oBW^VsWf5CDUF=6I?/_Ws#PMtUgH(si4l0=@Gg^h!H]=5?(&
%7H"ur3F;6FO1&U!lRQorqnqpW+22K1J!L<5EOP4pH,KQG%'LV;$pR%/$UY&PE5[65$Cn`d^*(G95<K_BpkPIbb/_gM$M+Z)dGk)p
%)4+S$cP,R<rBm9-rJ+I1om`a[p0ZqT?fgugjn?Gn\a;',jc`u_h^H1GDE`.JD$d)_723_Z+Gmh]"CH2!,86b'.#(QcG!0A&PdsTU
%TbP]C8M@J9hTemLhn%d:fCn5cG^80D>H_Qj$rXjsH"?X(*]h'[O+b0!=/3TeH`P"&(b+_Rk]FdE*XfIfg(33+Wq/YO&(42V,Kh8%
%3,[/8%i*KK"pZ6,:[42C4l2jQQOSrR,<uQr!4N^E\'2o&ndfuI]"'b>BFg5J5b[He0d`=n&?'!/.*FmSS<rQ=qe+heSU\VVlZh33
%;ZCEjjbA'f>`bN3;NOugm+4U4QWaJlAmc'LOFp+$3Dd^Vo`t+2E8=\a"B[#*lek4#`(JUOaoN4>:nA:5Ako@B9M^->6)l.FJrEd\
%GX_mOgs?^+^.1Z#RJ<#/-(>Vt1+NEt*/TV8J/u"uS<,h?JM@<I!:1:8$)Wf^0-T0"M&[b]`LO5ior5aRKA"@#%ui:HAQfu:1JLVS
%"f?fd&Y11ZXCGgpLkr!@,tG2E,LTLT(kP!P#[cg4D^t<E`#*qY^#AR/*\GhRE:uYHXCH>m',,Bj[mPpfi`,Sk&4sF+$kXg<+VLLn
%a<F-/cB3klU0NLBa,[*kjaI;$*>7CBW\A[CJDf'+d^bM01.KRFJJ)M4_!s:W)&Si:#*Y25*FYZK).a/sm3k8^'fA@U>:(MaJUF6%
%>jro,1@3P9i4!36Qq]2'GZ`,bD.G13#]D(=X6;?Qc)g7>hHN9\VM*3SP`#D"!/gXO+?Y/%M4,2"UdPZfc\3#]#8"RKZ+;Z@9G7R.
%?+9iI$)O9G?IO"!H)\(0OXh_s]#GX-dXmqo(+h3j'8X-i(SP7?>ng*A0UHD$:I`\CL94p/7rG%V(B<SlK'>$*63o;>LdXMfJKuM#
%U!uju%oMPIm&LHW;-=&-:e/SWpl#HAEojQm:)nQW/^gYO+cajD0SUR^9ro"\/ruk!i+#"=Zs[128/9*hDdWQT1m(G**^NG2r7C^k
%d-[79#7XJ)fDnlQHQk7^<e3D!A(Ap`e@6g8F0)XHcS(+K`=!O=![Ir7W_1KUViRtV7:Q6(`XJ@cOb3Xn+hnMAi*f0.(4OBj&pk6g
%*Y,s/#=g]s&-2Ukr`_VW?k-bA77k*J:+%c:5[PuL+:!4Y)5_Fhs$`_P&elg*2'T@5;j+&3lu9p5SSB>e<mo4&,Tr*<N6(+\Z1'iB
%=TaifEVUi#DF4$YM#7e=,fj["-o5rU0,Ugu,;N2)B6>OG"pE;h1<A["`G+l#F$K2>,+92YF%E)M!4:(Q<Sbjn^/>&Wf/PUN2+2*^
%TZDXG8DB)AkD$l`il^6T-iNb7f-2SAqosi8U-]Q8Wf"N;epGFs-D<pT96i)W_AP_YZUDsdfX^_iP*7@=(Jns`d^>.[G%3*/FW'l/
%DEmf$)TWW4EfWG5Q\1FV3,0>64)#leA&*cFR=X7W<!?-]0j;JPP6!\9Qt.l]S[H?4DEBI,;f"pCZ'.]5BZLOgQl8G\isk#[4nW5@
%CW@a>S`XOVH]CPhKFVT`G-Kqn.&qnpXc1`V6j*VJ.1aF645',)cVW-OEVe4`#@I@bLQb/%-qGH^%n09lbS"O;Vc[5PoOPVLZPj#e
%,%;cOP:T-EMQS&@DhgESnd+6]`ti:),)lWqDlhNK6sSODLgILa!9TfOqH,/ekZuN')RP:"OV%Yk3CNI[$L6Z-42*8Mh,#Qf_i@pn
%[$u"4`.No;_H7T/"+#b9Rb1LCcOAkq8!98`r/_0N["e@W"TCTo&OKdK.5QaZ93W?MBGBM@@70u+64Q'l8fb59AVH92kSc*kd`<91
%N7EV%]hGAn)1km8W@J@>i+X4"7\1pf:Bofhja`A+=S*4O`e+>5s082B1gr"I,i;E!$SDQ!9uKW-Hl:F&7X_(gRQ"K?BF(GR+9s\k
%6C_\!GfP"s<()d9Ee!<EqWX,;3us?7,9@#h9:r+6_SnL+/2:c"c+$_\49L10:,P^)GnL0UR.#e+Be[d]+d,%C&R!QpeZa+;7[CMt
%:CfY`duNT5Vl^#,cCp45/]`NW$k=iJDF.7Y>>Su@;sTnC'WhcSH5c&ga)Sg!7J]e,X(MSTP\kiHT[q7bl;40h;=G4JQ^E@RY7Vph
%L,PUGaGP2Ai!qV>6u7i=#C;IQMk'3mk>\0n7B[19;iud^`O_aQH*Hob:=(5b3Y]lZeg.,\B!"hX"<Z?@`FY`QW>-A@+]T4nMl?TC
%:5Q_"dQ*)V+,:0AR0!Y-lkDTVA>ZSP:3i\F*aqTF'FQP/<c!(scPC_H2eh_EWJ9sl89tM1s89LSaXAknKk$f"#7iBl6V:EckWo,D
%8I%en`q4'aX`:u?)FGDoMQ)jV1IkjglFcL-IgNM^L3`>^#^lmQSZ3o-q:+L.kdZ8:g=36'Y=,aC[,3Y-)PA:F*s)IO'5s^e`1CgG
%FU7!;0$duWn>r?,Ea:FiP.-0pfI"C6NggE8NulW(SudtT*T]ggs-rSS&Ad\3FYM5S8=AHHKeVL(VKR$JdSeRde0TaILU>=MA'X7I
%kId(7I3+PA#rO*<)kaJmY8!"hP\oS/hM(+^E'fL1k-rZgGaq&Ais[+]&]Or8PUrPSTX@^-('I1__[:ho."uIJ$OEnaqf)N3jk'Om
%,QU-YZ5*NP?/43Ciae0)&k3f$lX=`X3)"$T?m63r`@AkZ%i-$!JI0%j`9h,)@"R-4O=\4:@%rl;XpWbd9Id;L>rr*DRdImZ?n,Ta
%2@GGY1-cK:`fOC10rQZZ1)57)$qc30_7W,dGr>FbEuG*jC%`FVR`q+r#G^d`jtnJJkAdkY9ktZeJO.lIUAoKsndlLmK-?Zi3KN6c
%N@]$BG$/K42'T>r.BAo1!n@@YQXIW:f!$>U$4&sjjiGg"L)CiG.9d5C#m;Br5fcc&@!0Hu[_TDj1a.h4L!"dNK*U06$X9<HVp.>Q
%)fWA)*'deWji#@fR9pfTS:OoIM+[u`)tMs:*.CjAq:M,3FQPDjha)^QdEaZK+mGFY/%bD*3q(%l_m;ZW)V1TN&ZUs-_Etl5Y0%l=
%<K77O/Rr-.E?$nBJ(cT:q!"0R)MKFNs*7XPZ6GD9>+lrm$UB@:_pcVLaPtofRmR@O(96NmJ7U<&oq`d%(m`jt]gl9<Ce+4AqakF3
%S8D*S:/1R6*AN/`.#EWS!YYBklSL*+X'+\CMaE`L*c8\s;-'bA-H6pj\isl!)NbJ3cACY@:t-?.Dt,M07GUJ\Q/89q;X*6-@@r;n
%`eS[Vc9Tf$aN@q\*Im]*W%TI:cL'2XAe6f6JCiY,l_bcG2SKMV(%/bqoH#)*I6`Xt,B8qr*sX?QUEAu.=k8Us`cd;cmPZ7K".0jt
%+>lXub0`L2$s,H:*->;ihDHLNBQ6J:dZ@QtE]4ir@[hZ)3CoMu5cJG<OZ(/?:pmB#FTuL7'->bneJDNR^4#L]T6*&T-6jgoZ4mnU
%/sF8j$nmnUT]9R6gen>R1lOtDO0+\h=,!_Me(LD,"j/fdOkp+0lC<^Lq@T8o)[Zo-JE&IU&s$\=[]gl3:unQDpJdKLm>r(j1,Uf:
%%%\514&?$fd+S*Gd:"oVXA=HiGM6-e^\2"OblC3#-[W5L&WkbP=ipaZ&c86=4su41ph@_^_MNB?rWV%"fgU[qV(.\FM6*T0E2_IG
%OqJnUEA@PDaSO5>.7g@mB3"i'+l\i7TnJRoLRd^qal2/u9?=.7?2O\ZR0"S[Ano0uM=2l$EMK6k"V$Td9:6n4/r.%lrM1YU;&Pc0
%OEL8]XV&)k&p(Vc4^bumnqk.D!ZN1NAF^$QLgaJDC&sdEW^IdDZ;aYQ!0gXP#3d6km#?6pO`%!F;b@%C9Gibq"*GJo7qCk=BPB.k
%iIXn'(D]e>-qD.HU)(m[YDorhSW^IUIg6VMhgb$k*DFO;Am^3pH@kh_6#nVH8h+erl<$GFM:?@<U@oSf),/Y(+r'fr]%H_]1?keb
%o8#9f[qFjN*?gA%3J[NJr2t#^[jc6,8-c_:of.h\TG'a0+E1*q3%XEa:'p/<.>?b1I@^leO.^_Gp[3\&rNtV,91:Y=E!S+VB>rh(
%l%KrW>[er#"rBl"L1:8%"A:p;:.A7s4%S:24Lo^(3:p$7jccE"M&Ria=0bSCfZ'Aca<1^5;ugVAE,nC7GsVr2$qBq/Q<4PaNshh0
%1(GrZG2aLGc(e]-.'6qWjT0Q)]q9C/QSC'm<*/!e45gLN_]:T_3qk(EbZ^A7l;s6gLNtpl1LO:\a<;4T8ulH'&!7bUXCAFoIY<r-
%DIK?.4c;S&af,>eF!So^KVmf'_e`aX/LqJ9_/=i;IIAFG/b]]2Z,?.dJ=.R[$<IT,j``b6CRU*)\lf/UX/gu/4J.MsLJBu8]#<:T
%/tFXDWTlQ::-2X&&mT&9@JVOJn[&ln\t!dXg?/PlKN(9HI=j<S:5^Y;*p`;6g@+L.lUT2*+01q0Kro$uEE=JE.s/,M2I8DRnGR!j
%$.,>4SsHG@kd!3<<b./d_j/k%Ga^Z2R,AIsl$5t1*c.=ed%G9'[e=u9+f_Nph6<g,W"P\9rjG/2!L.$R-5>EYGUm)mDbR#2D$R)#
%/]Jr9qpb>aKSIG_P+aV!Z#q&N:!5OOVd5mmU_'m6PUcbI=UUd'QXIt4^/:`(0u%(_>)7'5$0T)AWN.io"SpNA#tce;jtj.b9rZ%M
%Nb$9qhQX%=Oj`i8&g.KtF#IP?Dt?XfIOm_hPCOG%0enckpEO3RqJ<r]D9P<krgd\&cN_4?"QWrj8g%CW7inb&^\H7O#.1oGC.8O_
%W$gU.TZJL1JqDW@Yd=uR79^W0Ck3ss0OV?0%R:rT5[an,7>fe!co"DS6I!s\>K&NnqH2s@.3*9]M,4hMAJ&%1QO+"=6^4R(0!hKR
%-CPqNN>>P%8"@^fAAU'(<=X?BOCJi!J##VW(6;8neMEl>)m_m9Z'2nIoI\tuW(@[#Q#X4Q+/;5(*gIU:]i-4`ds3@^k?1((&fFB5
%K2WN9SZ`%tcesubP>"O0"[R,7e?f&7iB-ZDYl;UoOpl6r*''(ib+`!8b:W3Jbj77K4/r;HeiO'O;]Xedb9CD)R"H)fS4_T-36NG[
%Bul04\T6m78;95jihXJ<oEuTOea8*uLS9C0joUmNh#Fj^"p@APJrK]"\cJuKj,dalco/gam8Q1bqp1>lLU=K$L0ULNR4AG;_@uCQ
%k/ShgWml8`q<8+0^[A1Q[@R!B`Vm!P\B/EeN=5tOiWBGZjJS4=0ntF;rNe<'@33Vg..kp"&3_&KXa#.J1bfQi&b_bj.R>J!MTZLp
%,pJcsDE?oJ[J9%\\Lo(E`[.g4[:a+DUtBNrC.1u`r&C>PXr-3Z7<fme=n:gF^ID[-(]a^OX_L(CqZ.>B5KQh+;Yl6.)-/R&=8JD$
%*)&6GI_jBKE1?M.bPr!q%"F>;,E%XuO`_#F4?;s?j1X10U4=#"r2j%&'=*K*"S)_ic^=obQm%R3"DKU:2+f;QfN^Z!0TMuj,h-ms
%e(EgIalX^'d*K55&=.4@JFT.K_?$WS7"5)5]sUXbMfjfE#mLPkkGS.IJf+7]FIhFS40&3k?ed475TdHD55X@"(4sNoIEYSs/Ds#N
%#6*a0QNOknOUHcUq7%`eT7"SO^mof-Z5C@O\:npl\Leo#Zi7%bn8Q,%b/11H+A7/+GgJZYA`8VEi6Cnh>C]>)6n2<F7-HBm,Qok]
%7tP]sNEI(r/h$`(bK$BT$<)>Yi&n"M4R7tu3BP#/*C:[G3f*Ad-u%Ss9*SB"KqI4$G^SJ/*']*ZLR!Y\M*0bWP^nT4f:@J#bu>m<
%%,T.,<2,#Gn0`A[Q7'hHN]ojsMaSHU!g`-?fWb^jQG>Ds2%Z'4,(^d"Dq3'_j%E]DU4=s_=9F*;]+ZON&]&NH7%MjY&lU'mBF,le
%C[#OVCOd<SbabKI\je(aTAb(?XKGP[ck1_<N($]`>Cml,Ttg\'**-U>JBol)1OBb_Z8f0uA?[8*7H.ZNae56[llu2G&2fORn08Q[
%<WXM>,VWd>W,fS%#7UR)C7uU^gbmAtf0\`TG^h-Xc(u;?p4\1QcN@;i5S0D@p.__a>7D8:@WoXPf@>cna!W4D$#RWjV$O.sX$^"*
%]IUP<pLPpM=@CM56o#IY_MVmnaa1u2G:&U!64RmZYf:U#V%-;uP63H6@+-j"1kfaER:Z?$<a;2XW1&jeUbub]Xp.5o4C<c*coBpF
%Gp]X8P+5Z9_UXA\!7r3lPsUhicr2`9)ae[^@/W\W_Z*d#B?!8$;9p"^OR=:q8e!B>G:;`:\Je;8><kbG'QhMZ,Nq0,#jK)+0pV,D
%p".4+5X]akmTWKucV1b,futuKKINRNjJ%_pJ-Rkh"%7qM&SCJ4da!/k^o3,4_O8kI!Y!lrQ&SmE$RpZ/*!6YqlZR%7a"1-Xcr(f0
%MDJIu=KR.K<);neZ"Qu.<mG.t?nL>m-QF?8As?CdK)_;4U][dU7TZD!Y[niC!1AQNi0`<:AgpgI([?tKLD7'B6ucKsXA"=(^l55s
%da`R.jW+4<#6Jhq>Q0_\?Qf]%@k$f=&ncR>:u>-:)04,rPTfPc])h%SJjZ*t:KIZsn98\,St%>JdolK'c3cf"!/1X^^W)d3pr'LN
%HbPX\/b"X:,d)r\+OI-QltHdoB)4u[%:Oh(OVsdCNA>maqOPbS0CXk7R7u[t'@Ee-"d-IrS\V=H2=MY)_h6kP(.gr(.N&I/&((i;
%M\\Qd3\)=408Z4*%@ii)q7CW#=L3Su#D+O"4=.ZR#_T'\Pr[9T-_.2]8'<jl0oc<#:[j.0-7pHing+!O:IPIf84pZ+$7?6J:icu>
%`*km3?iu#!<V:bBaf:a0_OnOI7AP\AArOT@Xj/\f"F2M&9+_?W<7.MW8=h)ubID,X<@,U"+..iOqLjZ)BcBSsYEW2rVbGll&E9H@
%G^*3.Oh,;o7:+BJ%[s134KS!*")\WK;Bup.$O]GY32AFq^aBXXOJ]%d0^)#d#N/F'+tO[#EGb@4!%HR3+=C.^!)EP>Knlp<4:RtG
%"XuPokQ""a>GS-9URV3Ag%sa20h7o@!k6]9MgdQr,u\;akUHH1pAZr5K(j8o87gCJC@0r6_*L#%a9iZ8Q%]dZ9KP$9Jujl$0)@On
%.aFm1cmi-.Y_pJqCaql+A%$-uTlL4p96fjM4:"DhBMYV#I6GEAYMcG]SOkki36iBdJ1>:=X.Q)_'Aj)1`W62kaiTWV8?XX2!L9ob
%"d+@.O%O:43KR;F)K<O7s5;)XIX72E)"QT-rsqjsr(!naZZQ\q-fI:YN&Cp9R7JDnKm(plRf\k*=[f)RMuOpi-og]:1Z'LaHr172
%XR]Ju4u_.:NBr!2mN22a[+Bf&Ko46@:<A]%`.jd%(;PcM5rfP/L96=0!"h716$+luh,ULD(Pj&_ag!b<s,!h&.BKIg"9#i981^P0
%F.66s>,>Gq.L?:Q<R`=i5lc'6RoFM;_mQ<D2MJOn+b=S57RRNWS>e0#"\sA:R?</fdI'o$)<e%e$c]%e!l7.$VGrM:`9BZ@Qn$If
%D1K!6:>KDrk232,"!JL',KEbe&:X-"I^m5!$%Z'u^kp_8kn5>!?98;OJ8em]C["cu5de_CRb`-jZcI1k#?fttUC;M4'eJ#%&/5uR
%bgkGToh<R7kjjQ'W\gY.K)98aD]C7c<$^)r%k;0ND\72ObHFY6R"TI5!Ks8rJlgD9rX>p!+b*T?-\`#.*-8>?3MQ?[U'M7"OXS+^
%oN81XY#H5iTGcc^EH7m2[;73W?S.BUc!cG"=XuAhT6Z3K1"kY,7s:VFS5THk=DdY`/_O.%_rZa]e.bXC6N@G0%Q*AM0ps6K+RE)e
%^&XJR(qBOh-oaD.#=S@/9SR7_EYK@'((A]@)O$qX"5YE@U<(!q,^-0Z`64a$`]6I*+-p#^kHN?rMgAY_KOiSdUFT^l9Bjsf'g^'!
%EA:sa;uq'83?JBmT`k:RQNGR-E72YNbd-TF6WL@1E?Ra8ahe]5FOr./58.O)%6YP(J;VRT^2m6bcp$Ro[2Tb1-]5OPW:C]MO[#`]
%SJ[AD!lm]`[XWp[H]-dP(?^LAkcb;cW#DFl.ue3Imq5q;&EH(jn%J6@,tZQH.^_3p-g%p*r4u7XR]5rpETHm44PXM":^nB'6$(J<
%,"s#MEKVDqMcbdmARq2c]b':[`eXV'W"uuKbo?R4aX9Ogbho,\VEUoKC'M_h^(90[qgAL":qO>ICZta(-Il4X\CRq-3\QI`&W4c6
%[:iSIXKdS(RGc_7<s7MZfA`$mBKc4=(`I9G_2ogL16BuQLU[iefr^t/"o$C\!7B<2AZKdAp<u'g)k)V'_Vp,'*]6bUmCc1;<k4.p
%`p>sG%.T1QFWbeq$Yf3V)[hcD.=u2Ri&u\h9o$EakSPQ5m%$Bg<!-6Bl)oit-t]?V3$sJ%G5_sDQWbKHE*0H$)[H'hq5t9,($aT$
%-sMsejh\rbNM&:p;47H.HoZ(@Uj#g>-6H]pJos2Z7SL(]X&0=l@:pQil%t+[S!h5*Pd(B,mAOVR3_nMNEIeHP5f'6sSsTdNVBl@%
%NW)p!q/tOd<&GApeO<q--p4_k)8YcW&2FtM(7UsH4!NnGl?uZe6sR7Aab\!(B]Apm]>$%HK;g'&R(u)!OUet&`$L3M.lulDhSe/H
%/nSE/fA^7@Yr3&-"h$)Z&@,'B``jAF/r)IfhQ?$&:l1rQQsu8NF#(fK8A`rm=33Z!($?6Dc`efW2=b(2I\;tl<nQ7:jG.dQZ$=#H
%!?RdF\&ZVhOn6H3'Nc(`k/;e3?eBD!.``b7oZ[%WiEIqdas^d'p(S&hiM0g6/-_@^SEIB22:&99'B]8`cb)l.\V9&:RG)Lrg"PLc
%^&t2!Td3&\=9QHX*&4u9_9PPc*jCfA?%rSc?\?$]lQqqTW".Hgj6rjK,Qn<qUdngL*'XkESbp6trnIC%K#L^4c+!l*WACI8^ob?H
%)8%)5U5^\-Q:"$.OJBE6"2grLI"+=iB-t4tN(m>m*Zo"J6S26\+H5qkGE9gens1YF/Q:WR6cj-5&%$Vf,>%UhPPsqI^XWl:l4KZ`
%g3^B:1.R.dG(sm+,/QJKlTqe$*r!&B7Sj7mJXZmFl6$b0fU8"EIYe:t4t$U?P*;[_=@KFsNTl!]@][TW]opp4T["[D=G;V%YcA:5
%7GrsCbT+-92!?4sj"6aD4mk)T/.%nVJs?7o0l[=W2A77%&\BY,6t2\-:j.YJq/@_`Ds`=r*'Yk>c=Wp)M4@:2$PQC*>(Xe2"uuf3
%21&iSZ5C#pg)EE.iPJMBfFKK!?ZEekq-dY3l:&bOBdUIqViBQ#9!gYt$jr8/-/$+q/*u^aW%(>s5s=PDVS`Nd$Q;^?fZT`NUtpk_
%ds24uqc34!+'YcSo#eNCe>:<FC=@H'=2Y>pN"E%KL4n*hi4?6qfL[@Rnr&kU.r1(d-g>:M$\Br2ThA[slVPE#\1(1qW<:gYA?T_R
%\**72I=jp3\@=5S"CaQg`\l7WaW'$G_YTtZ:_=*ApD7Rm#MR?u$Pq;FoH>OPAMp6^UDp$#<`\+[<U+feo0eijS6K2IFH36mW]n([
%n%r[B-=SIgWL+`FLM:S)Y0+ci;sk=m3H#%/lL"@*IZ8`iTHp"!M`&oLL\+B8mkrcu,2a_]nC+<H#\9"PAjau$]\ML_!MW`aE!"fj
%rf>4<O'PsH![OZ#8&h/lRPd]=X"Gk^6O:rp)3;qspn%e705/I%mTkns3_=B-MC@!`QpQmf#.0!sc)8o%jQZKNr):fuAI\i&+j?IJ
%OQNU8;I3qp6?"6YjIV['/?KZ0FJ$-d31m-eQZMHHfW*<@__fo9ieU-N5H"'9A1.'IA(LC)lgk#WJ(+o(Z1C5WGWM'b\5YZ=H;L<V
%'+DCs+R55S+S;Hpj+.q@-@J]2JiQ4a<c"X.B4TLq27T>CLEn-\a$j+A>;EhL:cAe6OJ?nA*2[o>/@\]XH'>)UI86Vc*-YB+%DWaV
%p)]OnD@R$=ps],#A.+@qeT,>\k.2Y%:HIoC1X$2&O:L7PZ#OnDeKa)]g3>BuX!gLH%4k:h6XUQVfXW.e6*eBiA+U\B28L!-'DIn!
%T9J,f1Iu+:J:1TM:Uh2!4cZC@V(RHQpShk,3/cX^)HGeHUIp^kQ-rX-`o,^%i?oY\jmJJgZ;>>ZfRDYl""/7]?qmlKl$8*N;9ihZ
%_c&0C,^(]egr[Kb0Lq_CmuLC<Q.%NEg3h<]8e)'fKG7L,*83$3h40)BAA`[NSeEr<8lqZ_[)n+`On$%Mqe@h4E-0JFBSERcA$i"o
%E-.V*fk!`7\f[;83prWqA])CULRkLY?Kr%&HahH1LOd#<d?"hf"-=XhQ";_!.lTeh-:i_.rQkg?5I/\]._:6h?ugH8WW`g+hbiUn
%J-b])rMqD&.hbGfKMq>lK%pC:H8$LD1n?_G(_&."SahL<d9Zp"lGeO&Q\/UGZb_/^"*Z=*YpJ&"WCZ7DQ@k<1Pm-gs=.@(.M0?fB
%rp45*J+Th^eT`Y:NsRB%04e[FZ2s\#S6!k##h`H+)e_"N4Q4>JPF7tR9qAAm+6$]rKP/L#H_*i[LK[$0fB<X_&+4om*RZD;(A8=L
%C.Su[pD>+q[i7IB1*6r;:4=T!(6UurJut?@E;+2BgB4^,C.P0c56YB$eIY>%IiDZD68IhcF3q^QS!Nuhoa4`s">ZcB+_)$e:Qh-/
%OX.6Y*Zt;'m(R9?5:&A7!&Gf6U]ff'BOhZ2ZZtCTLM1Ud,rBNa!Q<6(Y0aN?")cIL)o`3'_!sC#_?ctuE1$FR:_Uj9!^TC2$.RS)
%;m46'kFcT?Y^Uq/6Z?SBBtH\&JEpDtC)(T.p>.%<hi?MRDX\AJ\\06),ha,8=gcWeb<+@Men2P8:q;/3`EnY5&j,I&6I,8'4^.h,
%J@$O&3@>FNV[^R.rDZUHbZ[S&4M#tI/Y?CL^qX:.WEc?D.SL2sSC3'(8'T1CnAa@k=g2MZEu;u%OWZ,Ih\bRD9M1=1^UGQh$MIkA
%d-TMTL&G8LL'V0RpQ4':2(MPFEEnUq$E2eWXpH9\&(g8C98(f/5WWs/QR@TE+=-1bSe7k$[fYfD#eA!"*O^W/@1299_NZnr#W+-A
%WsT\S#4bE&R=dt%JK`gA"VU"J)PsE%c+r!=]F!(d&djCKOOKN3\=:Zr,25EF#"#mpNYlR;g9okhS=1c<&f;5(I=q"8FskZIc#E;+
%6%le$=$B8J*0Mpml+@PI!c=m0-tJH9GXs"B$AcJ_%[cC/<1@mgK]hq]eCAa/3"`PIT\>=E![DKb8&^<!Z`Jdd.4KWY"VA4.^hBHF
%dqVB^qC05&'!;6f:'o"$j9,8eBd;dOH^V/^:FXVq3KPK@IX3B):D/75deG)3BHRsG;'b6dm;scq?-FiAGCN`.I2(6$n4Wr`qGV8/
%qIc=6j4?NUAGb_OLM,@l?[KBSVlr2>55X@4-QIm"ok0eDrRt1F;t/L^:@EYf8b^mSY<M9l:LAJ&nY`QPn&?(AZkJK0?[(X\p;OpJ
%n$=YgSpQ,tGOg1U`P]"mV5dmJqMh,]pA>m,m^4G#puuS?_"#n*Sq:I@?@*02p;Oq5E58Y?$cg&tp,!`skdBU4(kUA2Ll`OY58/%t
%]`(mC%I$L`'81H2,laPS1%F$]<H7[cDF(:G6=NYDALl#Sj:<B'YU\]8ljGg+hk[>O(qMaa+"!"Nq3OEIZMhr2G"m10=T[K22D5`_
%=:$RY+>>9"9MA$8K8L[HBXFZn.;fV]gXt7@M5$h'BXBKY0n%$N*/!$3.>F3P(p')Z-CO]L/R',+:4eW#`.VBXOZpoieZHu6<`*P#
%Q/g\'Z%kksER5QB/9[sl,2I5@VDh\*0PsWE8C)n^AA'E7q%knPlNk?>Om^@9,*DCb*ro?0P%a(61/a;ZB.:S711\Ud%8.b*9l:pi
%Zj[K"q1Jc[.ULYk>!n<"$2J1JJ-FK:>#U4i4Pd"](CRVj^I6W<cW-eenHI"E[/V-%G_=LQBf@HA`*fDY!_dcUOGehm_*SA$06F+S
%QHaN_%CH*(mg(^^";PB5l*c<jT\;WO-A:lO[p7R`\D77Ap&D7^b0P[lo?+'F^ac)t1TPVAM\SF;2CqGbL'3,\[#6/2,nE$hhfL8d
%XKRTIL_fsE&K;+%*NKGdfFONBHITYqPoH#%62)6'LiiYCaZ5DKQ5p92hOr4iA'-SuR*9Z?W%ME@SRF'"PI;s22-@%R)WU%S[K_>D
%'Q5L)$"?%rU,1piCc0liW`Mj4jsIO,:K77pJpun+($BpG>qqG#8`;0n&dEnP9Z_O@QA<$-J-AD4!:*Zu6SS>7"me6qPCOY^?NJ_L
%%1RlSGD<07KkEV&`]X=S5QN7`=SNkuDCW+elsO]kGj1/Q9t6'H!]C1PJA;LB#Ve+i@gRu4A;@Uj2"1&!R0H84("M0DjIuna#"t8D
%!joa7Aa.>4la(Z!2u(I(<7@%9CaLG.=+j[`$kk<f7n.UU!P6Y72/J@-b^"tCGH>rtXKc:DYSP[bnuScT`Wrem.5@[05iP_,f-7"I
%C7PdhZ@3eX?\XT[%"Z@B^tbU@))3$9fYM\$d*BL5D?3\)9P5<6/S_DKXck%(O&2l2B%GC-:hI^tJ4Rpm9cL+)&L4i"?s%ZOD4ao>
%b'j;WTp6l/*N(5CR4F]qP=ZUJO%!0oD,*'b,<:t//U8i<*N!BsSFG_j!$<Ja/?#J7*<E0rW)eitZ%h75^n75Vh9dPjcMMkIF8bm<
%X+>P0)3j#i]0B+"6UNTh7o[Fj$%)ZA15$YO,:_$]7D,c?1/.&gKH8:[N<;2,2Lcc5^GI]hJU</S46V73H!WAg:cIS?4Q)l.qr`f"
%pOd4"<m.h;;]pa&5<]FLCQWi9.!*(P5=H"cC*<HS`0rD/E.)WePK!/QUQm3;SY&,B2-SJ&RTn5se+\UODjPQ-?qcBn>-9dO#7`?*
%)^($'@fWS[!e`"-3H3'>as;YUb1^KA;!"$0H52;C&<0jJ/lC^76%i*PE`jOMZcqHcS62JA.7jOTZ0.6qPmgc&=mkI(eI^I2ossL]
%.9+"e+`[,n#6t2C@>SP&J.4M!5J<5q.]k>hbFtBO?Po/f^Bk:=N]um6\]s+"On+<]s'0LJ3,%,%pp"b$9t[kUjs9'p^mU?09aXV=
%o3n&PaFq[Ir<>bbV6^Km/.Qb0\Lnf"Qh4bYMilqK%]D^t]<)dK?"V(>#fUXV4>5ANKINY6(@jY"Mi5E3;Z%qs_'p+g#=!Ur>u?;\
%$q''i;o@^9qVrr]B>Sl83<k)rM3?<:oS<?G\ok"q(sT<[11`%Q(6'>e)H3nC5#s!tKNA<RPOVt<V]=0??,JLg.U\F3k-cmaFNZ(g
%1PQ6T#N]R)!C;QFnF0co^Oh?[P9M\;KF0c35^.*S@,3f8;)OR@;c&V1"M0haR'jqf.?+TGprkX+2h1sP/ds3CF+=_-A%`7N_2MKW
%eKnJ@8e?&^oc.O$R<*h*?"ULo^.//aQ3]]rODrf]\C__?bfJ@T]P+gW<)lT&U"H`BMB4l^*(Y-`W[H?J29.NhB&tmuK*i`\T8aGJ
%K/B:aPcj2.`-KfD6HSMN'B364j62hakK3!4ag=Vd:Y6KgqO%M:(BQ@BNeI3^l5u6(l`CQ3O([p)]CcJ,cjBs+rHeH?+78C2.>RoL
%FgZs$#^`e9'c8.\.ZAFG,r-C;%1;*,N=8I%H1.4E_nrdnVIQrM`.n_Z0g-@2&AYbfBEDqlB!V1k>cB`>_ZaWS/%hs<R1h/>8FNR2
%Co%nT\k,K&dl.O58?C'llj$NJGgQ06jTcD.aZbO/V_2rTeFCk@dO'/B+h829lYdE"QN]\*kal]p)I#WAOn=@^I=Bs3qcjtb_qHs^
%4B`-N$o!kq.LJUV^d'H:.X'h*gVO\WFZdsA?GLs?/tk[g5ir2A1]7S18\0d'q_sP$EB.+g<tp9:=U'U>Yh_.$Q,=b:aq3>4frh'#
%eaGbn-@7=#6)a&3X'oFZA2IPPK2Bh:[BSN2=rPKm?hU\WorDerfp=EVn9Odp;1;Foo^#CbG?4Q6)e5bg%n[g[P6#IA@Au<^X;*Mf
%ChIKtOm6GT:XQ:q!jNQ[f\_Sj.)pG5-e*_[M0,j]5XeA9]gT-OUFIYYeNCbk''7OuZrT>n@7TK8Dd*=1(+4-E^Gr^Dft2+1FIO![
%OiXqYY^r.Yl;L7qkP0?h?sN]i'd@/crq/S[q8",/%H*9M#OkfQNq)/]$]ji<f8C1<pnnCZg%&,e"B5,B+bGPu]bnTD^06WnnbIE,
%JmZ9!Qs`M!:7V*ulNE*rm_)0-#eaE?+>)Bp&hC?aIk%GW4U:@?1?5"e7GsPF)c:5>cu@:H>gdoOaF]DGND$Si>^oWs_m$cm"Sh3*
%\Hoh#8LiX3F(1Us1N#dV-S8T)Mu\>RL(r2"ADU#O0ASq3qF?bNmTQ>N&r&i+?katSpC/O%H?>c@!mU[n&)"Be=PFOfD2GeHZlS@2
%9`%Ag4j^P<cFNq^qNJ%0GDoj0IC;RoC<=N,i7IM0BBJ"j\\eC@]>#:Xjk#!S^\CU^IeiF1T>17%c'n`]p0Z_Wri?(urVNe5q<Ijl
%rL;^EiVfC_H@#VY[od0JrU]f^Vr*"(eK988mea2ZrpW_@r@];gdJC[lTDb\fo)JXThu%Eg`^-=~>
%AI9_PrivateDataEnd
